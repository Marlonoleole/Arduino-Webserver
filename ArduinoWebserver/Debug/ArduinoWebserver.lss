
ArduinoWebserver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800200  000037a0  00003834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  00800342  00800342  00003976  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003976  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000039a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009cda  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001948  00000000  00000000  0000d90a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022f8  00000000  00000000  0000f252  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b3c  00000000  00000000  0001154c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a72  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000053ea  00000000  00000000  00013afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00018ee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7f c0       	rjmp	.+254    	; 0x100 <__dtors_end>
       2:	00 00       	nop
       4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
       6:	00 00       	nop
       8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
       a:	00 00       	nop
       c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
       e:	00 00       	nop
      10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
      12:	00 00       	nop
      14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
      16:	00 00       	nop
      18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
      22:	00 00       	nop
      24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
      26:	00 00       	nop
      28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
      2e:	00 00       	nop
      30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
      32:	00 00       	nop
      34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
      36:	00 00       	nop
      38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
      3e:	00 00       	nop
      40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
      42:	00 00       	nop
      44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
      4e:	00 00       	nop
      50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
      52:	00 00       	nop
      54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
      56:	00 00       	nop
      58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
      5e:	00 00       	nop
      60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
      62:	00 00       	nop
      64:	91 c2       	rjmp	.+1314   	; 0x588 <__vector_25>
      66:	00 00       	nop
      68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
      6e:	00 00       	nop
      70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
      72:	00 00       	nop
      74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
      76:	00 00       	nop
      78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
      7e:	00 00       	nop
      80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
      82:	00 00       	nop
      84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
      86:	00 00       	nop
      88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8e c1       	rjmp	.+796    	; 0x3ae <__vector_36>
      92:	00 00       	nop
      94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
      96:	00 00       	nop
      98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
      be:	00 00       	nop
      c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
      da:	00 00       	nop
      dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
      de:	00 00       	nop
      e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d4 0c       	add	r13, r4
      e6:	ed 0c       	add	r14, r13
      e8:	06 0d       	add	r16, r6
      ea:	1f 0d       	add	r17, r15
      ec:	38 0d       	add	r19, r8
      ee:	51 0d       	add	r21, r1
      f0:	6a 0d       	add	r22, r10
      f2:	83 0d       	add	r24, r3
      f4:	9c 0d       	add	r25, r12
      f6:	b5 0d       	add	r27, r5

000000f8 <__ctors_start>:
      f8:	15 12       	cpse	r1, r21
      fa:	af 16       	cp	r10, r31

000000fc <__ctors_end>:
      fc:	40 12       	cpse	r4, r16
      fe:	da 16       	cp	r13, r26

00000100 <__dtors_end>:
     100:	11 24       	eor	r1, r1
     102:	1f be       	out	0x3f, r1	; 63
     104:	cf ef       	ldi	r28, 0xFF	; 255
     106:	d1 e2       	ldi	r29, 0x21	; 33
     108:	de bf       	out	0x3e, r29	; 62
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	0c bf       	out	0x3c, r16	; 60

00000110 <__do_copy_data>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	e0 ea       	ldi	r30, 0xA0	; 160
     118:	f7 e3       	ldi	r31, 0x37	; 55
     11a:	00 e0       	ldi	r16, 0x00	; 0
     11c:	0b bf       	out	0x3b, r16	; 59
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x14>
     120:	07 90       	elpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	a2 34       	cpi	r26, 0x42	; 66
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0x10>

0000012a <__do_clear_bss>:
     12a:	23 e0       	ldi	r18, 0x03	; 3
     12c:	a2 e4       	ldi	r26, 0x42	; 66
     12e:	b3 e0       	ldi	r27, 0x03	; 3
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	a6 3a       	cpi	r26, 0xA6	; 166
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>

0000013a <__do_global_ctors>:
     13a:	10 e0       	ldi	r17, 0x00	; 0
     13c:	ce e7       	ldi	r28, 0x7E	; 126
     13e:	d0 e0       	ldi	r29, 0x00	; 0
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	06 c0       	rjmp	.+12     	; 0x150 <__do_global_ctors+0x16>
     144:	21 97       	sbiw	r28, 0x01	; 1
     146:	01 09       	sbc	r16, r1
     148:	80 2f       	mov	r24, r16
     14a:	fe 01       	movw	r30, r28
     14c:	0e 94 82 1a 	call	0x3504	; 0x3504 <__tablejump2__>
     150:	cc 37       	cpi	r28, 0x7C	; 124
     152:	d1 07       	cpc	r29, r17
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	08 07       	cpc	r16, r24
     158:	a9 f7       	brne	.-22     	; 0x144 <__do_global_ctors+0xa>
     15a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <main>
     15e:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__do_global_dtors>

00000162 <__bad_interrupt>:
     162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <_ZN8Standard6stringC1EPKc>:
		{
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	ec 01       	movw	r28, r24
     16e:	8b 01       	movw	r16, r22
		{
     170:	18 82       	st	Y, r1
     172:	19 82       	std	Y+1, r1	; 0x01
     174:	1a 82       	std	Y+2, r1	; 0x02
     176:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
     178:	cb 01       	movw	r24, r22
     17a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     17e:	68 83       	st	Y, r22
     180:	79 83       	std	Y+1, r23	; 0x01
     182:	8a 83       	std	Y+2, r24	; 0x02
     184:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
     186:	cb 01       	movw	r24, r22
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     18e:	9d 83       	std	Y+5, r25	; 0x05
     190:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
     192:	48 81       	ld	r20, Y
     194:	59 81       	ldd	r21, Y+1	; 0x01
     196:	b8 01       	movw	r22, r16
     198:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		}
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	08 95       	ret

000001a6 <_Z11USART1_Initv>:
	return 3;
	else if (data.find_first_of('4') > 0)
	return 5;
	else
	return 6;
}
     1a6:	8f b7       	in	r24, 0x3f	; 63
     1a8:	80 68       	ori	r24, 0x80	; 128
     1aa:	8f bf       	out	0x3f, r24	; 63
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     1b2:	88 e9       	ldi	r24, 0x98	; 152
     1b4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
     1b8:	80 e1       	ldi	r24, 0x10	; 16
     1ba:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     1be:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     1c2:	86 e0       	ldi	r24, 0x06	; 6
     1c4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
     1c8:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <USART1_Buffer_>
     1cc:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <USART1_Buffer_+0x1>
     1d0:	89 2b       	or	r24, r25
     1d2:	41 f4       	brne	.+16     	; 0x1e4 <_Z11USART1_Initv+0x3e>
     1d4:	88 ee       	ldi	r24, 0xE8	; 232
     1d6:	93 e0       	ldi	r25, 0x03	; 3
     1d8:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     1dc:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <USART1_Buffer_+0x1>
     1e0:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <USART1_Buffer_>
     1e4:	08 95       	ret

000001e6 <_Z15USART1_Transmith>:
     1e6:	e8 ec       	ldi	r30, 0xC8	; 200
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	90 81       	ld	r25, Z
     1ec:	95 ff       	sbrs	r25, 5
     1ee:	fd cf       	rjmp	.-6      	; 0x1ea <_Z15USART1_Transmith+0x4>
     1f0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     1f4:	08 95       	ret

000001f6 <_Z14USART1_Receivev>:
     1f6:	e8 ec       	ldi	r30, 0xC8	; 200
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	88 23       	and	r24, r24
     1fe:	ec f7       	brge	.-6      	; 0x1fa <_Z14USART1_Receivev+0x4>
     200:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     204:	08 95       	ret

00000206 <_Z17Serial1_Availablev>:
     206:	40 91 4a 03 	lds	r20, 0x034A	; 0x80034a <USART1_Read_Pos_>
     20a:	50 91 4b 03 	lds	r21, 0x034B	; 0x80034b <USART1_Read_Pos_+0x1>
     20e:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <USART1_Write_Pos_>
     212:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <USART1_Write_Pos_+0x1>
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	42 17       	cp	r20, r18
     21a:	53 07       	cpc	r21, r19
     21c:	09 f4       	brne	.+2      	; 0x220 <_Z17Serial1_Availablev+0x1a>
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	08 95       	ret

00000222 <_Z11Serial1Readv>:
     222:	f1 df       	rcall	.-30     	; 0x206 <_Z17Serial1_Availablev>
     224:	88 23       	and	r24, r24
     226:	f9 f0       	breq	.+62     	; 0x266 <_Z11Serial1Readv+0x44>
     228:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <USART1_Buffer_>
     22c:	30 91 4d 03 	lds	r19, 0x034D	; 0x80034d <USART1_Buffer_+0x1>
     230:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <USART1_Read_Pos_>
     234:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <USART1_Read_Pos_+0x1>
     238:	ac 01       	movw	r20, r24
     23a:	4f 5f       	subi	r20, 0xFF	; 255
     23c:	5f 4f       	sbci	r21, 0xFF	; 255
     23e:	50 93 4b 03 	sts	0x034B, r21	; 0x80034b <USART1_Read_Pos_+0x1>
     242:	40 93 4a 03 	sts	0x034A, r20	; 0x80034a <USART1_Read_Pos_>
     246:	f9 01       	movw	r30, r18
     248:	e8 0f       	add	r30, r24
     24a:	f9 1f       	adc	r31, r25
     24c:	80 81       	ld	r24, Z
     24e:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <USART1_Read_Pos_>
     252:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <USART1_Read_Pos_+0x1>
     256:	28 3e       	cpi	r18, 0xE8	; 232
     258:	33 40       	sbci	r19, 0x03	; 3
     25a:	30 f0       	brcs	.+12     	; 0x268 <_Z11Serial1Readv+0x46>
     25c:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <USART1_Read_Pos_+0x1>
     260:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <USART1_Read_Pos_>
     264:	08 95       	ret
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	08 95       	ret

0000026a <_Z18Serial1_ReadStringv>:
     26a:	af 92       	push	r10
     26c:	bf 92       	push	r11
     26e:	cf 92       	push	r12
     270:	df 92       	push	r13
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	8c 01       	movw	r16, r24
     280:	89 ee       	ldi	r24, 0xE9	; 233
     282:	93 e0       	ldi	r25, 0x03	; 3
     284:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     288:	5c 01       	movw	r10, r24
     28a:	ec 01       	movw	r28, r24
     28c:	c1 2c       	mov	r12, r1
     28e:	d1 2c       	mov	r13, r1
     290:	76 01       	movw	r14, r12
     292:	b9 df       	rcall	.-142    	; 0x206 <_Z17Serial1_Availablev>
     294:	88 23       	and	r24, r24
     296:	41 f0       	breq	.+16     	; 0x2a8 <_Z18Serial1_ReadStringv+0x3e>
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	c8 1a       	sub	r12, r24
     29c:	d8 0a       	sbc	r13, r24
     29e:	e8 0a       	sbc	r14, r24
     2a0:	f8 0a       	sbc	r15, r24
     2a2:	bf df       	rcall	.-130    	; 0x222 <_Z11Serial1Readv>
     2a4:	89 93       	st	Y+, r24
     2a6:	f5 cf       	rjmp	.-22     	; 0x292 <_Z18Serial1_ReadStringv+0x28>
     2a8:	f5 01       	movw	r30, r10
     2aa:	ec 0d       	add	r30, r12
     2ac:	fd 1d       	adc	r31, r13
     2ae:	10 82       	st	Z, r1
     2b0:	f8 01       	movw	r30, r16
     2b2:	10 82       	st	Z, r1
     2b4:	11 82       	std	Z+1, r1	; 0x01
     2b6:	12 82       	std	Z+2, r1	; 0x02
     2b8:	13 82       	std	Z+3, r1	; 0x03
     2ba:	c5 01       	movw	r24, r10
     2bc:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     2c0:	f8 01       	movw	r30, r16
     2c2:	60 83       	st	Z, r22
     2c4:	71 83       	std	Z+1, r23	; 0x01
     2c6:	82 83       	std	Z+2, r24	; 0x02
     2c8:	93 83       	std	Z+3, r25	; 0x03
     2ca:	cb 01       	movw	r24, r22
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     2d2:	f8 01       	movw	r30, r16
     2d4:	95 83       	std	Z+5, r25	; 0x05
     2d6:	84 83       	std	Z+4, r24	; 0x04
     2d8:	40 81       	ld	r20, Z
     2da:	51 81       	ldd	r21, Z+1	; 0x01
     2dc:	b5 01       	movw	r22, r10
     2de:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
     2e2:	a1 14       	cp	r10, r1
     2e4:	b1 04       	cpc	r11, r1
     2e6:	19 f0       	breq	.+6      	; 0x2ee <_Z18Serial1_ReadStringv+0x84>
     2e8:	c5 01       	movw	r24, r10
     2ea:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     2ee:	c8 01       	movw	r24, r16
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	cf 90       	pop	r12
     300:	bf 90       	pop	r11
     302:	af 90       	pop	r10
     304:	08 95       	ret

00000306 <_Z19Serial1_WriteStringN8Standard6stringE>:
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	fc 01       	movw	r30, r24
     310:	a4 81       	ldd	r26, Z+4	; 0x04
     312:	b5 81       	ldd	r27, Z+5	; 0x05
     314:	8c 91       	ld	r24, X
     316:	88 23       	and	r24, r24
     318:	79 f0       	breq	.+30     	; 0x338 <_Z19Serial1_WriteStringN8Standard6stringE+0x32>
     31a:	8f 01       	movw	r16, r30
     31c:	c0 e0       	ldi	r28, 0x00	; 0
     31e:	d0 e0       	ldi	r29, 0x00	; 0
     320:	62 df       	rcall	.-316    	; 0x1e6 <_Z15USART1_Transmith>
     322:	21 96       	adiw	r28, 0x01	; 1
     324:	d8 01       	movw	r26, r16
     326:	14 96       	adiw	r26, 0x04	; 4
     328:	ed 91       	ld	r30, X+
     32a:	fc 91       	ld	r31, X
     32c:	15 97       	sbiw	r26, 0x05	; 5
     32e:	ec 0f       	add	r30, r28
     330:	fd 1f       	adc	r31, r29
     332:	80 81       	ld	r24, Z
     334:	81 11       	cpse	r24, r1
     336:	f4 cf       	rjmp	.-24     	; 0x320 <_Z19Serial1_WriteStringN8Standard6stringE+0x1a>
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	08 95       	ret

00000342 <_Z19Serial1_PrintStringN8Standard6stringE>:
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	00 d0       	rcall	.+0      	; 0x34c <_Z19Serial1_PrintStringN8Standard6stringE+0xa>
     34c:	00 d0       	rcall	.+0      	; 0x34e <_Z19Serial1_PrintStringN8Standard6stringE+0xc>
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	8c 01       	movw	r16, r24
     354:	fc 01       	movw	r30, r24
     356:	80 81       	ld	r24, Z
     358:	91 81       	ldd	r25, Z+1	; 0x01
     35a:	a2 81       	ldd	r26, Z+2	; 0x02
     35c:	b3 81       	ldd	r27, Z+3	; 0x03
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	9a 83       	std	Y+2, r25	; 0x02
     362:	ab 83       	std	Y+3, r26	; 0x03
     364:	bc 83       	std	Y+4, r27	; 0x04
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     36c:	9e 83       	std	Y+6, r25	; 0x06
     36e:	8d 83       	std	Y+5, r24	; 0x05
     370:	f8 01       	movw	r30, r16
     372:	40 81       	ld	r20, Z
     374:	51 81       	ldd	r21, Z+1	; 0x01
     376:	64 81       	ldd	r22, Z+4	; 0x04
     378:	75 81       	ldd	r23, Z+5	; 0x05
     37a:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	c1 df       	rcall	.-126    	; 0x306 <_Z19Serial1_WriteStringN8Standard6stringE>
     384:	8d 81       	ldd	r24, Y+5	; 0x05
     386:	9e 81       	ldd	r25, Y+6	; 0x06
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	11 f0       	breq	.+4      	; 0x390 <_Z19Serial1_PrintStringN8Standard6stringE+0x4e>
     38c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     390:	8d e0       	ldi	r24, 0x0D	; 13
     392:	29 df       	rcall	.-430    	; 0x1e6 <_Z15USART1_Transmith>
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	27 df       	rcall	.-434    	; 0x1e6 <_Z15USART1_Transmith>
     398:	26 96       	adiw	r28, 0x06	; 6
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <__vector_36>:
     3ae:	1f 92       	push	r1
     3b0:	0f 92       	push	r0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	0f 92       	push	r0
     3b6:	11 24       	eor	r1, r1
     3b8:	0b b6       	in	r0, 0x3b	; 59
     3ba:	0f 92       	push	r0
     3bc:	2f 93       	push	r18
     3be:	3f 93       	push	r19
     3c0:	4f 93       	push	r20
     3c2:	5f 93       	push	r21
     3c4:	6f 93       	push	r22
     3c6:	7f 93       	push	r23
     3c8:	8f 93       	push	r24
     3ca:	9f 93       	push	r25
     3cc:	af 93       	push	r26
     3ce:	bf 93       	push	r27
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ef 93       	push	r30
     3d6:	ff 93       	push	r31
     3d8:	c0 91 4c 03 	lds	r28, 0x034C	; 0x80034c <USART1_Buffer_>
     3dc:	d0 91 4d 03 	lds	r29, 0x034D	; 0x80034d <USART1_Buffer_+0x1>
     3e0:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <USART1_Write_Pos_>
     3e4:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <USART1_Write_Pos_+0x1>
     3e8:	9c 01       	movw	r18, r24
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	30 93 49 03 	sts	0x0349, r19	; 0x800349 <USART1_Write_Pos_+0x1>
     3f2:	20 93 48 03 	sts	0x0348, r18	; 0x800348 <USART1_Write_Pos_>
     3f6:	c8 0f       	add	r28, r24
     3f8:	d9 1f       	adc	r29, r25
     3fa:	fd de       	rcall	.-518    	; 0x1f6 <_Z14USART1_Receivev>
     3fc:	88 83       	st	Y, r24
     3fe:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <USART1_Read_Pos_>
     402:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <USART1_Read_Pos_+0x1>
     406:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <USART1_Write_Pos_>
     40a:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <USART1_Write_Pos_+0x1>
     40e:	28 17       	cp	r18, r24
     410:	39 07       	cpc	r19, r25
     412:	b1 f4       	brne	.+44     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     414:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <USART1_Read_Pos_>
     418:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <USART1_Read_Pos_+0x1>
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <USART1_Read_Pos_+0x1>
     422:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <USART1_Read_Pos_>
     426:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <USART1_Read_Pos_>
     42a:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <USART1_Read_Pos_+0x1>
     42e:	88 3e       	cpi	r24, 0xE8	; 232
     430:	93 40       	sbci	r25, 0x03	; 3
     432:	30 f0       	brcs	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <USART1_Read_Pos_+0x1>
     43c:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <USART1_Read_Pos_>
     440:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <USART1_Write_Pos_>
     444:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <USART1_Write_Pos_+0x1>
     448:	88 3e       	cpi	r24, 0xE8	; 232
     44a:	93 40       	sbci	r25, 0x03	; 3
     44c:	20 f0       	brcs	.+8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     44e:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <USART1_Write_Pos_+0x1>
     452:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <USART1_Write_Pos_>
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	0b be       	out	0x3b, r0	; 59
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <_Z11USART0_Initv>:
     480:	8f b7       	in	r24, 0x3f	; 63
     482:	80 68       	ori	r24, 0x80	; 128
     484:	8f bf       	out	0x3f, r24	; 63
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
     48c:	88 e9       	ldi	r24, 0x98	; 152
     48e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     492:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     496:	87 e6       	ldi	r24, 0x67	; 103
     498:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     49c:	8e e0       	ldi	r24, 0x0E	; 14
     49e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     4a2:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <USART0_Buffer_>
     4a6:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <USART0_Buffer_+0x1>
     4aa:	89 2b       	or	r24, r25
     4ac:	41 f4       	brne	.+16     	; 0x4be <_Z11USART0_Initv+0x3e>
     4ae:	88 e7       	ldi	r24, 0x78	; 120
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     4b6:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <USART0_Buffer_+0x1>
     4ba:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <USART0_Buffer_>
     4be:	08 95       	ret

000004c0 <_Z15USART0_Transmith>:
     4c0:	e0 ec       	ldi	r30, 0xC0	; 192
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	90 81       	ld	r25, Z
     4c6:	95 ff       	sbrs	r25, 5
     4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <_Z15USART0_Transmith+0x4>
     4ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     4ce:	08 95       	ret

000004d0 <_Z14USART0_Receivev>:
     4d0:	e0 ec       	ldi	r30, 0xC0	; 192
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	88 23       	and	r24, r24
     4d8:	ec f7       	brge	.-6      	; 0x4d4 <_Z14USART0_Receivev+0x4>
     4da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     4de:	08 95       	ret

000004e0 <_Z19Serial0_WriteStringN8Standard6stringE>:
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	fc 01       	movw	r30, r24
     4ea:	a4 81       	ldd	r26, Z+4	; 0x04
     4ec:	b5 81       	ldd	r27, Z+5	; 0x05
     4ee:	8c 91       	ld	r24, X
     4f0:	88 23       	and	r24, r24
     4f2:	79 f0       	breq	.+30     	; 0x512 <_Z19Serial0_WriteStringN8Standard6stringE+0x32>
     4f4:	8f 01       	movw	r16, r30
     4f6:	c0 e0       	ldi	r28, 0x00	; 0
     4f8:	d0 e0       	ldi	r29, 0x00	; 0
     4fa:	e2 df       	rcall	.-60     	; 0x4c0 <_Z15USART0_Transmith>
     4fc:	21 96       	adiw	r28, 0x01	; 1
     4fe:	d8 01       	movw	r26, r16
     500:	14 96       	adiw	r26, 0x04	; 4
     502:	ed 91       	ld	r30, X+
     504:	fc 91       	ld	r31, X
     506:	15 97       	sbiw	r26, 0x05	; 5
     508:	ec 0f       	add	r30, r28
     50a:	fd 1f       	adc	r31, r29
     50c:	80 81       	ld	r24, Z
     50e:	81 11       	cpse	r24, r1
     510:	f4 cf       	rjmp	.-24     	; 0x4fa <_Z19Serial0_WriteStringN8Standard6stringE+0x1a>
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <_Z19Serial0_PrintStringN8Standard6stringE>:
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	00 d0       	rcall	.+0      	; 0x526 <_Z19Serial0_PrintStringN8Standard6stringE+0xa>
     526:	00 d0       	rcall	.+0      	; 0x528 <_Z19Serial0_PrintStringN8Standard6stringE+0xc>
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	8c 01       	movw	r16, r24
     52e:	fc 01       	movw	r30, r24
     530:	80 81       	ld	r24, Z
     532:	91 81       	ldd	r25, Z+1	; 0x01
     534:	a2 81       	ldd	r26, Z+2	; 0x02
     536:	b3 81       	ldd	r27, Z+3	; 0x03
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	9a 83       	std	Y+2, r25	; 0x02
     53c:	ab 83       	std	Y+3, r26	; 0x03
     53e:	bc 83       	std	Y+4, r27	; 0x04
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     546:	9e 83       	std	Y+6, r25	; 0x06
     548:	8d 83       	std	Y+5, r24	; 0x05
     54a:	f8 01       	movw	r30, r16
     54c:	40 81       	ld	r20, Z
     54e:	51 81       	ldd	r21, Z+1	; 0x01
     550:	64 81       	ldd	r22, Z+4	; 0x04
     552:	75 81       	ldd	r23, Z+5	; 0x05
     554:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
     558:	ce 01       	movw	r24, r28
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	c1 df       	rcall	.-126    	; 0x4e0 <_Z19Serial0_WriteStringN8Standard6stringE>
     55e:	8d 81       	ldd	r24, Y+5	; 0x05
     560:	9e 81       	ldd	r25, Y+6	; 0x06
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	11 f0       	breq	.+4      	; 0x56a <_Z19Serial0_PrintStringN8Standard6stringE+0x4e>
     566:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     56a:	8d e0       	ldi	r24, 0x0D	; 13
     56c:	a9 df       	rcall	.-174    	; 0x4c0 <_Z15USART0_Transmith>
     56e:	8a e0       	ldi	r24, 0x0A	; 10
     570:	a7 df       	rcall	.-178    	; 0x4c0 <_Z15USART0_Transmith>
     572:	26 96       	adiw	r28, 0x06	; 6
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	08 95       	ret

00000588 <__vector_25>:
     588:	1f 92       	push	r1
     58a:	0f 92       	push	r0
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	0f 92       	push	r0
     590:	11 24       	eor	r1, r1
     592:	0b b6       	in	r0, 0x3b	; 59
     594:	0f 92       	push	r0
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
     5b2:	c0 91 46 03 	lds	r28, 0x0346	; 0x800346 <USART0_Buffer_>
     5b6:	d0 91 47 03 	lds	r29, 0x0347	; 0x800347 <USART0_Buffer_+0x1>
     5ba:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     5be:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <__data_end+0x1>
     5c2:	9c 01       	movw	r18, r24
     5c4:	2f 5f       	subi	r18, 0xFF	; 255
     5c6:	3f 4f       	sbci	r19, 0xFF	; 255
     5c8:	30 93 43 03 	sts	0x0343, r19	; 0x800343 <__data_end+0x1>
     5cc:	20 93 42 03 	sts	0x0342, r18	; 0x800342 <__data_end>
     5d0:	c8 0f       	add	r28, r24
     5d2:	d9 1f       	adc	r29, r25
     5d4:	7d df       	rcall	.-262    	; 0x4d0 <_Z14USART0_Receivev>
     5d6:	88 83       	st	Y, r24
     5d8:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <USART0_Read_Pos_>
     5dc:	30 91 45 03 	lds	r19, 0x0345	; 0x800345 <USART0_Read_Pos_+0x1>
     5e0:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     5e4:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <__data_end+0x1>
     5e8:	28 17       	cp	r18, r24
     5ea:	39 07       	cpc	r19, r25
     5ec:	b1 f4       	brne	.+44     	; 0x61a <__vector_25+0x92>
     5ee:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <USART0_Read_Pos_>
     5f2:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <USART0_Read_Pos_+0x1>
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <USART0_Read_Pos_+0x1>
     5fc:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <USART0_Read_Pos_>
     600:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <USART0_Read_Pos_>
     604:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <USART0_Read_Pos_+0x1>
     608:	88 37       	cpi	r24, 0x78	; 120
     60a:	91 05       	cpc	r25, r1
     60c:	30 f0       	brcs	.+12     	; 0x61a <__vector_25+0x92>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <USART0_Read_Pos_+0x1>
     616:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <USART0_Read_Pos_>
     61a:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__data_end>
     61e:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <__data_end+0x1>
     622:	88 37       	cpi	r24, 0x78	; 120
     624:	91 05       	cpc	r25, r1
     626:	20 f0       	brcs	.+8      	; 0x630 <__vector_25+0xa8>
     628:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <__data_end+0x1>
     62c:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <__data_end>
     630:	ff 91       	pop	r31
     632:	ef 91       	pop	r30
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	bf 91       	pop	r27
     63a:	af 91       	pop	r26
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	7f 91       	pop	r23
     642:	6f 91       	pop	r22
     644:	5f 91       	pop	r21
     646:	4f 91       	pop	r20
     648:	3f 91       	pop	r19
     64a:	2f 91       	pop	r18
     64c:	0f 90       	pop	r0
     64e:	0b be       	out	0x3b, r0	; 59
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <_ZN10Connection12clear_bufferEv>:
     65a:	d5 dd       	rcall	.-1110   	; 0x206 <_Z17Serial1_Availablev>
     65c:	88 23       	and	r24, r24
     65e:	11 f0       	breq	.+4      	; 0x664 <_ZN10Connection12clear_bufferEv+0xa>
     660:	e0 dd       	rcall	.-1088   	; 0x222 <_Z11Serial1Readv>
     662:	fb cf       	rjmp	.-10     	; 0x65a <_ZN10Connection12clear_bufferEv>
     664:	08 95       	ret

00000666 <_ZN10Connection4sendEN8Standard6stringE>:
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	62 97       	sbiw	r28, 0x12	; 18
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	8c 01       	movw	r16, r24
     684:	7a 01       	movw	r14, r20
     686:	fa 01       	movw	r30, r20
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	a2 81       	ldd	r26, Z+2	; 0x02
     68e:	b3 81       	ldd	r27, Z+3	; 0x03
     690:	8f 83       	std	Y+7, r24	; 0x07
     692:	98 87       	std	Y+8, r25	; 0x08
     694:	a9 87       	std	Y+9, r26	; 0x09
     696:	ba 87       	std	Y+10, r27	; 0x0a
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     69e:	9c 87       	std	Y+12, r25	; 0x0c
     6a0:	8b 87       	std	Y+11, r24	; 0x0b
     6a2:	f7 01       	movw	r30, r14
     6a4:	40 81       	ld	r20, Z
     6a6:	51 81       	ldd	r21, Z+1	; 0x01
     6a8:	64 81       	ldd	r22, Z+4	; 0x04
     6aa:	75 81       	ldd	r23, Z+5	; 0x05
     6ac:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
     6b0:	ce 01       	movw	r24, r28
     6b2:	07 96       	adiw	r24, 0x07	; 7
     6b4:	46 de       	rcall	.-884    	; 0x342 <_Z19Serial1_PrintStringN8Standard6stringE>
     6b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     6ba:	00 97       	sbiw	r24, 0x00	; 0
     6bc:	11 f0       	breq	.+4      	; 0x6c2 <_ZN10Connection4sendEN8Standard6stringE+0x5c>
     6be:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     6c2:	ff ef       	ldi	r31, 0xFF	; 255
     6c4:	23 ed       	ldi	r18, 0xD3	; 211
     6c6:	80 e3       	ldi	r24, 0x30	; 48
     6c8:	f1 50       	subi	r31, 0x01	; 1
     6ca:	20 40       	sbci	r18, 0x00	; 0
     6cc:	80 40       	sbci	r24, 0x00	; 0
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <_ZN10Connection4sendEN8Standard6stringE+0x62>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <_ZN10Connection4sendEN8Standard6stringE+0x6c>
     6d2:	00 00       	nop
     6d4:	98 dd       	rcall	.-1232   	; 0x206 <_Z17Serial1_Availablev>
     6d6:	88 23       	and	r24, r24
     6d8:	e9 f3       	breq	.-6      	; 0x6d4 <_ZN10Connection4sendEN8Standard6stringE+0x6e>
     6da:	ce 01       	movw	r24, r28
     6dc:	0d 96       	adiw	r24, 0x0d	; 13
     6de:	c5 dd       	rcall	.-1142   	; 0x26a <_Z18Serial1_ReadStringv>
     6e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     6e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     6e4:	af 85       	ldd	r26, Y+15	; 0x0f
     6e6:	b8 89       	ldd	r27, Y+16	; 0x10
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	ab 83       	std	Y+3, r26	; 0x03
     6ee:	bc 83       	std	Y+4, r27	; 0x04
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     6f6:	9e 83       	std	Y+6, r25	; 0x06
     6f8:	8d 83       	std	Y+5, r24	; 0x05
     6fa:	4d 85       	ldd	r20, Y+13	; 0x0d
     6fc:	5e 85       	ldd	r21, Y+14	; 0x0e
     6fe:	69 89       	ldd	r22, Y+17	; 0x11
     700:	7a 89       	ldd	r23, Y+18	; 0x12
     702:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	08 df       	rcall	.-496    	; 0x51c <_Z19Serial0_PrintStringN8Standard6stringE>
     70c:	8d 81       	ldd	r24, Y+5	; 0x05
     70e:	9e 81       	ldd	r25, Y+6	; 0x06
     710:	00 97       	sbiw	r24, 0x00	; 0
     712:	11 f0       	breq	.+4      	; 0x718 <_ZN10Connection4sendEN8Standard6stringE+0xb2>
     714:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     718:	e9 88       	ldd	r14, Y+17	; 0x11
     71a:	fa 88       	ldd	r15, Y+18	; 0x12
     71c:	f8 01       	movw	r30, r16
     71e:	10 82       	st	Z, r1
     720:	11 82       	std	Z+1, r1	; 0x01
     722:	12 82       	std	Z+2, r1	; 0x02
     724:	13 82       	std	Z+3, r1	; 0x03
     726:	c7 01       	movw	r24, r14
     728:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     72c:	f8 01       	movw	r30, r16
     72e:	60 83       	st	Z, r22
     730:	71 83       	std	Z+1, r23	; 0x01
     732:	82 83       	std	Z+2, r24	; 0x02
     734:	93 83       	std	Z+3, r25	; 0x03
     736:	cb 01       	movw	r24, r22
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     73e:	f8 01       	movw	r30, r16
     740:	95 83       	std	Z+5, r25	; 0x05
     742:	84 83       	std	Z+4, r24	; 0x04
     744:	40 81       	ld	r20, Z
     746:	51 81       	ldd	r21, Z+1	; 0x01
     748:	b7 01       	movw	r22, r14
     74a:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
     74e:	89 89       	ldd	r24, Y+17	; 0x11
     750:	9a 89       	ldd	r25, Y+18	; 0x12
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	11 f0       	breq	.+4      	; 0x75a <_ZN10Connection4sendEN8Standard6stringE+0xf4>
     756:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     75a:	c8 01       	movw	r24, r16
     75c:	62 96       	adiw	r28, 0x12	; 18
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	08 95       	ret

00000776 <_ZN10ConnectionC1Ev>:
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	ec 01       	movw	r28, r24
     77c:	18 82       	st	Y, r1
     77e:	13 dd       	rcall	.-1498   	; 0x1a6 <_Z11USART1_Initv>
     780:	7f de       	rcall	.-770    	; 0x480 <_Z11USART0_Initv>
     782:	ce 01       	movw	r24, r28
     784:	6a df       	rcall	.-300    	; 0x65a <_ZN10Connection12clear_bufferEv>
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <_ZN10Connection5resetEv>:
     78c:	8f 92       	push	r8
     78e:	9f 92       	push	r9
     790:	af 92       	push	r10
     792:	bf 92       	push	r11
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	2c 97       	sbiw	r28, 0x0c	; 12
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	de bf       	out	0x3e, r29	; 62
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	7c 01       	movw	r14, r24
     7b2:	02 e7       	ldi	r16, 0x72	; 114
     7b4:	13 e0       	ldi	r17, 0x03	; 3
     7b6:	f8 01       	movw	r30, r16
     7b8:	80 81       	ld	r24, Z
     7ba:	91 81       	ldd	r25, Z+1	; 0x01
     7bc:	a2 81       	ldd	r26, Z+2	; 0x02
     7be:	b3 81       	ldd	r27, Z+3	; 0x03
     7c0:	89 83       	std	Y+1, r24	; 0x01
     7c2:	9a 83       	std	Y+2, r25	; 0x02
     7c4:	ab 83       	std	Y+3, r26	; 0x03
     7c6:	bc 83       	std	Y+4, r27	; 0x04
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     7ce:	9e 83       	std	Y+6, r25	; 0x06
     7d0:	8d 83       	std	Y+5, r24	; 0x05
     7d2:	f8 01       	movw	r30, r16
     7d4:	40 81       	ld	r20, Z
     7d6:	51 81       	ldd	r21, Z+1	; 0x01
     7d8:	64 81       	ldd	r22, Z+4	; 0x04
     7da:	75 81       	ldd	r23, Z+5	; 0x05
     7dc:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
     7e0:	ae 01       	movw	r20, r28
     7e2:	4f 5f       	subi	r20, 0xFF	; 255
     7e4:	5f 4f       	sbci	r21, 0xFF	; 255
     7e6:	b7 01       	movw	r22, r14
     7e8:	ce 01       	movw	r24, r28
     7ea:	07 96       	adiw	r24, 0x07	; 7
     7ec:	3c df       	rcall	.-392    	; 0x666 <_ZN10Connection4sendEN8Standard6stringE>
     7ee:	8d 81       	ldd	r24, Y+5	; 0x05
     7f0:	9e 81       	ldd	r25, Y+6	; 0x06
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	11 f0       	breq	.+4      	; 0x7fa <_ZN10Connection5resetEv+0x6e>
     7f6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     7fa:	86 e0       	ldi	r24, 0x06	; 6
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     802:	4b 01       	movw	r8, r22
     804:	5c 01       	movw	r10, r24
     806:	cb 01       	movw	r24, r22
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     80e:	7c 01       	movw	r14, r24
     810:	a4 01       	movw	r20, r8
     812:	66 e0       	ldi	r22, 0x06	; 6
     814:	72 e0       	ldi	r23, 0x02	; 2
     816:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
     81a:	6f 81       	ldd	r22, Y+7	; 0x07
     81c:	78 85       	ldd	r23, Y+8	; 0x08
     81e:	a7 01       	movw	r20, r14
     820:	8b 85       	ldd	r24, Y+11	; 0x0b
     822:	9c 85       	ldd	r25, Y+12	; 0x0c
     824:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
     828:	19 2f       	mov	r17, r25
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	19 f0       	breq	.+6      	; 0x836 <_ZN10Connection5resetEv+0xaa>
     830:	c7 01       	movw	r24, r14
     832:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     836:	10 95       	com	r17
     838:	11 1f       	adc	r17, r17
     83a:	11 27       	eor	r17, r17
     83c:	11 1f       	adc	r17, r17
     83e:	8b 85       	ldd	r24, Y+11	; 0x0b
     840:	9c 85       	ldd	r25, Y+12	; 0x0c
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	11 f0       	breq	.+4      	; 0x84a <_ZN10Connection5resetEv+0xbe>
     846:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     84a:	81 2f       	mov	r24, r17
     84c:	2c 96       	adiw	r28, 0x0c	; 12
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	bf 90       	pop	r11
     866:	af 90       	pop	r10
     868:	9f 90       	pop	r9
     86a:	8f 90       	pop	r8
     86c:	08 95       	ret

0000086e <_ZN10Connection8wifimodeEN8Standard6stringE>:
bool Connection::wifimode(const string mode)
{
     86e:	2f 92       	push	r2
     870:	3f 92       	push	r3
     872:	4f 92       	push	r4
     874:	5f 92       	push	r5
     876:	6f 92       	push	r6
     878:	7f 92       	push	r7
     87a:	8f 92       	push	r8
     87c:	9f 92       	push	r9
     87e:	af 92       	push	r10
     880:	bf 92       	push	r11
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	62 97       	sbiw	r28, 0x12	; 18
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	98 8b       	std	Y+16, r25	; 0x10
     8a4:	8f 87       	std	Y+15, r24	; 0x0f
     8a6:	8b 01       	movw	r16, r22
		string(const string &other)
		{
			length_ = other.length_;
     8a8:	0f 2e       	mov	r0, r31
     8aa:	fc e6       	ldi	r31, 0x6C	; 108
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f3 e0       	ldi	r31, 0x03	; 3
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	d7 01       	movw	r26, r14
     8b6:	4d 90       	ld	r4, X+
     8b8:	5d 90       	ld	r5, X+
     8ba:	6d 90       	ld	r6, X+
     8bc:	7c 90       	ld	r7, X
			chars_ = new char[other.length_ + 1];
     8be:	c2 01       	movw	r24, r4
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     8c6:	5c 01       	movw	r10, r24
			string_copy(chars_, other.chars_, other.length_);
     8c8:	f7 01       	movw	r30, r14
     8ca:	40 81       	ld	r20, Z
     8cc:	51 81       	ldd	r21, Z+1	; 0x01
     8ce:	64 81       	ldd	r22, Z+4	; 0x04
     8d0:	75 81       	ldd	r23, Z+5	; 0x05
     8d2:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     8d6:	89 e0       	ldi	r24, 0x09	; 9
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     8de:	6b 01       	movw	r12, r22
     8e0:	7c 01       	movw	r14, r24
			chars_ = new char[length_ + 1];
     8e2:	cb 01       	movw	r24, r22
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     8ea:	1c 01       	movw	r2, r24
			string_copy(chars_, text, length_);
     8ec:	a6 01       	movw	r20, r12
     8ee:	69 e0       	ldi	r22, 0x09	; 9
     8f0:	72 e0       	ldi	r23, 0x02	; 2
     8f2:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
     8f6:	c4 0c       	add	r12, r4
     8f8:	d5 1c       	adc	r13, r5
     8fa:	e6 1c       	adc	r14, r6
     8fc:	f7 1c       	adc	r15, r7
			char *old = chars_;
			chars_ = new char[new_length + 1];
     8fe:	da 8a       	std	Y+18, r13	; 0x12
     900:	c9 8a       	std	Y+17, r12	; 0x11
     902:	c6 01       	movw	r24, r12
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     90a:	4c 01       	movw	r8, r24
			unsigned long i = 0;
			while (i < length_)
     90c:	41 14       	cp	r4, r1
     90e:	51 04       	cpc	r5, r1
     910:	61 04       	cpc	r6, r1
     912:	71 04       	cpc	r7, r1
     914:	31 f4       	brne	.+12     	; 0x922 <_ZN10Connection8wifimodeEN8Standard6stringE+0xb4>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     916:	4c 14       	cp	r4, r12
     918:	5d 04       	cpc	r5, r13
     91a:	6e 04       	cpc	r6, r14
     91c:	7f 04       	cpc	r7, r15
     91e:	60 f0       	brcs	.+24     	; 0x938 <_ZN10Connection8wifimodeEN8Standard6stringE+0xca>
     920:	17 c0       	rjmp	.+46     	; 0x950 <_ZN10Connection8wifimodeEN8Standard6stringE+0xe2>
     922:	f5 01       	movw	r30, r10
     924:	dc 01       	movw	r26, r24
     926:	95 01       	movw	r18, r10
     928:	24 0d       	add	r18, r4
     92a:	35 1d       	adc	r19, r5
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
     92c:	81 91       	ld	r24, Z+
     92e:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
     930:	e2 17       	cp	r30, r18
     932:	f3 07       	cpc	r31, r19
     934:	d9 f7       	brne	.-10     	; 0x92c <_ZN10Connection8wifimodeEN8Standard6stringE+0xbe>
     936:	ef cf       	rjmp	.-34     	; 0x916 <_ZN10Connection8wifimodeEN8Standard6stringE+0xa8>
     938:	d1 01       	movw	r26, r2
     93a:	f4 01       	movw	r30, r8
     93c:	e4 0d       	add	r30, r4
     93e:	f5 1d       	adc	r31, r5
     940:	94 01       	movw	r18, r8
     942:	2c 0d       	add	r18, r12
     944:	3d 1d       	adc	r19, r13
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
     946:	8d 91       	ld	r24, X+
     948:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     94a:	2e 17       	cp	r18, r30
     94c:	3f 07       	cpc	r19, r31
     94e:	d9 f7       	brne	.-10     	; 0x946 <_ZN10Connection8wifimodeEN8Standard6stringE+0xd8>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
     950:	c4 01       	movw	r24, r8
     952:	8c 0d       	add	r24, r12
     954:	9d 1d       	adc	r25, r13
     956:	9e 87       	std	Y+14, r25	; 0x0e
     958:	8d 87       	std	Y+13, r24	; 0x0d
     95a:	dc 01       	movw	r26, r24
     95c:	1c 92       	st	X, r1
			length_ = new_length;
			delete[] old;
     95e:	a1 14       	cp	r10, r1
     960:	b1 04       	cpc	r11, r1
     962:	19 f0       	breq	.+6      	; 0x96a <_ZN10Connection8wifimodeEN8Standard6stringE+0xfc>
     964:	c5 01       	movw	r24, r10
     966:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     96a:	21 14       	cp	r2, r1
     96c:	31 04       	cpc	r3, r1
     96e:	19 f0       	breq	.+6      	; 0x976 <_ZN10Connection8wifimodeEN8Standard6stringE+0x108>
     970:	c1 01       	movw	r24, r2
     972:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
     976:	f8 01       	movw	r30, r16
     978:	40 80       	ld	r4, Z
     97a:	51 80       	ldd	r5, Z+1	; 0x01
     97c:	62 80       	ldd	r6, Z+2	; 0x02
     97e:	73 80       	ldd	r7, Z+3	; 0x03
     980:	4c 0c       	add	r4, r12
     982:	5d 1c       	adc	r5, r13
     984:	6e 1c       	adc	r6, r14
     986:	7f 1c       	adc	r7, r15
			char *old = chars_;
			chars_ = new char[new_length + 1];
     988:	c2 01       	movw	r24, r4
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     990:	5c 01       	movw	r10, r24
			unsigned long i = 0;
			while (i < length_)
     992:	c1 14       	cp	r12, r1
     994:	d1 04       	cpc	r13, r1
     996:	e1 04       	cpc	r14, r1
     998:	f1 04       	cpc	r15, r1
     99a:	31 f4       	brne	.+12     	; 0x9a8 <_ZN10Connection8wifimodeEN8Standard6stringE+0x13a>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     99c:	c4 14       	cp	r12, r4
     99e:	d5 04       	cpc	r13, r5
     9a0:	e6 04       	cpc	r14, r6
     9a2:	f7 04       	cpc	r15, r7
     9a4:	58 f0       	brcs	.+22     	; 0x9bc <_ZN10Connection8wifimodeEN8Standard6stringE+0x14e>
     9a6:	24 c0       	rjmp	.+72     	; 0x9f0 <_ZN10Connection8wifimodeEN8Standard6stringE+0x182>
     9a8:	f4 01       	movw	r30, r8
     9aa:	dc 01       	movw	r26, r24
     9ac:	2d 85       	ldd	r18, Y+13	; 0x0d
     9ae:	3e 85       	ldd	r19, Y+14	; 0x0e
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
     9b0:	81 91       	ld	r24, Z+
     9b2:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
     9b4:	2e 17       	cp	r18, r30
     9b6:	3f 07       	cpc	r19, r31
     9b8:	d9 f7       	brne	.-10     	; 0x9b0 <_ZN10Connection8wifimodeEN8Standard6stringE+0x142>
     9ba:	f0 cf       	rjmp	.-32     	; 0x99c <_ZN10Connection8wifimodeEN8Standard6stringE+0x12e>
     9bc:	f5 01       	movw	r30, r10
     9be:	ec 0d       	add	r30, r12
     9c0:	fd 1d       	adc	r31, r13
     9c2:	b5 01       	movw	r22, r10
     9c4:	64 0d       	add	r22, r4
     9c6:	75 1d       	adc	r23, r5
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
     9c8:	49 89       	ldd	r20, Y+17	; 0x11
     9ca:	5a 89       	ldd	r21, Y+18	; 0x12
     9cc:	4a 0d       	add	r20, r10
     9ce:	5b 1d       	adc	r21, r11
     9d0:	cf 01       	movw	r24, r30
     9d2:	84 1b       	sub	r24, r20
     9d4:	95 0b       	sbc	r25, r21
     9d6:	d8 01       	movw	r26, r16
     9d8:	14 96       	adiw	r26, 0x04	; 4
     9da:	2d 91       	ld	r18, X+
     9dc:	3c 91       	ld	r19, X
     9de:	15 97       	sbiw	r26, 0x05	; 5
     9e0:	d9 01       	movw	r26, r18
     9e2:	a8 0f       	add	r26, r24
     9e4:	b9 1f       	adc	r27, r25
     9e6:	8c 91       	ld	r24, X
     9e8:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     9ea:	e6 17       	cp	r30, r22
     9ec:	f7 07       	cpc	r31, r23
     9ee:	81 f7       	brne	.-32     	; 0x9d0 <_ZN10Connection8wifimodeEN8Standard6stringE+0x162>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
     9f0:	f5 01       	movw	r30, r10
     9f2:	e4 0d       	add	r30, r4
     9f4:	f5 1d       	adc	r31, r5
     9f6:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
     9f8:	81 14       	cp	r8, r1
     9fa:	91 04       	cpc	r9, r1
     9fc:	19 f0       	breq	.+6      	; 0xa04 <_ZN10Connection8wifimodeEN8Standard6stringE+0x196>
     9fe:	c4 01       	movw	r24, r8
     a00:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
     a04:	19 82       	std	Y+1, r1	; 0x01
     a06:	1a 82       	std	Y+2, r1	; 0x02
     a08:	1b 82       	std	Y+3, r1	; 0x03
     a0a:	1c 82       	std	Y+4, r1	; 0x04
			length_ = string_length(text);
     a0c:	c5 01       	movw	r24, r10
     a0e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     a12:	69 83       	std	Y+1, r22	; 0x01
     a14:	7a 83       	std	Y+2, r23	; 0x02
     a16:	8b 83       	std	Y+3, r24	; 0x03
     a18:	9c 83       	std	Y+4, r25	; 0x04
			chars_ = new char[length_ + 1];
     a1a:	cb 01       	movw	r24, r22
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     a22:	9e 83       	std	Y+6, r25	; 0x06
     a24:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, text, length_);
     a26:	49 81       	ldd	r20, Y+1	; 0x01
     a28:	5a 81       	ldd	r21, Y+2	; 0x02
     a2a:	b5 01       	movw	r22, r10
     a2c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
	string s_mode = mode_command;
	s_mode += "=";
	s_mode += mode;
	string data = send(s_mode.c_str());
     a30:	ae 01       	movw	r20, r28
     a32:	4f 5f       	subi	r20, 0xFF	; 255
     a34:	5f 4f       	sbci	r21, 0xFF	; 255
     a36:	6f 85       	ldd	r22, Y+15	; 0x0f
     a38:	78 89       	ldd	r23, Y+16	; 0x10
     a3a:	ce 01       	movw	r24, r28
     a3c:	07 96       	adiw	r24, 0x07	; 7
     a3e:	13 de       	rcall	.-986    	; 0x666 <_ZN10Connection4sendEN8Standard6stringE>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     a40:	8d 81       	ldd	r24, Y+5	; 0x05
     a42:	9e 81       	ldd	r25, Y+6	; 0x06
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	11 f0       	breq	.+4      	; 0xa4c <_ZN10Connection8wifimodeEN8Standard6stringE+0x1de>
     a48:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     a4c:	86 e0       	ldi	r24, 0x06	; 6
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     a54:	6b 01       	movw	r12, r22
     a56:	7c 01       	movw	r14, r24
			chars_ = new char[length_ + 1];
     a58:	cb 01       	movw	r24, r22
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     a60:	8c 01       	movw	r16, r24
			string_copy(chars_, text, length_);
     a62:	a6 01       	movw	r20, r12
     a64:	66 e0       	ldi	r22, 0x06	; 6
     a66:	72 e0       	ldi	r23, 0x02	; 2
     a68:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		{
			return string_find_first_of(chars_, length_, ch);
		}
		int find_first_of(const string &other)
		{
			return string_find_first_of(chars_, length_, other.chars_);
     a6c:	6f 81       	ldd	r22, Y+7	; 0x07
     a6e:	78 85       	ldd	r23, Y+8	; 0x08
     a70:	a8 01       	movw	r20, r16
     a72:	8b 85       	ldd	r24, Y+11	; 0x0b
     a74:	9c 85       	ldd	r25, Y+12	; 0x0c
     a76:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
     a7a:	7c 01       	movw	r14, r24
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     a7c:	01 15       	cp	r16, r1
     a7e:	11 05       	cpc	r17, r1
     a80:	19 f0       	breq	.+6      	; 0xa88 <_ZN10Connection8wifimodeEN8Standard6stringE+0x21a>
     a82:	c8 01       	movw	r24, r16
     a84:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
	if (data.find_first_of("OK") > 0)
     a88:	11 e0       	ldi	r17, 0x01	; 1
     a8a:	1e 14       	cp	r1, r14
     a8c:	1f 04       	cpc	r1, r15
     a8e:	0c f0       	brlt	.+2      	; 0xa92 <_ZN10Connection8wifimodeEN8Standard6stringE+0x224>
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	8b 85       	ldd	r24, Y+11	; 0x0b
     a94:	9c 85       	ldd	r25, Y+12	; 0x0c
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	11 f0       	breq	.+4      	; 0xa9e <_ZN10Connection8wifimodeEN8Standard6stringE+0x230>
     a9a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     a9e:	a1 14       	cp	r10, r1
     aa0:	b1 04       	cpc	r11, r1
     aa2:	19 f0       	breq	.+6      	; 0xaaa <_ZN10Connection8wifimodeEN8Standard6stringE+0x23c>
     aa4:	c5 01       	movw	r24, r10
     aa6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
	return true;
	return false;
}
     aaa:	81 2f       	mov	r24, r17
     aac:	62 96       	adiw	r28, 0x12	; 18
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
     ad0:	7f 90       	pop	r7
     ad2:	6f 90       	pop	r6
     ad4:	5f 90       	pop	r5
     ad6:	4f 90       	pop	r4
     ad8:	3f 90       	pop	r3
     ada:	2f 90       	pop	r2
     adc:	08 95       	ret

00000ade <_ZN10Connection27enable_multiple_connectionsEb>:
bool Connection::enable_multiple_connections(const bool value)
{
     ade:	2f 92       	push	r2
     ae0:	3f 92       	push	r3
     ae2:	4f 92       	push	r4
     ae4:	5f 92       	push	r5
     ae6:	6f 92       	push	r6
     ae8:	7f 92       	push	r7
     aea:	8f 92       	push	r8
     aec:	9f 92       	push	r9
     aee:	af 92       	push	r10
     af0:	bf 92       	push	r11
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	2f 97       	sbiw	r28, 0x0f	; 15
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	9e 87       	std	Y+14, r25	; 0x0e
     b14:	8d 87       	std	Y+13, r24	; 0x0d
     b16:	6f 87       	std	Y+15, r22	; 0x0f
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
     b18:	0f 2e       	mov	r0, r31
     b1a:	f6 e6       	ldi	r31, 0x66	; 102
     b1c:	ef 2e       	mov	r14, r31
     b1e:	f3 e0       	ldi	r31, 0x03	; 3
     b20:	ff 2e       	mov	r15, r31
     b22:	f0 2d       	mov	r31, r0
     b24:	f7 01       	movw	r30, r14
     b26:	40 80       	ld	r4, Z
     b28:	51 80       	ldd	r5, Z+1	; 0x01
     b2a:	62 80       	ldd	r6, Z+2	; 0x02
     b2c:	73 80       	ldd	r7, Z+3	; 0x03
			chars_ = new char[other.length_ + 1];
     b2e:	c2 01       	movw	r24, r4
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     b36:	8c 01       	movw	r16, r24
			string_copy(chars_, other.chars_, other.length_);
     b38:	f7 01       	movw	r30, r14
     b3a:	40 81       	ld	r20, Z
     b3c:	51 81       	ldd	r21, Z+1	; 0x01
     b3e:	64 81       	ldd	r22, Z+4	; 0x04
     b40:	75 81       	ldd	r23, Z+5	; 0x05
     b42:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     b46:	89 e0       	ldi	r24, 0x09	; 9
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     b4e:	4b 01       	movw	r8, r22
     b50:	5c 01       	movw	r10, r24
			chars_ = new char[length_ + 1];
     b52:	cb 01       	movw	r24, r22
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     b5a:	6c 01       	movw	r12, r24
			string_copy(chars_, text, length_);
     b5c:	a4 01       	movw	r20, r8
     b5e:	69 e0       	ldi	r22, 0x09	; 9
     b60:	72 e0       	ldi	r23, 0x02	; 2
     b62:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
     b66:	84 0c       	add	r8, r4
     b68:	95 1c       	adc	r9, r5
     b6a:	a6 1c       	adc	r10, r6
     b6c:	b7 1c       	adc	r11, r7
			char *old = chars_;
			chars_ = new char[new_length + 1];
     b6e:	c4 01       	movw	r24, r8
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     b76:	7c 01       	movw	r14, r24
			unsigned long i = 0;
			while (i < length_)
     b78:	41 14       	cp	r4, r1
     b7a:	51 04       	cpc	r5, r1
     b7c:	61 04       	cpc	r6, r1
     b7e:	71 04       	cpc	r7, r1
     b80:	31 f4       	brne	.+12     	; 0xb8e <_ZN10Connection27enable_multiple_connectionsEb+0xb0>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     b82:	48 14       	cp	r4, r8
     b84:	59 04       	cpc	r5, r9
     b86:	6a 04       	cpc	r6, r10
     b88:	7b 04       	cpc	r7, r11
     b8a:	60 f0       	brcs	.+24     	; 0xba4 <_ZN10Connection27enable_multiple_connectionsEb+0xc6>
     b8c:	17 c0       	rjmp	.+46     	; 0xbbc <_ZN10Connection27enable_multiple_connectionsEb+0xde>
     b8e:	f8 01       	movw	r30, r16
     b90:	dc 01       	movw	r26, r24
     b92:	98 01       	movw	r18, r16
     b94:	24 0d       	add	r18, r4
     b96:	35 1d       	adc	r19, r5
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
     b98:	81 91       	ld	r24, Z+
     b9a:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
     b9c:	e2 17       	cp	r30, r18
     b9e:	f3 07       	cpc	r31, r19
     ba0:	d9 f7       	brne	.-10     	; 0xb98 <_ZN10Connection27enable_multiple_connectionsEb+0xba>
     ba2:	ef cf       	rjmp	.-34     	; 0xb82 <_ZN10Connection27enable_multiple_connectionsEb+0xa4>
     ba4:	d6 01       	movw	r26, r12
     ba6:	f7 01       	movw	r30, r14
     ba8:	e4 0d       	add	r30, r4
     baa:	f5 1d       	adc	r31, r5
     bac:	97 01       	movw	r18, r14
     bae:	28 0d       	add	r18, r8
     bb0:	39 1d       	adc	r19, r9
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
     bb2:	8d 91       	ld	r24, X+
     bb4:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     bb6:	e2 17       	cp	r30, r18
     bb8:	f3 07       	cpc	r31, r19
     bba:	d9 f7       	brne	.-10     	; 0xbb2 <_ZN10Connection27enable_multiple_connectionsEb+0xd4>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
     bbc:	17 01       	movw	r2, r14
     bbe:	28 0c       	add	r2, r8
     bc0:	39 1c       	adc	r3, r9
     bc2:	f1 01       	movw	r30, r2
     bc4:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
     bc6:	01 15       	cp	r16, r1
     bc8:	11 05       	cpc	r17, r1
     bca:	19 f0       	breq	.+6      	; 0xbd2 <_ZN10Connection27enable_multiple_connectionsEb+0xf4>
     bcc:	c8 01       	movw	r24, r16
     bce:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     bd2:	c1 14       	cp	r12, r1
     bd4:	d1 04       	cpc	r13, r1
     bd6:	19 f0       	breq	.+6      	; 0xbde <_ZN10Connection27enable_multiple_connectionsEb+0x100>
     bd8:	c6 01       	movw	r24, r12
     bda:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
	string s_mode = multiple_connections_command;
	s_mode += ("=");
	if (value)
     bde:	ff 85       	ldd	r31, Y+15	; 0x0f
     be0:	ff 23       	and	r31, r31
     be2:	09 f4       	brne	.+2      	; 0xbe6 <_ZN10Connection27enable_multiple_connectionsEb+0x108>
     be4:	4a c0       	rjmp	.+148    	; 0xc7a <_ZN10Connection27enable_multiple_connectionsEb+0x19c>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     be6:	8b e4       	ldi	r24, 0x4B	; 75
     be8:	92 e0       	ldi	r25, 0x02	; 2
     bea:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     bee:	2b 01       	movw	r4, r22
     bf0:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
     bf2:	cb 01       	movw	r24, r22
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     bfa:	6c 01       	movw	r12, r24
			string_copy(chars_, text, length_);
     bfc:	a2 01       	movw	r20, r4
     bfe:	6b e4       	ldi	r22, 0x4B	; 75
     c00:	72 e0       	ldi	r23, 0x02	; 2
     c02:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
     c06:	48 0c       	add	r4, r8
     c08:	59 1c       	adc	r5, r9
     c0a:	6a 1c       	adc	r6, r10
     c0c:	7b 1c       	adc	r7, r11
			char *old = chars_;
			chars_ = new char[new_length + 1];
     c0e:	c2 01       	movw	r24, r4
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     c16:	8c 01       	movw	r16, r24
			unsigned long i = 0;
			while (i < length_)
     c18:	81 14       	cp	r8, r1
     c1a:	91 04       	cpc	r9, r1
     c1c:	a1 04       	cpc	r10, r1
     c1e:	b1 04       	cpc	r11, r1
     c20:	31 f4       	brne	.+12     	; 0xc2e <_ZN10Connection27enable_multiple_connectionsEb+0x150>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     c22:	84 14       	cp	r8, r4
     c24:	95 04       	cpc	r9, r5
     c26:	a6 04       	cpc	r10, r6
     c28:	b7 04       	cpc	r11, r7
     c2a:	48 f0       	brcs	.+18     	; 0xc3e <_ZN10Connection27enable_multiple_connectionsEb+0x160>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <_ZN10Connection27enable_multiple_connectionsEb+0x178>
     c2e:	f7 01       	movw	r30, r14
     c30:	dc 01       	movw	r26, r24
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
     c32:	81 91       	ld	r24, Z+
     c34:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
     c36:	2e 16       	cp	r2, r30
     c38:	3f 06       	cpc	r3, r31
     c3a:	d9 f7       	brne	.-10     	; 0xc32 <_ZN10Connection27enable_multiple_connectionsEb+0x154>
     c3c:	f2 cf       	rjmp	.-28     	; 0xc22 <_ZN10Connection27enable_multiple_connectionsEb+0x144>
     c3e:	d6 01       	movw	r26, r12
     c40:	f8 01       	movw	r30, r16
     c42:	e8 0d       	add	r30, r8
     c44:	f9 1d       	adc	r31, r9
     c46:	98 01       	movw	r18, r16
     c48:	24 0d       	add	r18, r4
     c4a:	35 1d       	adc	r19, r5
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
     c4c:	8d 91       	ld	r24, X+
     c4e:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     c50:	e2 17       	cp	r30, r18
     c52:	f3 07       	cpc	r31, r19
     c54:	d9 f7       	brne	.-10     	; 0xc4c <_ZN10Connection27enable_multiple_connectionsEb+0x16e>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
     c56:	f8 01       	movw	r30, r16
     c58:	e4 0d       	add	r30, r4
     c5a:	f5 1d       	adc	r31, r5
     c5c:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
     c5e:	e1 14       	cp	r14, r1
     c60:	f1 04       	cpc	r15, r1
     c62:	19 f0       	breq	.+6      	; 0xc6a <_ZN10Connection27enable_multiple_connectionsEb+0x18c>
     c64:	c7 01       	movw	r24, r14
     c66:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     c6a:	c1 14       	cp	r12, r1
     c6c:	d1 04       	cpc	r13, r1
     c6e:	09 f4       	brne	.+2      	; 0xc72 <_ZN10Connection27enable_multiple_connectionsEb+0x194>
     c70:	4c c0       	rjmp	.+152    	; 0xd0a <_ZN10Connection27enable_multiple_connectionsEb+0x22c>
     c72:	c6 01       	movw	r24, r12
     c74:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     c78:	48 c0       	rjmp	.+144    	; 0xd0a <_ZN10Connection27enable_multiple_connectionsEb+0x22c>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     c7a:	8e e0       	ldi	r24, 0x0E	; 14
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     c82:	2b 01       	movw	r4, r22
     c84:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
     c86:	cb 01       	movw	r24, r22
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     c8e:	6c 01       	movw	r12, r24
			string_copy(chars_, text, length_);
     c90:	a2 01       	movw	r20, r4
     c92:	6e e0       	ldi	r22, 0x0E	; 14
     c94:	72 e0       	ldi	r23, 0x02	; 2
     c96:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
     c9a:	48 0c       	add	r4, r8
     c9c:	59 1c       	adc	r5, r9
     c9e:	6a 1c       	adc	r6, r10
     ca0:	7b 1c       	adc	r7, r11
			char *old = chars_;
			chars_ = new char[new_length + 1];
     ca2:	c2 01       	movw	r24, r4
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     caa:	8c 01       	movw	r16, r24
			unsigned long i = 0;
			while (i < length_)
     cac:	81 14       	cp	r8, r1
     cae:	91 04       	cpc	r9, r1
     cb0:	a1 04       	cpc	r10, r1
     cb2:	b1 04       	cpc	r11, r1
     cb4:	31 f4       	brne	.+12     	; 0xcc2 <_ZN10Connection27enable_multiple_connectionsEb+0x1e4>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     cb6:	84 14       	cp	r8, r4
     cb8:	95 04       	cpc	r9, r5
     cba:	a6 04       	cpc	r10, r6
     cbc:	b7 04       	cpc	r11, r7
     cbe:	48 f0       	brcs	.+18     	; 0xcd2 <_ZN10Connection27enable_multiple_connectionsEb+0x1f4>
     cc0:	14 c0       	rjmp	.+40     	; 0xcea <_ZN10Connection27enable_multiple_connectionsEb+0x20c>
     cc2:	f7 01       	movw	r30, r14
     cc4:	dc 01       	movw	r26, r24
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
     cc6:	81 91       	ld	r24, Z+
     cc8:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
     cca:	2e 16       	cp	r2, r30
     ccc:	3f 06       	cpc	r3, r31
     cce:	d9 f7       	brne	.-10     	; 0xcc6 <_ZN10Connection27enable_multiple_connectionsEb+0x1e8>
     cd0:	f2 cf       	rjmp	.-28     	; 0xcb6 <_ZN10Connection27enable_multiple_connectionsEb+0x1d8>
     cd2:	d6 01       	movw	r26, r12
     cd4:	f8 01       	movw	r30, r16
     cd6:	e8 0d       	add	r30, r8
     cd8:	f9 1d       	adc	r31, r9
     cda:	98 01       	movw	r18, r16
     cdc:	24 0d       	add	r18, r4
     cde:	35 1d       	adc	r19, r5
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
     ce0:	8d 91       	ld	r24, X+
     ce2:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     ce4:	e2 17       	cp	r30, r18
     ce6:	f3 07       	cpc	r31, r19
     ce8:	d9 f7       	brne	.-10     	; 0xce0 <_ZN10Connection27enable_multiple_connectionsEb+0x202>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
     cea:	f8 01       	movw	r30, r16
     cec:	e4 0d       	add	r30, r4
     cee:	f5 1d       	adc	r31, r5
     cf0:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
     cf2:	e1 14       	cp	r14, r1
     cf4:	f1 04       	cpc	r15, r1
     cf6:	19 f0       	breq	.+6      	; 0xcfe <_ZN10Connection27enable_multiple_connectionsEb+0x220>
     cf8:	c7 01       	movw	r24, r14
     cfa:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     cfe:	c1 14       	cp	r12, r1
     d00:	d1 04       	cpc	r13, r1
     d02:	19 f0       	breq	.+6      	; 0xd0a <_ZN10Connection27enable_multiple_connectionsEb+0x22c>
     d04:	c6 01       	movw	r24, r12
     d06:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
     d0a:	19 82       	std	Y+1, r1	; 0x01
     d0c:	1a 82       	std	Y+2, r1	; 0x02
     d0e:	1b 82       	std	Y+3, r1	; 0x03
     d10:	1c 82       	std	Y+4, r1	; 0x04
			length_ = string_length(text);
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     d18:	69 83       	std	Y+1, r22	; 0x01
     d1a:	7a 83       	std	Y+2, r23	; 0x02
     d1c:	8b 83       	std	Y+3, r24	; 0x03
     d1e:	9c 83       	std	Y+4, r25	; 0x04
			chars_ = new char[length_ + 1];
     d20:	cb 01       	movw	r24, r22
     d22:	01 96       	adiw	r24, 0x01	; 1
     d24:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     d28:	9e 83       	std	Y+6, r25	; 0x06
     d2a:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, text, length_);
     d2c:	49 81       	ldd	r20, Y+1	; 0x01
     d2e:	5a 81       	ldd	r21, Y+2	; 0x02
     d30:	b8 01       	movw	r22, r16
     d32:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
	s_mode += "1";
	else
	s_mode += "0";
	string data = send(s_mode.c_str());
     d36:	ae 01       	movw	r20, r28
     d38:	4f 5f       	subi	r20, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d3e:	7e 85       	ldd	r23, Y+14	; 0x0e
     d40:	ce 01       	movw	r24, r28
     d42:	07 96       	adiw	r24, 0x07	; 7
     d44:	90 dc       	rcall	.-1760   	; 0x666 <_ZN10Connection4sendEN8Standard6stringE>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	11 f0       	breq	.+4      	; 0xd52 <_ZN10Connection27enable_multiple_connectionsEb+0x274>
     d4e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     d52:	86 e0       	ldi	r24, 0x06	; 6
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     d5a:	4b 01       	movw	r8, r22
     d5c:	5c 01       	movw	r10, r24
			chars_ = new char[length_ + 1];
     d5e:	cb 01       	movw	r24, r22
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     d66:	7c 01       	movw	r14, r24
			string_copy(chars_, text, length_);
     d68:	a4 01       	movw	r20, r8
     d6a:	66 e0       	ldi	r22, 0x06	; 6
     d6c:	72 e0       	ldi	r23, 0x02	; 2
     d6e:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		{
			return string_find_first_of(chars_, length_, ch);
		}
		int find_first_of(const string &other)
		{
			return string_find_first_of(chars_, length_, other.chars_);
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	a7 01       	movw	r20, r14
     d78:	8b 85       	ldd	r24, Y+11	; 0x0b
     d7a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d7c:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
     d80:	6c 01       	movw	r12, r24
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     d82:	e1 14       	cp	r14, r1
     d84:	f1 04       	cpc	r15, r1
     d86:	19 f0       	breq	.+6      	; 0xd8e <_ZN10Connection27enable_multiple_connectionsEb+0x2b0>
     d88:	c7 01       	movw	r24, r14
     d8a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
	if (data.find_first_of("OK") > 0)
     d8e:	ff 24       	eor	r15, r15
     d90:	f3 94       	inc	r15
     d92:	1c 14       	cp	r1, r12
     d94:	1d 04       	cpc	r1, r13
     d96:	0c f0       	brlt	.+2      	; 0xd9a <_ZN10Connection27enable_multiple_connectionsEb+0x2bc>
     d98:	f1 2c       	mov	r15, r1
     d9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	11 f0       	breq	.+4      	; 0xda6 <_ZN10Connection27enable_multiple_connectionsEb+0x2c8>
     da2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     da6:	01 15       	cp	r16, r1
     da8:	11 05       	cpc	r17, r1
     daa:	19 f0       	breq	.+6      	; 0xdb2 <_ZN10Connection27enable_multiple_connectionsEb+0x2d4>
     dac:	c8 01       	movw	r24, r16
     dae:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
	return true;
	return false;
}
     db2:	8f 2d       	mov	r24, r15
     db4:	2f 96       	adiw	r28, 0x0f	; 15
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	9f 90       	pop	r9
     dd6:	8f 90       	pop	r8
     dd8:	7f 90       	pop	r7
     dda:	6f 90       	pop	r6
     ddc:	5f 90       	pop	r5
     dde:	4f 90       	pop	r4
     de0:	3f 90       	pop	r3
     de2:	2f 90       	pop	r2
     de4:	08 95       	ret

00000de6 <_ZN10Connection13enable_serverEb>:
bool Connection::enable_server(const bool value)
{
     de6:	2f 92       	push	r2
     de8:	3f 92       	push	r3
     dea:	4f 92       	push	r4
     dec:	5f 92       	push	r5
     dee:	6f 92       	push	r6
     df0:	7f 92       	push	r7
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	2f 97       	sbiw	r28, 0x0f	; 15
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	9e 87       	std	Y+14, r25	; 0x0e
     e1c:	8d 87       	std	Y+13, r24	; 0x0d
     e1e:	6f 87       	std	Y+15, r22	; 0x0f
		{
			return string_find_first_of(chars_, length_, other.chars_);
		}
		char *c_str() const
		{
			return chars_;
     e20:	e0 90 64 03 	lds	r14, 0x0364	; 0x800364 <_ZL14server_command+0x4>
     e24:	f0 90 65 03 	lds	r15, 0x0365	; 0x800365 <_ZL14server_command+0x5>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     e28:	c7 01       	movw	r24, r14
     e2a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     e2e:	2b 01       	movw	r4, r22
     e30:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
     e32:	cb 01       	movw	r24, r22
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     e3a:	8c 01       	movw	r16, r24
			string_copy(chars_, text, length_);
     e3c:	a2 01       	movw	r20, r4
     e3e:	b7 01       	movw	r22, r14
     e40:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     e44:	89 e0       	ldi	r24, 0x09	; 9
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     e4c:	4b 01       	movw	r8, r22
     e4e:	5c 01       	movw	r10, r24
			chars_ = new char[length_ + 1];
     e50:	cb 01       	movw	r24, r22
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     e58:	6c 01       	movw	r12, r24
			string_copy(chars_, text, length_);
     e5a:	a4 01       	movw	r20, r8
     e5c:	69 e0       	ldi	r22, 0x09	; 9
     e5e:	72 e0       	ldi	r23, 0x02	; 2
     e60:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
     e64:	84 0c       	add	r8, r4
     e66:	95 1c       	adc	r9, r5
     e68:	a6 1c       	adc	r10, r6
     e6a:	b7 1c       	adc	r11, r7
			char *old = chars_;
			chars_ = new char[new_length + 1];
     e6c:	c4 01       	movw	r24, r8
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     e74:	7c 01       	movw	r14, r24
			unsigned long i = 0;
			while (i < length_)
     e76:	41 14       	cp	r4, r1
     e78:	51 04       	cpc	r5, r1
     e7a:	61 04       	cpc	r6, r1
     e7c:	71 04       	cpc	r7, r1
     e7e:	31 f4       	brne	.+12     	; 0xe8c <_ZN10Connection13enable_serverEb+0xa6>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     e80:	48 14       	cp	r4, r8
     e82:	59 04       	cpc	r5, r9
     e84:	6a 04       	cpc	r6, r10
     e86:	7b 04       	cpc	r7, r11
     e88:	60 f0       	brcs	.+24     	; 0xea2 <_ZN10Connection13enable_serverEb+0xbc>
     e8a:	17 c0       	rjmp	.+46     	; 0xeba <_ZN10Connection13enable_serverEb+0xd4>
     e8c:	f8 01       	movw	r30, r16
     e8e:	dc 01       	movw	r26, r24
     e90:	98 01       	movw	r18, r16
     e92:	24 0d       	add	r18, r4
     e94:	35 1d       	adc	r19, r5
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
     e96:	81 91       	ld	r24, Z+
     e98:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
     e9a:	e2 17       	cp	r30, r18
     e9c:	f3 07       	cpc	r31, r19
     e9e:	d9 f7       	brne	.-10     	; 0xe96 <_ZN10Connection13enable_serverEb+0xb0>
     ea0:	ef cf       	rjmp	.-34     	; 0xe80 <_ZN10Connection13enable_serverEb+0x9a>
     ea2:	d6 01       	movw	r26, r12
     ea4:	f7 01       	movw	r30, r14
     ea6:	e4 0d       	add	r30, r4
     ea8:	f5 1d       	adc	r31, r5
     eaa:	97 01       	movw	r18, r14
     eac:	28 0d       	add	r18, r8
     eae:	39 1d       	adc	r19, r9
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
     eb0:	8d 91       	ld	r24, X+
     eb2:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     eb4:	e2 17       	cp	r30, r18
     eb6:	f3 07       	cpc	r31, r19
     eb8:	d9 f7       	brne	.-10     	; 0xeb0 <_ZN10Connection13enable_serverEb+0xca>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
     eba:	17 01       	movw	r2, r14
     ebc:	28 0c       	add	r2, r8
     ebe:	39 1c       	adc	r3, r9
     ec0:	f1 01       	movw	r30, r2
     ec2:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
     ec4:	01 15       	cp	r16, r1
     ec6:	11 05       	cpc	r17, r1
     ec8:	19 f0       	breq	.+6      	; 0xed0 <_ZN10Connection13enable_serverEb+0xea>
     eca:	c8 01       	movw	r24, r16
     ecc:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     ed0:	c1 14       	cp	r12, r1
     ed2:	d1 04       	cpc	r13, r1
     ed4:	19 f0       	breq	.+6      	; 0xedc <_ZN10Connection13enable_serverEb+0xf6>
     ed6:	c6 01       	movw	r24, r12
     ed8:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
	string s_mode = server_command.c_str();
	s_mode += "=";
	if (value)
     edc:	ff 85       	ldd	r31, Y+15	; 0x0f
     ede:	ff 23       	and	r31, r31
     ee0:	09 f4       	brne	.+2      	; 0xee4 <_ZN10Connection13enable_serverEb+0xfe>
     ee2:	4b c0       	rjmp	.+150    	; 0xf7a <_ZN10Connection13enable_serverEb+0x194>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     ee4:	8b e0       	ldi	r24, 0x0B	; 11
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     eec:	2b 01       	movw	r4, r22
     eee:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
     ef0:	cb 01       	movw	r24, r22
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     ef8:	6c 01       	movw	r12, r24
			string_copy(chars_, text, length_);
     efa:	a2 01       	movw	r20, r4
     efc:	6b e0       	ldi	r22, 0x0B	; 11
     efe:	72 e0       	ldi	r23, 0x02	; 2
     f00:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
     f04:	48 0c       	add	r4, r8
     f06:	59 1c       	adc	r5, r9
     f08:	6a 1c       	adc	r6, r10
     f0a:	7b 1c       	adc	r7, r11
			char *old = chars_;
			chars_ = new char[new_length + 1];
     f0c:	c2 01       	movw	r24, r4
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     f14:	8c 01       	movw	r16, r24
			unsigned long i = 0;
			while (i < length_)
     f16:	81 14       	cp	r8, r1
     f18:	91 04       	cpc	r9, r1
     f1a:	a1 04       	cpc	r10, r1
     f1c:	b1 04       	cpc	r11, r1
     f1e:	31 f4       	brne	.+12     	; 0xf2c <_ZN10Connection13enable_serverEb+0x146>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     f20:	84 14       	cp	r8, r4
     f22:	95 04       	cpc	r9, r5
     f24:	a6 04       	cpc	r10, r6
     f26:	b7 04       	cpc	r11, r7
     f28:	50 f0       	brcs	.+20     	; 0xf3e <_ZN10Connection13enable_serverEb+0x158>
     f2a:	15 c0       	rjmp	.+42     	; 0xf56 <_ZN10Connection13enable_serverEb+0x170>
     f2c:	f7 01       	movw	r30, r14
     f2e:	dc 01       	movw	r26, r24
     f30:	91 01       	movw	r18, r2
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
     f32:	81 91       	ld	r24, Z+
     f34:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
     f36:	2e 17       	cp	r18, r30
     f38:	3f 07       	cpc	r19, r31
     f3a:	d9 f7       	brne	.-10     	; 0xf32 <_ZN10Connection13enable_serverEb+0x14c>
     f3c:	f1 cf       	rjmp	.-30     	; 0xf20 <_ZN10Connection13enable_serverEb+0x13a>
     f3e:	d6 01       	movw	r26, r12
     f40:	f8 01       	movw	r30, r16
     f42:	e8 0d       	add	r30, r8
     f44:	f9 1d       	adc	r31, r9
     f46:	98 01       	movw	r18, r16
     f48:	24 0d       	add	r18, r4
     f4a:	35 1d       	adc	r19, r5
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
     f4c:	8d 91       	ld	r24, X+
     f4e:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     f50:	e2 17       	cp	r30, r18
     f52:	f3 07       	cpc	r31, r19
     f54:	d9 f7       	brne	.-10     	; 0xf4c <_ZN10Connection13enable_serverEb+0x166>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
     f56:	f8 01       	movw	r30, r16
     f58:	e4 0d       	add	r30, r4
     f5a:	f5 1d       	adc	r31, r5
     f5c:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
     f5e:	e1 14       	cp	r14, r1
     f60:	f1 04       	cpc	r15, r1
     f62:	19 f0       	breq	.+6      	; 0xf6a <_ZN10Connection13enable_serverEb+0x184>
     f64:	c7 01       	movw	r24, r14
     f66:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
     f6a:	c1 14       	cp	r12, r1
     f6c:	d1 04       	cpc	r13, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <_ZN10Connection13enable_serverEb+0x18c>
     f70:	4d c0       	rjmp	.+154    	; 0x100c <_ZN10Connection13enable_serverEb+0x226>
     f72:	c6 01       	movw	r24, r12
     f74:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
     f78:	49 c0       	rjmp	.+146    	; 0x100c <_ZN10Connection13enable_serverEb+0x226>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
     f7a:	8e e0       	ldi	r24, 0x0E	; 14
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
     f82:	2b 01       	movw	r4, r22
     f84:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
     f86:	cb 01       	movw	r24, r22
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     f8e:	6c 01       	movw	r12, r24
			string_copy(chars_, text, length_);
     f90:	a2 01       	movw	r20, r4
     f92:	6e e0       	ldi	r22, 0x0E	; 14
     f94:	72 e0       	ldi	r23, 0x02	; 2
     f96:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
     f9a:	48 0c       	add	r4, r8
     f9c:	59 1c       	adc	r5, r9
     f9e:	6a 1c       	adc	r6, r10
     fa0:	7b 1c       	adc	r7, r11
			char *old = chars_;
			chars_ = new char[new_length + 1];
     fa2:	c2 01       	movw	r24, r4
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
     faa:	8c 01       	movw	r16, r24
			unsigned long i = 0;
			while (i < length_)
     fac:	81 14       	cp	r8, r1
     fae:	91 04       	cpc	r9, r1
     fb0:	a1 04       	cpc	r10, r1
     fb2:	b1 04       	cpc	r11, r1
     fb4:	31 f4       	brne	.+12     	; 0xfc2 <_ZN10Connection13enable_serverEb+0x1dc>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     fb6:	84 14       	cp	r8, r4
     fb8:	95 04       	cpc	r9, r5
     fba:	a6 04       	cpc	r10, r6
     fbc:	b7 04       	cpc	r11, r7
     fbe:	50 f0       	brcs	.+20     	; 0xfd4 <_ZN10Connection13enable_serverEb+0x1ee>
     fc0:	15 c0       	rjmp	.+42     	; 0xfec <_ZN10Connection13enable_serverEb+0x206>
     fc2:	f7 01       	movw	r30, r14
     fc4:	dc 01       	movw	r26, r24
     fc6:	91 01       	movw	r18, r2
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
     fc8:	81 91       	ld	r24, Z+
     fca:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
     fcc:	2e 17       	cp	r18, r30
     fce:	3f 07       	cpc	r19, r31
     fd0:	d9 f7       	brne	.-10     	; 0xfc8 <_ZN10Connection13enable_serverEb+0x1e2>
     fd2:	f1 cf       	rjmp	.-30     	; 0xfb6 <_ZN10Connection13enable_serverEb+0x1d0>
     fd4:	d6 01       	movw	r26, r12
     fd6:	f8 01       	movw	r30, r16
     fd8:	e8 0d       	add	r30, r8
     fda:	f9 1d       	adc	r31, r9
     fdc:	98 01       	movw	r18, r16
     fde:	24 0d       	add	r18, r4
     fe0:	35 1d       	adc	r19, r5
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
     fe2:	8d 91       	ld	r24, X+
     fe4:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
     fe6:	e2 17       	cp	r30, r18
     fe8:	f3 07       	cpc	r31, r19
     fea:	d9 f7       	brne	.-10     	; 0xfe2 <_ZN10Connection13enable_serverEb+0x1fc>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
     fec:	f8 01       	movw	r30, r16
     fee:	e4 0d       	add	r30, r4
     ff0:	f5 1d       	adc	r31, r5
     ff2:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
     ff4:	e1 14       	cp	r14, r1
     ff6:	f1 04       	cpc	r15, r1
     ff8:	19 f0       	breq	.+6      	; 0x1000 <_ZN10Connection13enable_serverEb+0x21a>
     ffa:	c7 01       	movw	r24, r14
     ffc:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    1000:	c1 14       	cp	r12, r1
    1002:	d1 04       	cpc	r13, r1
    1004:	19 f0       	breq	.+6      	; 0x100c <_ZN10Connection13enable_serverEb+0x226>
    1006:	c6 01       	movw	r24, r12
    1008:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    100c:	19 82       	std	Y+1, r1	; 0x01
    100e:	1a 82       	std	Y+2, r1	; 0x02
    1010:	1b 82       	std	Y+3, r1	; 0x03
    1012:	1c 82       	std	Y+4, r1	; 0x04
			length_ = string_length(text);
    1014:	c8 01       	movw	r24, r16
    1016:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    101a:	69 83       	std	Y+1, r22	; 0x01
    101c:	7a 83       	std	Y+2, r23	; 0x02
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	9c 83       	std	Y+4, r25	; 0x04
			chars_ = new char[length_ + 1];
    1022:	cb 01       	movw	r24, r22
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, text, length_);
    102e:	49 81       	ldd	r20, Y+1	; 0x01
    1030:	5a 81       	ldd	r21, Y+2	; 0x02
    1032:	b8 01       	movw	r22, r16
    1034:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
	s_mode += "1,80";
	else
	s_mode += "0";
	string data = send(s_mode.c_str());
    1038:	ae 01       	movw	r20, r28
    103a:	4f 5f       	subi	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1040:	7e 85       	ldd	r23, Y+14	; 0x0e
    1042:	ce 01       	movw	r24, r28
    1044:	07 96       	adiw	r24, 0x07	; 7
    1046:	0f db       	rcall	.-2530   	; 0x666 <_ZN10Connection4sendEN8Standard6stringE>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	11 f0       	breq	.+4      	; 0x1054 <_ZN10Connection13enable_serverEb+0x26e>
    1050:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1054:	86 e0       	ldi	r24, 0x06	; 6
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    105c:	4b 01       	movw	r8, r22
    105e:	5c 01       	movw	r10, r24
			chars_ = new char[length_ + 1];
    1060:	cb 01       	movw	r24, r22
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1068:	7c 01       	movw	r14, r24
			string_copy(chars_, text, length_);
    106a:	a4 01       	movw	r20, r8
    106c:	66 e0       	ldi	r22, 0x06	; 6
    106e:	72 e0       	ldi	r23, 0x02	; 2
    1070:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		{
			return string_find_first_of(chars_, length_, ch);
		}
		int find_first_of(const string &other)
		{
			return string_find_first_of(chars_, length_, other.chars_);
    1074:	6f 81       	ldd	r22, Y+7	; 0x07
    1076:	78 85       	ldd	r23, Y+8	; 0x08
    1078:	a7 01       	movw	r20, r14
    107a:	8b 85       	ldd	r24, Y+11	; 0x0b
    107c:	9c 85       	ldd	r25, Y+12	; 0x0c
    107e:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
    1082:	6c 01       	movw	r12, r24
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    1084:	e1 14       	cp	r14, r1
    1086:	f1 04       	cpc	r15, r1
    1088:	19 f0       	breq	.+6      	; 0x1090 <_ZN10Connection13enable_serverEb+0x2aa>
    108a:	c7 01       	movw	r24, r14
    108c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
	if (data.find_first_of("OK"))
    1090:	ff 24       	eor	r15, r15
    1092:	f3 94       	inc	r15
    1094:	cd 28       	or	r12, r13
    1096:	09 f4       	brne	.+2      	; 0x109a <_ZN10Connection13enable_serverEb+0x2b4>
    1098:	f1 2c       	mov	r15, r1
    109a:	8b 85       	ldd	r24, Y+11	; 0x0b
    109c:	9c 85       	ldd	r25, Y+12	; 0x0c
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <_ZN10Connection13enable_serverEb+0x2c0>
    10a2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    10a6:	01 15       	cp	r16, r1
    10a8:	11 05       	cpc	r17, r1
    10aa:	19 f0       	breq	.+6      	; 0x10b2 <_ZN10Connection13enable_serverEb+0x2cc>
    10ac:	c8 01       	movw	r24, r16
    10ae:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
	return true;
	return false;
}
    10b2:	8f 2d       	mov	r24, r15
    10b4:	2f 96       	adiw	r28, 0x0f	; 15
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	bf 90       	pop	r11
    10d2:	af 90       	pop	r10
    10d4:	9f 90       	pop	r9
    10d6:	8f 90       	pop	r8
    10d8:	7f 90       	pop	r7
    10da:	6f 90       	pop	r6
    10dc:	5f 90       	pop	r5
    10de:	4f 90       	pop	r4
    10e0:	3f 90       	pop	r3
    10e2:	2f 90       	pop	r2
    10e4:	08 95       	ret

000010e6 <_ZN10Connection8readDataEv>:
	send(s_mode);
	Serial0_PrintString("Responding");
	send(response);
}
ClientConnection Connection::readData()
{
    10e6:	2f 92       	push	r2
    10e8:	3f 92       	push	r3
    10ea:	4f 92       	push	r4
    10ec:	5f 92       	push	r5
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	a8 97       	sbiw	r28, 0x28	; 40
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	4c 01       	movw	r8, r24
	if (Serial1_Available())
    111c:	74 d8       	rcall	.-3864   	; 0x206 <_Z17Serial1_Availablev>
    111e:	88 23       	and	r24, r24
    1120:	09 f4       	brne	.+2      	; 0x1124 <_ZN10Connection8readDataEv+0x3e>
    1122:	cb c2       	rjmp	.+1430   	; 0x16ba <_ZN10Connection8readDataEv+0x5d4>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1124:	1d 86       	std	Y+13, r1	; 0x0d
    1126:	1e 86       	std	Y+14, r1	; 0x0e
    1128:	1f 86       	std	Y+15, r1	; 0x0f
    112a:	18 8a       	std	Y+16, r1	; 0x10
			length_ = string_length(text);
    112c:	80 e1       	ldi	r24, 0x10	; 16
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1134:	6d 87       	std	Y+13, r22	; 0x0d
    1136:	7e 87       	std	Y+14, r23	; 0x0e
    1138:	8f 87       	std	Y+15, r24	; 0x0f
    113a:	98 8b       	std	Y+16, r25	; 0x10
			chars_ = new char[length_ + 1];
    113c:	cb 01       	movw	r24, r22
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1144:	9a 8b       	std	Y+18, r25	; 0x12
    1146:	89 8b       	std	Y+17, r24	; 0x11
			string_copy(chars_, text, length_);
    1148:	4d 85       	ldd	r20, Y+13	; 0x0d
    114a:	5e 85       	ldd	r21, Y+14	; 0x0e
    114c:	60 e1       	ldi	r22, 0x10	; 16
    114e:	72 e0       	ldi	r23, 0x02	; 2
    1150:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
	{
		Serial0_PrintString("GOT SOMETHING");
    1154:	ce 01       	movw	r24, r28
    1156:	0d 96       	adiw	r24, 0x0d	; 13
    1158:	e1 d9       	rcall	.-3134   	; 0x51c <_Z19Serial0_PrintStringN8Standard6stringE>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    115a:	89 89       	ldd	r24, Y+17	; 0x11
    115c:	9a 89       	ldd	r25, Y+18	; 0x12
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	11 f0       	breq	.+4      	; 0x1166 <_ZN10Connection8readDataEv+0x80>
    1162:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
		string data = Serial1_ReadString();
    1166:	ce 01       	movw	r24, r28
    1168:	43 96       	adiw	r24, 0x13	; 19
    116a:	7f d8       	rcall	.-3842   	; 0x26a <_Z18Serial1_ReadStringv>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    116c:	8e e1       	ldi	r24, 0x1E	; 30
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
			chars_ = new char[length_ + 1];
    1178:	cb 01       	movw	r24, r22
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1180:	8c 01       	movw	r16, r24
			string_copy(chars_, text, length_);
    1182:	a6 01       	movw	r20, r12
    1184:	6e e1       	ldi	r22, 0x1E	; 30
    1186:	72 e0       	ldi	r23, 0x02	; 2
    1188:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		{
			return string_find_first_of(chars_, length_, ch);
		}
		int find_first_of(const string &other)
		{
			return string_find_first_of(chars_, length_, other.chars_);
    118c:	6b 89       	ldd	r22, Y+19	; 0x13
    118e:	7c 89       	ldd	r23, Y+20	; 0x14
    1190:	a8 01       	movw	r20, r16
    1192:	8f 89       	ldd	r24, Y+23	; 0x17
    1194:	98 8d       	ldd	r25, Y+24	; 0x18
    1196:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
    119a:	7c 01       	movw	r14, r24
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    119c:	01 15       	cp	r16, r1
    119e:	11 05       	cpc	r17, r1
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <_ZN10Connection8readDataEv+0xc2>
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
		if (data.find_first_of("+IPD") >= 0)
    11a8:	ff 20       	and	r15, r15
    11aa:	0c f4       	brge	.+2      	; 0x11ae <_ZN10Connection8readDataEv+0xc8>
    11ac:	80 c2       	rjmp	.+1280   	; 0x16ae <_ZN10Connection8readDataEv+0x5c8>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    11ae:	8e e1       	ldi	r24, 0x1E	; 30
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    11b6:	2b 01       	movw	r4, r22
    11b8:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
    11ba:	cb 01       	movw	r24, r22
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    11c2:	7c 01       	movw	r14, r24
			string_copy(chars_, text, length_);
    11c4:	a2 01       	movw	r20, r4
    11c6:	6e e1       	ldi	r22, 0x1E	; 30
    11c8:	72 e0       	ldi	r23, 0x02	; 2
    11ca:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		{
			return string_find_first_of(chars_, length_, ch);
		}
		int find_first_of(const string &other)
		{
			return string_find_first_of(chars_, length_, other.chars_);
    11ce:	6b 89       	ldd	r22, Y+19	; 0x13
    11d0:	7c 89       	ldd	r23, Y+20	; 0x14
    11d2:	a7 01       	movw	r20, r14
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
    11dc:	6c 01       	movw	r12, r24
			return chars_;
		}
		string substr(const int first, const int ReadLength)
		{
			int length = ReadLength;
			char *new_str = new char[length + 1];
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    11e6:	8c 01       	movw	r16, r24
			for (int index = 0; index < length; ++index)
			{
				new_str[index] = chars_[index + first];
    11e8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ea:	98 8d       	ldd	r25, Y+24	; 0x18
    11ec:	fc 01       	movw	r30, r24
    11ee:	ec 0d       	add	r30, r12
    11f0:	fd 1d       	adc	r31, r13
    11f2:	85 81       	ldd	r24, Z+5	; 0x05
    11f4:	d8 01       	movw	r26, r16
    11f6:	8c 93       	st	X, r24
			}
			new_str[length] = '\0';
    11f8:	11 96       	adiw	r26, 0x01	; 1
    11fa:	1c 92       	st	X, r1
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    11fc:	c8 01       	movw	r24, r16
    11fe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1202:	6d 8f       	std	Y+29, r22	; 0x1d
    1204:	7e 8f       	std	Y+30, r23	; 0x1e
    1206:	8f 8f       	std	Y+31, r24	; 0x1f
    1208:	98 a3       	std	Y+32, r25	; 0x20
			chars_ = new char[length_ + 1];
    120a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    120c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    120e:	31 96       	adiw	r30, 0x01	; 1
    1210:	f8 a7       	std	Y+40, r31	; 0x28
    1212:	ef a3       	std	Y+39, r30	; 0x27
    1214:	cf 01       	movw	r24, r30
    1216:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    121a:	9e a3       	std	Y+38, r25	; 0x26
    121c:	8d a3       	std	Y+37, r24	; 0x25
			string_copy(chars_, text, length_);
    121e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1220:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1222:	b8 01       	movw	r22, r16
    1224:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			{
				new_str[index] = chars_[index + first];
			}
			new_str[length] = '\0';
			string rs = string(new_str);
			delete[] new_str;
    1228:	01 15       	cp	r16, r1
    122a:	11 05       	cpc	r17, r1
    122c:	19 f0       	breq	.+6      	; 0x1234 <_ZN10Connection8readDataEv+0x14e>
    122e:	c8 01       	movw	r24, r16
    1230:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    1234:	e1 14       	cp	r14, r1
    1236:	f1 04       	cpc	r15, r1
    1238:	19 f0       	breq	.+6      	; 0x1240 <_ZN10Connection8readDataEv+0x15a>
    123a:	c7 01       	movw	r24, r14
    123c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1240:	83 e2       	ldi	r24, 0x23	; 35
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1248:	6b 01       	movw	r12, r22
    124a:	7c 01       	movw	r14, r24
			chars_ = new char[length_ + 1];
    124c:	cb 01       	movw	r24, r22
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1254:	8c 01       	movw	r16, r24
			string_copy(chars_, text, length_);
    1256:	a6 01       	movw	r20, r12
    1258:	63 e2       	ldi	r22, 0x23	; 35
    125a:	72 e0       	ldi	r23, 0x02	; 2
    125c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		{
			return string_find_first_of(chars_, length_, ch);
		}
		int find_first_of(const string &other)
		{
			return string_find_first_of(chars_, length_, other.chars_);
    1260:	6b 89       	ldd	r22, Y+19	; 0x13
    1262:	7c 89       	ldd	r23, Y+20	; 0x14
    1264:	a8 01       	movw	r20, r16
    1266:	8f 89       	ldd	r24, Y+23	; 0x17
    1268:	98 8d       	ldd	r25, Y+24	; 0x18
    126a:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
    126e:	5c 01       	movw	r10, r24
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1270:	88 e2       	ldi	r24, 0x28	; 40
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1278:	2b 01       	movw	r4, r22
    127a:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
    127c:	cb 01       	movw	r24, r22
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1284:	7c 01       	movw	r14, r24
			string_copy(chars_, text, length_);
    1286:	a2 01       	movw	r20, r4
    1288:	68 e2       	ldi	r22, 0x28	; 40
    128a:	72 e0       	ldi	r23, 0x02	; 2
    128c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		{
			return string_find_first_of(chars_, length_, ch);
		}
		int find_first_of(const string &other)
		{
			return string_find_first_of(chars_, length_, other.chars_);
    1290:	6b 89       	ldd	r22, Y+19	; 0x13
    1292:	7c 89       	ldd	r23, Y+20	; 0x14
    1294:	a7 01       	movw	r20, r14
    1296:	8f 89       	ldd	r24, Y+23	; 0x17
    1298:	98 8d       	ldd	r25, Y+24	; 0x18
    129a:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
		{
			//Serial.println(data.c_str());
			string client_id = data.substr(data.find_first_of("+IPD") + 5, 1);
			int request_length = (data.find_first_of("HTTP") - 1) - (data.find_first_of("GET") + 4);
    129e:	95 01       	movw	r18, r10
    12a0:	28 1b       	sub	r18, r24
    12a2:	39 0b       	sbc	r19, r25
    12a4:	d9 01       	movw	r26, r18
    12a6:	15 97       	sbiw	r26, 0x05	; 5
    12a8:	5d 01       	movw	r10, r26
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    12aa:	e1 14       	cp	r14, r1
    12ac:	f1 04       	cpc	r15, r1
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <_ZN10Connection8readDataEv+0x1d0>
    12b0:	c7 01       	movw	r24, r14
    12b2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    12b6:	01 15       	cp	r16, r1
    12b8:	11 05       	cpc	r17, r1
    12ba:	19 f0       	breq	.+6      	; 0x12c2 <_ZN10Connection8readDataEv+0x1dc>
    12bc:	c8 01       	movw	r24, r16
    12be:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    12c2:	88 e2       	ldi	r24, 0x28	; 40
    12c4:	92 e0       	ldi	r25, 0x02	; 2
    12c6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    12ca:	2b 01       	movw	r4, r22
    12cc:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
    12ce:	cb 01       	movw	r24, r22
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    12d6:	7c 01       	movw	r14, r24
			string_copy(chars_, text, length_);
    12d8:	a2 01       	movw	r20, r4
    12da:	68 e2       	ldi	r22, 0x28	; 40
    12dc:	72 e0       	ldi	r23, 0x02	; 2
    12de:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		{
			return string_find_first_of(chars_, length_, ch);
		}
		int find_first_of(const string &other)
		{
			return string_find_first_of(chars_, length_, other.chars_);
    12e2:	6b 89       	ldd	r22, Y+19	; 0x13
    12e4:	7c 89       	ldd	r23, Y+20	; 0x14
    12e6:	a7 01       	movw	r20, r14
    12e8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ea:	98 8d       	ldd	r25, Y+24	; 0x18
    12ec:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_ZN8Standard20string_find_first_ofEPKciS1_>
			string request = data.substr(data.find_first_of("GET") + 4, request_length);
    12f0:	04 96       	adiw	r24, 0x04	; 4
    12f2:	6c 01       	movw	r12, r24
			return chars_;
		}
		string substr(const int first, const int ReadLength)
		{
			int length = ReadLength;
			char *new_str = new char[length + 1];
    12f4:	c5 01       	movw	r24, r10
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    12fc:	8c 01       	movw	r16, r24
			for (int index = 0; index < length; ++index)
    12fe:	1a 14       	cp	r1, r10
    1300:	1b 04       	cpc	r1, r11
    1302:	6c f4       	brge	.+26     	; 0x131e <_ZN10Connection8readDataEv+0x238>
    1304:	af 89       	ldd	r26, Y+23	; 0x17
    1306:	b8 8d       	ldd	r27, Y+24	; 0x18
    1308:	ac 0d       	add	r26, r12
    130a:	bd 1d       	adc	r27, r13
    130c:	fc 01       	movw	r30, r24
    130e:	9c 01       	movw	r18, r24
    1310:	2a 0d       	add	r18, r10
    1312:	3b 1d       	adc	r19, r11
			{
				new_str[index] = chars_[index + first];
    1314:	8d 91       	ld	r24, X+
    1316:	81 93       	st	Z+, r24
		}
		string substr(const int first, const int ReadLength)
		{
			int length = ReadLength;
			char *new_str = new char[length + 1];
			for (int index = 0; index < length; ++index)
    1318:	e2 17       	cp	r30, r18
    131a:	f3 07       	cpc	r31, r19
    131c:	d9 f7       	brne	.-10     	; 0x1314 <_ZN10Connection8readDataEv+0x22e>
			{
				new_str[index] = chars_[index + first];
			}
			new_str[length] = '\0';
    131e:	f8 01       	movw	r30, r16
    1320:	ea 0d       	add	r30, r10
    1322:	fb 1d       	adc	r31, r11
    1324:	10 82       	st	Z, r1
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1326:	c8 01       	movw	r24, r16
    1328:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    132c:	2b 01       	movw	r4, r22
    132e:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
    1330:	1b 01       	movw	r2, r22
    1332:	bf ef       	ldi	r27, 0xFF	; 255
    1334:	2b 1a       	sub	r2, r27
    1336:	3b 0a       	sbc	r3, r27
    1338:	c1 01       	movw	r24, r2
    133a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    133e:	5c 01       	movw	r10, r24
			string_copy(chars_, text, length_);
    1340:	5c a2       	std	Y+36, r5	; 0x24
    1342:	4b a2       	std	Y+35, r4	; 0x23
    1344:	a2 01       	movw	r20, r4
    1346:	b8 01       	movw	r22, r16
    1348:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			{
				new_str[index] = chars_[index + first];
			}
			new_str[length] = '\0';
			string rs = string(new_str);
			delete[] new_str;
    134c:	01 15       	cp	r16, r1
    134e:	11 05       	cpc	r17, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <_ZN10Connection8readDataEv+0x272>
    1352:	c8 01       	movw	r24, r16
    1354:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    1358:	e1 14       	cp	r14, r1
    135a:	f1 04       	cpc	r15, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <_ZN10Connection8readDataEv+0x27e>
    135e:	c7 01       	movw	r24, r14
    1360:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			string_copy(chars_, other.chars_, length_);
			return *this;
		}
		int find_first_of(const char ch)
		{
			return string_find_first_of(chars_, length_, ch);
    1364:	4f e3       	ldi	r20, 0x3F	; 63
    1366:	6b a1       	ldd	r22, Y+35	; 0x23
    1368:	7c a1       	ldd	r23, Y+36	; 0x24
    136a:	c5 01       	movw	r24, r10
    136c:	0e 94 c8 19 	call	0x3390	; 0x3390 <_ZN8Standard20string_find_first_ofEPKcic>
    1370:	6c 01       	movw	r12, r24
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1372:	80 e6       	ldi	r24, 0x60	; 96
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    137a:	69 8f       	std	Y+25, r22	; 0x19
    137c:	7a 8f       	std	Y+26, r23	; 0x1a
    137e:	8b 8f       	std	Y+27, r24	; 0x1b
    1380:	9c 8f       	std	Y+28, r25	; 0x1c
			chars_ = new char[length_ + 1];
    1382:	89 8d       	ldd	r24, Y+25	; 0x19
    1384:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    138c:	9a a3       	std	Y+34, r25	; 0x22
    138e:	89 a3       	std	Y+33, r24	; 0x21
			string_copy(chars_, text, length_);
    1390:	49 8d       	ldd	r20, Y+25	; 0x19
    1392:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1394:	60 e6       	ldi	r22, 0x60	; 96
    1396:	72 e0       	ldi	r23, 0x02	; 2
    1398:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			int parameter_location = request.find_first_of('?');
			string parameters = "";
			if (parameter_location >= 0)
    139c:	dd 20       	and	r13, r13
    139e:	0c f4       	brge	.+2      	; 0x13a2 <_ZN10Connection8readDataEv+0x2bc>
    13a0:	b2 c0       	rjmp	.+356    	; 0x1506 <_ZN10Connection8readDataEv+0x420>
			{
				parameters = request.substr(parameter_location, request.size() + 1);
    13a2:	eb a0       	ldd	r14, Y+35	; 0x23
    13a4:	fc a0       	ldd	r15, Y+36	; 0x24
    13a6:	ef ef       	ldi	r30, 0xFF	; 255
    13a8:	ee 1a       	sub	r14, r30
    13aa:	fe 0a       	sbc	r15, r30
			return chars_;
		}
		string substr(const int first, const int ReadLength)
		{
			int length = ReadLength;
			char *new_str = new char[length + 1];
    13ac:	8b a1       	ldd	r24, Y+35	; 0x23
    13ae:	9c a1       	ldd	r25, Y+36	; 0x24
    13b0:	02 96       	adiw	r24, 0x02	; 2
    13b2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    13b6:	8c 01       	movw	r16, r24
			for (int index = 0; index < length; ++index)
    13b8:	1e 14       	cp	r1, r14
    13ba:	1f 04       	cpc	r1, r15
    13bc:	5c f4       	brge	.+22     	; 0x13d4 <_ZN10Connection8readDataEv+0x2ee>
    13be:	d5 01       	movw	r26, r10
    13c0:	ac 0d       	add	r26, r12
    13c2:	bd 1d       	adc	r27, r13
    13c4:	fc 01       	movw	r30, r24
    13c6:	28 0e       	add	r2, r24
    13c8:	39 1e       	adc	r3, r25
			{
				new_str[index] = chars_[index + first];
    13ca:	8d 91       	ld	r24, X+
    13cc:	81 93       	st	Z+, r24
		}
		string substr(const int first, const int ReadLength)
		{
			int length = ReadLength;
			char *new_str = new char[length + 1];
			for (int index = 0; index < length; ++index)
    13ce:	2e 16       	cp	r2, r30
    13d0:	3f 06       	cpc	r3, r31
    13d2:	d9 f7       	brne	.-10     	; 0x13ca <_ZN10Connection8readDataEv+0x2e4>
			{
				new_str[index] = chars_[index + first];
			}
			new_str[length] = '\0';
    13d4:	f8 01       	movw	r30, r16
    13d6:	ee 0d       	add	r30, r14
    13d8:	ff 1d       	adc	r31, r15
    13da:	10 82       	st	Z, r1
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    13dc:	c8 01       	movw	r24, r16
    13de:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    13e2:	69 8f       	std	Y+25, r22	; 0x19
    13e4:	7a 8f       	std	Y+26, r23	; 0x1a
    13e6:	8b 8f       	std	Y+27, r24	; 0x1b
    13e8:	9c 8f       	std	Y+28, r25	; 0x1c
			chars_ = new char[length_ + 1];
    13ea:	29 8c       	ldd	r2, Y+25	; 0x19
    13ec:	3a 8c       	ldd	r3, Y+26	; 0x1a
    13ee:	71 01       	movw	r14, r2
    13f0:	ff ef       	ldi	r31, 0xFF	; 255
    13f2:	ef 1a       	sub	r14, r31
    13f4:	ff 0a       	sbc	r15, r31
    13f6:	c7 01       	movw	r24, r14
    13f8:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    13fc:	3c 01       	movw	r6, r24
			string_copy(chars_, text, length_);
    13fe:	49 8c       	ldd	r4, Y+25	; 0x19
    1400:	5a 8c       	ldd	r5, Y+26	; 0x1a
    1402:	a2 01       	movw	r20, r4
    1404:	b8 01       	movw	r22, r16
    1406:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			{
				new_str[index] = chars_[index + first];
			}
			new_str[length] = '\0';
			string rs = string(new_str);
			delete[] new_str;
    140a:	01 15       	cp	r16, r1
    140c:	11 05       	cpc	r17, r1
    140e:	19 f0       	breq	.+6      	; 0x1416 <_ZN10Connection8readDataEv+0x330>
    1410:	c8 01       	movw	r24, r16
    1412:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			length_ = new_length;
			delete[] old;
		}
		string operator=(const string &other)
		{
			delete[] chars_;
    1416:	29 a1       	ldd	r18, Y+33	; 0x21
    1418:	3a a1       	ldd	r19, Y+34	; 0x22
    141a:	21 15       	cp	r18, r1
    141c:	31 05       	cpc	r19, r1
    141e:	19 f0       	breq	.+6      	; 0x1426 <_ZN10Connection8readDataEv+0x340>
    1420:	c9 01       	movw	r24, r18
    1422:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_];
    1426:	c1 01       	movw	r24, r2
    1428:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    142c:	9a a3       	std	Y+34, r25	; 0x22
    142e:	89 a3       	std	Y+33, r24	; 0x21
			length_ = other.length_;
			string_copy(chars_, other.chars_, length_);
    1430:	a2 01       	movw	r20, r4
    1432:	b3 01       	movw	r22, r6
    1434:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
			chars_ = new char[other.length_ + 1];
    1438:	c7 01       	movw	r24, r14
    143a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    143e:	8c 01       	movw	r16, r24
			string_copy(chars_, other.chars_, other.length_);
    1440:	a2 01       	movw	r20, r4
    1442:	69 a1       	ldd	r22, Y+33	; 0x21
    1444:	7a a1       	ldd	r23, Y+34	; 0x22
    1446:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		}
		~string()
		{
			delete[] chars_;
    144a:	01 15       	cp	r16, r1
    144c:	11 05       	cpc	r17, r1
    144e:	19 f0       	breq	.+6      	; 0x1456 <_ZN10Connection8readDataEv+0x370>
    1450:	c8 01       	movw	r24, r16
    1452:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    1456:	61 14       	cp	r6, r1
    1458:	71 04       	cpc	r7, r1
    145a:	19 f0       	breq	.+6      	; 0x1462 <_ZN10Connection8readDataEv+0x37c>
    145c:	c3 01       	movw	r24, r6
    145e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			return chars_;
		}
		string substr(const int first, const int ReadLength)
		{
			int length = ReadLength;
			char *new_str = new char[length + 1];
    1462:	c6 01       	movw	r24, r12
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    146a:	7c 01       	movw	r14, r24
			for (int index = 0; index < length; ++index)
    146c:	1c 14       	cp	r1, r12
    146e:	1d 04       	cpc	r1, r13
    1470:	54 f4       	brge	.+20     	; 0x1486 <_ZN10Connection8readDataEv+0x3a0>
    1472:	f5 01       	movw	r30, r10
    1474:	dc 01       	movw	r26, r24
    1476:	95 01       	movw	r18, r10
    1478:	2c 0d       	add	r18, r12
    147a:	3d 1d       	adc	r19, r13
			{
				new_str[index] = chars_[index + first];
    147c:	81 91       	ld	r24, Z+
    147e:	8d 93       	st	X+, r24
		}
		string substr(const int first, const int ReadLength)
		{
			int length = ReadLength;
			char *new_str = new char[length + 1];
			for (int index = 0; index < length; ++index)
    1480:	2e 17       	cp	r18, r30
    1482:	3f 07       	cpc	r19, r31
    1484:	d9 f7       	brne	.-10     	; 0x147c <_ZN10Connection8readDataEv+0x396>
			{
				new_str[index] = chars_[index + first];
			}
			new_str[length] = '\0';
    1486:	f7 01       	movw	r30, r14
    1488:	ec 0d       	add	r30, r12
    148a:	fd 1d       	adc	r31, r13
    148c:	10 82       	st	Z, r1
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    148e:	c7 01       	movw	r24, r14
    1490:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1494:	2b 01       	movw	r4, r22
    1496:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
    1498:	7c a3       	std	Y+36, r23	; 0x24
    149a:	6b a3       	std	Y+35, r22	; 0x23
    149c:	8b 01       	movw	r16, r22
    149e:	0f 5f       	subi	r16, 0xFF	; 255
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	c8 01       	movw	r24, r16
    14a4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    14a8:	6c 01       	movw	r12, r24
			string_copy(chars_, text, length_);
    14aa:	12 01       	movw	r2, r4
    14ac:	a2 01       	movw	r20, r4
    14ae:	b7 01       	movw	r22, r14
    14b0:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			{
				new_str[index] = chars_[index + first];
			}
			new_str[length] = '\0';
			string rs = string(new_str);
			delete[] new_str;
    14b4:	e1 14       	cp	r14, r1
    14b6:	f1 04       	cpc	r15, r1
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <_ZN10Connection8readDataEv+0x3da>
    14ba:	c7 01       	movw	r24, r14
    14bc:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			length_ = new_length;
			delete[] old;
		}
		string operator=(const string &other)
		{
			delete[] chars_;
    14c0:	a1 14       	cp	r10, r1
    14c2:	b1 04       	cpc	r11, r1
    14c4:	19 f0       	breq	.+6      	; 0x14cc <_ZN10Connection8readDataEv+0x3e6>
    14c6:	c5 01       	movw	r24, r10
    14c8:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_];
    14cc:	8b a1       	ldd	r24, Y+35	; 0x23
    14ce:	9c a1       	ldd	r25, Y+36	; 0x24
    14d0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    14d4:	5c 01       	movw	r10, r24
			length_ = other.length_;
			string_copy(chars_, other.chars_, length_);
    14d6:	a1 01       	movw	r20, r2
    14d8:	b6 01       	movw	r22, r12
    14da:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
			chars_ = new char[other.length_ + 1];
    14de:	c8 01       	movw	r24, r16
    14e0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    14e4:	8c 01       	movw	r16, r24
			string_copy(chars_, other.chars_, other.length_);
    14e6:	a1 01       	movw	r20, r2
    14e8:	b5 01       	movw	r22, r10
    14ea:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		}
		~string()
		{
			delete[] chars_;
    14ee:	01 15       	cp	r16, r1
    14f0:	11 05       	cpc	r17, r1
    14f2:	19 f0       	breq	.+6      	; 0x14fa <_ZN10Connection8readDataEv+0x414>
    14f4:	c8 01       	movw	r24, r16
    14f6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    14fa:	c1 14       	cp	r12, r1
    14fc:	d1 04       	cpc	r13, r1
    14fe:	19 f0       	breq	.+6      	; 0x1506 <_ZN10Connection8readDataEv+0x420>
    1500:	c6 01       	movw	r24, r12
    1502:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1506:	1f 82       	std	Y+7, r1	; 0x07
    1508:	18 86       	std	Y+8, r1	; 0x08
    150a:	19 86       	std	Y+9, r1	; 0x09
    150c:	1a 86       	std	Y+10, r1	; 0x0a
			length_ = string_length(text);
    150e:	8c e2       	ldi	r24, 0x2C	; 44
    1510:	92 e0       	ldi	r25, 0x02	; 2
    1512:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1516:	6f 83       	std	Y+7, r22	; 0x07
    1518:	78 87       	std	Y+8, r23	; 0x08
    151a:	89 87       	std	Y+9, r24	; 0x09
    151c:	9a 87       	std	Y+10, r25	; 0x0a
			chars_ = new char[length_ + 1];
    151e:	cb 01       	movw	r24, r22
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1526:	9c 87       	std	Y+12, r25	; 0x0c
    1528:	8b 87       	std	Y+11, r24	; 0x0b
			string_copy(chars_, text, length_);
    152a:	4f 81       	ldd	r20, Y+7	; 0x07
    152c:	58 85       	ldd	r21, Y+8	; 0x08
    152e:	6c e2       	ldi	r22, 0x2C	; 44
    1530:	72 e0       	ldi	r23, 0x02	; 2
    1532:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
				request = request.substr(0, parameter_location);
			}
			Serial0_PrintString("Responding to client with ID:");
    1536:	ce 01       	movw	r24, r28
    1538:	07 96       	adiw	r24, 0x07	; 7
    153a:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z19Serial0_PrintStringN8Standard6stringE>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    153e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1540:	9c 85       	ldd	r25, Y+12	; 0x0c
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	11 f0       	breq	.+4      	; 0x154a <_ZN10Connection8readDataEv+0x464>
    1546:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    154a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    154c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    154e:	af 8d       	ldd	r26, Y+31	; 0x1f
    1550:	b8 a1       	ldd	r27, Y+32	; 0x20
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	9a 83       	std	Y+2, r25	; 0x02
    1556:	ab 83       	std	Y+3, r26	; 0x03
    1558:	bc 83       	std	Y+4, r27	; 0x04
			chars_ = new char[other.length_ + 1];
    155a:	8f a1       	ldd	r24, Y+39	; 0x27
    155c:	98 a5       	ldd	r25, Y+40	; 0x28
    155e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, other.chars_, other.length_);
    1566:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1568:	5e 8d       	ldd	r21, Y+30	; 0x1e
    156a:	6d a1       	ldd	r22, Y+37	; 0x25
    156c:	7e a1       	ldd	r23, Y+38	; 0x26
    156e:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			Serial0_PrintString(client_id);
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z19Serial0_PrintStringN8Standard6stringE>
		}
		~string()
		{
			delete[] chars_;
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	11 f0       	breq	.+4      	; 0x1586 <_ZN10Connection8readDataEv+0x4a0>
    1582:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
			chars_ = new char[other.length_ + 1];
    1586:	8f a1       	ldd	r24, Y+39	; 0x27
    1588:	98 a5       	ldd	r25, Y+40	; 0x28
    158a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    158e:	7c 01       	movw	r14, r24
			string_copy(chars_, other.chars_, other.length_);
    1590:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1592:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1594:	6d a1       	ldd	r22, Y+37	; 0x25
    1596:	7e a1       	ldd	r23, Y+38	; 0x26
    1598:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
			chars_ = new char[other.length_ + 1];
    159c:	d2 01       	movw	r26, r4
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	bc a3       	std	Y+36, r27	; 0x24
    15a2:	ab a3       	std	Y+35, r26	; 0x23
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    15aa:	6c 01       	movw	r12, r24
			string_copy(chars_, other.chars_, other.length_);
    15ac:	a2 01       	movw	r20, r4
    15ae:	b5 01       	movw	r22, r10
    15b0:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
			chars_ = new char[other.length_ + 1];
    15b4:	29 8c       	ldd	r2, Y+25	; 0x19
    15b6:	3a 8c       	ldd	r3, Y+26	; 0x1a
    15b8:	bf ef       	ldi	r27, 0xFF	; 255
    15ba:	2b 1a       	sub	r2, r27
    15bc:	3b 0a       	sbc	r3, r27
    15be:	c1 01       	movw	r24, r2
    15c0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    15c4:	8c 01       	movw	r16, r24
			string_copy(chars_, other.chars_, other.length_);
    15c6:	49 8d       	ldd	r20, Y+25	; 0x19
    15c8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    15ca:	69 a1       	ldd	r22, Y+33	; 0x21
    15cc:	7a a1       	ldd	r23, Y+34	; 0x22
    15ce:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    15d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15d6:	af 8d       	ldd	r26, Y+31	; 0x1f
    15d8:	b8 a1       	ldd	r27, Y+32	; 0x20
    15da:	f4 01       	movw	r30, r8
    15dc:	80 83       	st	Z, r24
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	a2 83       	std	Z+2, r26	; 0x02
    15e2:	b3 83       	std	Z+3, r27	; 0x03
			chars_ = new char[other.length_ + 1];
    15e4:	8f a1       	ldd	r24, Y+39	; 0x27
    15e6:	98 a5       	ldd	r25, Y+40	; 0x28
    15e8:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    15ec:	d4 01       	movw	r26, r8
    15ee:	15 96       	adiw	r26, 0x05	; 5
    15f0:	9c 93       	st	X, r25
    15f2:	8e 93       	st	-X, r24
    15f4:	14 97       	sbiw	r26, 0x04	; 4
			string_copy(chars_, other.chars_, other.length_);
    15f6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    15f8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    15fa:	b7 01       	movw	r22, r14
    15fc:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    1600:	f4 01       	movw	r30, r8
    1602:	46 82       	std	Z+6, r4	; 0x06
    1604:	57 82       	std	Z+7, r5	; 0x07
    1606:	60 86       	std	Z+8, r6	; 0x08
    1608:	71 86       	std	Z+9, r7	; 0x09
			chars_ = new char[other.length_ + 1];
    160a:	8b a1       	ldd	r24, Y+35	; 0x23
    160c:	9c a1       	ldd	r25, Y+36	; 0x24
    160e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1612:	d4 01       	movw	r26, r8
    1614:	1b 96       	adiw	r26, 0x0b	; 11
    1616:	9c 93       	st	X, r25
    1618:	8e 93       	st	-X, r24
    161a:	1a 97       	sbiw	r26, 0x0a	; 10
			string_copy(chars_, other.chars_, other.length_);
    161c:	a2 01       	movw	r20, r4
    161e:	b6 01       	movw	r22, r12
    1620:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    1624:	89 8d       	ldd	r24, Y+25	; 0x19
    1626:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1628:	ab 8d       	ldd	r26, Y+27	; 0x1b
    162a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    162c:	f4 01       	movw	r30, r8
    162e:	84 87       	std	Z+12, r24	; 0x0c
    1630:	95 87       	std	Z+13, r25	; 0x0d
    1632:	a6 87       	std	Z+14, r26	; 0x0e
    1634:	b7 87       	std	Z+15, r27	; 0x0f
			chars_ = new char[other.length_ + 1];
    1636:	c1 01       	movw	r24, r2
    1638:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    163c:	d4 01       	movw	r26, r8
    163e:	51 96       	adiw	r26, 0x11	; 17
    1640:	9c 93       	st	X, r25
    1642:	8e 93       	st	-X, r24
    1644:	50 97       	sbiw	r26, 0x10	; 16
			string_copy(chars_, other.chars_, other.length_);
    1646:	49 8d       	ldd	r20, Y+25	; 0x19
    1648:	5a 8d       	ldd	r21, Y+26	; 0x1a
    164a:	b8 01       	movw	r22, r16
    164c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		}
		~string()
		{
			delete[] chars_;
    1650:	01 15       	cp	r16, r1
    1652:	11 05       	cpc	r17, r1
    1654:	19 f0       	breq	.+6      	; 0x165c <_ZN10Connection8readDataEv+0x576>
    1656:	c8 01       	movw	r24, r16
    1658:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    165c:	c1 14       	cp	r12, r1
    165e:	d1 04       	cpc	r13, r1
    1660:	19 f0       	breq	.+6      	; 0x1668 <_ZN10Connection8readDataEv+0x582>
    1662:	c6 01       	movw	r24, r12
    1664:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    1668:	e1 14       	cp	r14, r1
    166a:	f1 04       	cpc	r15, r1
    166c:	19 f0       	breq	.+6      	; 0x1674 <_ZN10Connection8readDataEv+0x58e>
    166e:	c7 01       	movw	r24, r14
    1670:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    1674:	e9 a1       	ldd	r30, Y+33	; 0x21
    1676:	fa a1       	ldd	r31, Y+34	; 0x22
    1678:	30 97       	sbiw	r30, 0x00	; 0
    167a:	19 f0       	breq	.+6      	; 0x1682 <_ZN10Connection8readDataEv+0x59c>
    167c:	cf 01       	movw	r24, r30
    167e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    1682:	a1 14       	cp	r10, r1
    1684:	b1 04       	cpc	r11, r1
    1686:	19 f0       	breq	.+6      	; 0x168e <_ZN10Connection8readDataEv+0x5a8>
    1688:	c5 01       	movw	r24, r10
    168a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    168e:	2d a1       	ldd	r18, Y+37	; 0x25
    1690:	3e a1       	ldd	r19, Y+38	; 0x26
    1692:	21 15       	cp	r18, r1
    1694:	31 05       	cpc	r19, r1
    1696:	19 f0       	breq	.+6      	; 0x169e <_ZN10Connection8readDataEv+0x5b8>
    1698:	c9 01       	movw	r24, r18
    169a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    169e:	8f 89       	ldd	r24, Y+23	; 0x17
    16a0:	98 8d       	ldd	r25, Y+24	; 0x18
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <_ZN10Connection8readDataEv+0x5c2>
    16a6:	46 c0       	rjmp	.+140    	; 0x1734 <_ZN10Connection8readDataEv+0x64e>
    16a8:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    16ac:	43 c0       	rjmp	.+134    	; 0x1734 <_ZN10Connection8readDataEv+0x64e>
    16ae:	8f 89       	ldd	r24, Y+23	; 0x17
    16b0:	98 8d       	ldd	r25, Y+24	; 0x18
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	11 f0       	breq	.+4      	; 0x16ba <_ZN10Connection8readDataEv+0x5d4>
    16b6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    16ba:	d4 01       	movw	r26, r8
    16bc:	1d 92       	st	X+, r1
    16be:	1d 92       	st	X+, r1
    16c0:	1d 92       	st	X+, r1
    16c2:	1c 92       	st	X, r1
    16c4:	13 97       	sbiw	r26, 0x03	; 3
			length_ = string_length(text);
    16c6:	8a e4       	ldi	r24, 0x4A	; 74
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    16ce:	f4 01       	movw	r30, r8
    16d0:	60 83       	st	Z, r22
    16d2:	71 83       	std	Z+1, r23	; 0x01
    16d4:	82 83       	std	Z+2, r24	; 0x02
    16d6:	93 83       	std	Z+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    16d8:	cb 01       	movw	r24, r22
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    16e0:	d4 01       	movw	r26, r8
    16e2:	15 96       	adiw	r26, 0x05	; 5
    16e4:	9c 93       	st	X, r25
    16e6:	8e 93       	st	-X, r24
    16e8:	14 97       	sbiw	r26, 0x04	; 4
			string_copy(chars_, text, length_);
    16ea:	4d 91       	ld	r20, X+
    16ec:	5c 91       	ld	r21, X
    16ee:	6a e4       	ldi	r22, 0x4A	; 74
    16f0:	72 e0       	ldi	r23, 0x02	; 2
    16f2:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		unsigned long length_{0};
		char *chars_;

		public:
		string()
		{
    16f6:	f4 01       	movw	r30, r8
    16f8:	16 82       	std	Z+6, r1	; 0x06
    16fa:	17 82       	std	Z+7, r1	; 0x07
    16fc:	10 86       	std	Z+8, r1	; 0x08
    16fe:	11 86       	std	Z+9, r1	; 0x09
			length_ = 0;
			chars_ = new char[length_ + 1];
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1708:	d4 01       	movw	r26, r8
    170a:	1b 96       	adiw	r26, 0x0b	; 11
    170c:	9c 93       	st	X, r25
    170e:	8e 93       	st	-X, r24
    1710:	1a 97       	sbiw	r26, 0x0a	; 10
			chars_[0] = '\0';
    1712:	fc 01       	movw	r30, r24
    1714:	10 82       	st	Z, r1
		unsigned long length_{0};
		char *chars_;

		public:
		string()
		{
    1716:	1c 96       	adiw	r26, 0x0c	; 12
    1718:	1d 92       	st	X+, r1
    171a:	1d 92       	st	X+, r1
    171c:	1d 92       	st	X+, r1
    171e:	1c 92       	st	X, r1
    1720:	1f 97       	sbiw	r26, 0x0f	; 15
			length_ = 0;
			chars_ = new char[length_ + 1];
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    172a:	f4 01       	movw	r30, r8
    172c:	91 8b       	std	Z+17, r25	; 0x11
    172e:	80 8b       	std	Z+16, r24	; 0x10
			chars_[0] = '\0';
    1730:	dc 01       	movw	r26, r24
    1732:	1c 92       	st	X, r1
			ClientConnection retobj = ClientConnection(client_id, request, parameters);
			return retobj;
		}
	}
	return ClientConnection();
}
    1734:	c4 01       	movw	r24, r8
    1736:	a8 96       	adiw	r28, 0x28	; 40
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	cf 90       	pop	r12
    1752:	bf 90       	pop	r11
    1754:	af 90       	pop	r10
    1756:	9f 90       	pop	r9
    1758:	8f 90       	pop	r8
    175a:	7f 90       	pop	r7
    175c:	6f 90       	pop	r6
    175e:	5f 90       	pop	r5
    1760:	4f 90       	pop	r4
    1762:	3f 90       	pop	r3
    1764:	2f 90       	pop	r2
    1766:	08 95       	ret

00001768 <_ZN10Connection16close_connectionEN8Standard6stringE>:
void Connection::close_connection(const string client_id)
{
    1768:	2f 92       	push	r2
    176a:	3f 92       	push	r3
    176c:	4f 92       	push	r4
    176e:	5f 92       	push	r5
    1770:	6f 92       	push	r6
    1772:	7f 92       	push	r7
    1774:	8f 92       	push	r8
    1776:	9f 92       	push	r9
    1778:	af 92       	push	r10
    177a:	bf 92       	push	r11
    177c:	cf 92       	push	r12
    177e:	df 92       	push	r13
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	62 97       	sbiw	r28, 0x12	; 18
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	98 8b       	std	Y+16, r25	; 0x10
    179e:	8f 87       	std	Y+15, r24	; 0x0f
    17a0:	8b 01       	movw	r16, r22
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    17a2:	0f 2e       	mov	r0, r31
    17a4:	fe e4       	ldi	r31, 0x4E	; 78
    17a6:	ef 2e       	mov	r14, r31
    17a8:	f3 e0       	ldi	r31, 0x03	; 3
    17aa:	ff 2e       	mov	r15, r31
    17ac:	f0 2d       	mov	r31, r0
    17ae:	d7 01       	movw	r26, r14
    17b0:	4d 90       	ld	r4, X+
    17b2:	5d 90       	ld	r5, X+
    17b4:	6d 90       	ld	r6, X+
    17b6:	7c 90       	ld	r7, X
			chars_ = new char[other.length_ + 1];
    17b8:	c2 01       	movw	r24, r4
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    17c0:	5c 01       	movw	r10, r24
			string_copy(chars_, other.chars_, other.length_);
    17c2:	f7 01       	movw	r30, r14
    17c4:	40 81       	ld	r20, Z
    17c6:	51 81       	ldd	r21, Z+1	; 0x01
    17c8:	64 81       	ldd	r22, Z+4	; 0x04
    17ca:	75 81       	ldd	r23, Z+5	; 0x05
    17cc:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    17d0:	89 e0       	ldi	r24, 0x09	; 9
    17d2:	92 e0       	ldi	r25, 0x02	; 2
    17d4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    17d8:	6b 01       	movw	r12, r22
    17da:	7c 01       	movw	r14, r24
			chars_ = new char[length_ + 1];
    17dc:	cb 01       	movw	r24, r22
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    17e4:	1c 01       	movw	r2, r24
			string_copy(chars_, text, length_);
    17e6:	a6 01       	movw	r20, r12
    17e8:	69 e0       	ldi	r22, 0x09	; 9
    17ea:	72 e0       	ldi	r23, 0x02	; 2
    17ec:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    17f0:	c4 0c       	add	r12, r4
    17f2:	d5 1c       	adc	r13, r5
    17f4:	e6 1c       	adc	r14, r6
    17f6:	f7 1c       	adc	r15, r7
			char *old = chars_;
			chars_ = new char[new_length + 1];
    17f8:	da 8a       	std	Y+18, r13	; 0x12
    17fa:	c9 8a       	std	Y+17, r12	; 0x11
    17fc:	c6 01       	movw	r24, r12
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1804:	4c 01       	movw	r8, r24
			unsigned long i = 0;
			while (i < length_)
    1806:	41 14       	cp	r4, r1
    1808:	51 04       	cpc	r5, r1
    180a:	61 04       	cpc	r6, r1
    180c:	71 04       	cpc	r7, r1
    180e:	31 f4       	brne	.+12     	; 0x181c <_ZN10Connection16close_connectionEN8Standard6stringE+0xb4>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    1810:	4c 14       	cp	r4, r12
    1812:	5d 04       	cpc	r5, r13
    1814:	6e 04       	cpc	r6, r14
    1816:	7f 04       	cpc	r7, r15
    1818:	60 f0       	brcs	.+24     	; 0x1832 <_ZN10Connection16close_connectionEN8Standard6stringE+0xca>
    181a:	17 c0       	rjmp	.+46     	; 0x184a <_ZN10Connection16close_connectionEN8Standard6stringE+0xe2>
    181c:	f5 01       	movw	r30, r10
    181e:	dc 01       	movw	r26, r24
    1820:	c5 01       	movw	r24, r10
    1822:	84 0d       	add	r24, r4
    1824:	95 1d       	adc	r25, r5
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
    1826:	21 91       	ld	r18, Z+
    1828:	2d 93       	st	X+, r18
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    182a:	e8 17       	cp	r30, r24
    182c:	f9 07       	cpc	r31, r25
    182e:	d9 f7       	brne	.-10     	; 0x1826 <_ZN10Connection16close_connectionEN8Standard6stringE+0xbe>
    1830:	ef cf       	rjmp	.-34     	; 0x1810 <_ZN10Connection16close_connectionEN8Standard6stringE+0xa8>
    1832:	d1 01       	movw	r26, r2
    1834:	f4 01       	movw	r30, r8
    1836:	e4 0d       	add	r30, r4
    1838:	f5 1d       	adc	r31, r5
    183a:	94 01       	movw	r18, r8
    183c:	2c 0d       	add	r18, r12
    183e:	3d 1d       	adc	r19, r13
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    1840:	8d 91       	ld	r24, X+
    1842:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    1844:	2e 17       	cp	r18, r30
    1846:	3f 07       	cpc	r19, r31
    1848:	d9 f7       	brne	.-10     	; 0x1840 <_ZN10Connection16close_connectionEN8Standard6stringE+0xd8>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    184a:	c4 01       	movw	r24, r8
    184c:	8c 0d       	add	r24, r12
    184e:	9d 1d       	adc	r25, r13
    1850:	9e 87       	std	Y+14, r25	; 0x0e
    1852:	8d 87       	std	Y+13, r24	; 0x0d
    1854:	dc 01       	movw	r26, r24
    1856:	1c 92       	st	X, r1
			length_ = new_length;
			delete[] old;
    1858:	a1 14       	cp	r10, r1
    185a:	b1 04       	cpc	r11, r1
    185c:	19 f0       	breq	.+6      	; 0x1864 <_ZN10Connection16close_connectionEN8Standard6stringE+0xfc>
    185e:	c5 01       	movw	r24, r10
    1860:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    1864:	21 14       	cp	r2, r1
    1866:	31 04       	cpc	r3, r1
    1868:	19 f0       	breq	.+6      	; 0x1870 <_ZN10Connection16close_connectionEN8Standard6stringE+0x108>
    186a:	c1 01       	movw	r24, r2
    186c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    1870:	f8 01       	movw	r30, r16
    1872:	40 80       	ld	r4, Z
    1874:	51 80       	ldd	r5, Z+1	; 0x01
    1876:	62 80       	ldd	r6, Z+2	; 0x02
    1878:	73 80       	ldd	r7, Z+3	; 0x03
    187a:	4c 0c       	add	r4, r12
    187c:	5d 1c       	adc	r5, r13
    187e:	6e 1c       	adc	r6, r14
    1880:	7f 1c       	adc	r7, r15
			char *old = chars_;
			chars_ = new char[new_length + 1];
    1882:	12 01       	movw	r2, r4
    1884:	ff ef       	ldi	r31, 0xFF	; 255
    1886:	2f 1a       	sub	r2, r31
    1888:	3f 0a       	sbc	r3, r31
    188a:	c1 01       	movw	r24, r2
    188c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1890:	5c 01       	movw	r10, r24
			unsigned long i = 0;
			while (i < length_)
    1892:	c1 14       	cp	r12, r1
    1894:	d1 04       	cpc	r13, r1
    1896:	e1 04       	cpc	r14, r1
    1898:	f1 04       	cpc	r15, r1
    189a:	31 f4       	brne	.+12     	; 0x18a8 <_ZN10Connection16close_connectionEN8Standard6stringE+0x140>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    189c:	c4 14       	cp	r12, r4
    189e:	d5 04       	cpc	r13, r5
    18a0:	e6 04       	cpc	r14, r6
    18a2:	f7 04       	cpc	r15, r7
    18a4:	58 f0       	brcs	.+22     	; 0x18bc <_ZN10Connection16close_connectionEN8Standard6stringE+0x154>
    18a6:	24 c0       	rjmp	.+72     	; 0x18f0 <_ZN10Connection16close_connectionEN8Standard6stringE+0x188>
    18a8:	f4 01       	movw	r30, r8
    18aa:	dc 01       	movw	r26, r24
    18ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    18ae:	3e 85       	ldd	r19, Y+14	; 0x0e
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
    18b0:	81 91       	ld	r24, Z+
    18b2:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    18b4:	2e 17       	cp	r18, r30
    18b6:	3f 07       	cpc	r19, r31
    18b8:	d9 f7       	brne	.-10     	; 0x18b0 <_ZN10Connection16close_connectionEN8Standard6stringE+0x148>
    18ba:	f0 cf       	rjmp	.-32     	; 0x189c <_ZN10Connection16close_connectionEN8Standard6stringE+0x134>
    18bc:	f5 01       	movw	r30, r10
    18be:	ec 0d       	add	r30, r12
    18c0:	fd 1d       	adc	r31, r13
    18c2:	b5 01       	movw	r22, r10
    18c4:	64 0d       	add	r22, r4
    18c6:	75 1d       	adc	r23, r5
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    18c8:	49 89       	ldd	r20, Y+17	; 0x11
    18ca:	5a 89       	ldd	r21, Y+18	; 0x12
    18cc:	4a 0d       	add	r20, r10
    18ce:	5b 1d       	adc	r21, r11
    18d0:	cf 01       	movw	r24, r30
    18d2:	84 1b       	sub	r24, r20
    18d4:	95 0b       	sbc	r25, r21
    18d6:	d8 01       	movw	r26, r16
    18d8:	14 96       	adiw	r26, 0x04	; 4
    18da:	2d 91       	ld	r18, X+
    18dc:	3c 91       	ld	r19, X
    18de:	15 97       	sbiw	r26, 0x05	; 5
    18e0:	d9 01       	movw	r26, r18
    18e2:	a8 0f       	add	r26, r24
    18e4:	b9 1f       	adc	r27, r25
    18e6:	8c 91       	ld	r24, X
    18e8:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    18ea:	6e 17       	cp	r22, r30
    18ec:	7f 07       	cpc	r23, r31
    18ee:	81 f7       	brne	.-32     	; 0x18d0 <_ZN10Connection16close_connectionEN8Standard6stringE+0x168>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    18f0:	f5 01       	movw	r30, r10
    18f2:	e4 0d       	add	r30, r4
    18f4:	f5 1d       	adc	r31, r5
    18f6:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
    18f8:	81 14       	cp	r8, r1
    18fa:	91 04       	cpc	r9, r1
    18fc:	19 f0       	breq	.+6      	; 0x1904 <_ZN10Connection16close_connectionEN8Standard6stringE+0x19c>
    18fe:	c4 01       	movw	r24, r8
    1900:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    1904:	49 82       	std	Y+1, r4	; 0x01
    1906:	5a 82       	std	Y+2, r5	; 0x02
    1908:	6b 82       	std	Y+3, r6	; 0x03
    190a:	7c 82       	std	Y+4, r7	; 0x04
			chars_ = new char[other.length_ + 1];
    190c:	c1 01       	movw	r24, r2
    190e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, other.chars_, other.length_);
    1916:	a2 01       	movw	r20, r4
    1918:	b5 01       	movw	r22, r10
    191a:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
	string s_mode = close_connection_command;
	s_mode += "=";
	s_mode += client_id;
	send(s_mode);
    191e:	ae 01       	movw	r20, r28
    1920:	4f 5f       	subi	r20, 0xFF	; 255
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	6f 85       	ldd	r22, Y+15	; 0x0f
    1926:	78 89       	ldd	r23, Y+16	; 0x10
    1928:	ce 01       	movw	r24, r28
    192a:	07 96       	adiw	r24, 0x07	; 7
    192c:	0e 94 33 03 	call	0x666	; 0x666 <_ZN10Connection4sendEN8Standard6stringE>
		}
		~string()
		{
			delete[] chars_;
    1930:	8b 85       	ldd	r24, Y+11	; 0x0b
    1932:	9c 85       	ldd	r25, Y+12	; 0x0c
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	11 f0       	breq	.+4      	; 0x193c <_ZN10Connection16close_connectionEN8Standard6stringE+0x1d4>
    1938:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	11 f0       	breq	.+4      	; 0x1948 <_ZN10Connection16close_connectionEN8Standard6stringE+0x1e0>
    1944:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    1948:	a1 14       	cp	r10, r1
    194a:	b1 04       	cpc	r11, r1
    194c:	19 f0       	breq	.+6      	; 0x1954 <_ZN10Connection16close_connectionEN8Standard6stringE+0x1ec>
    194e:	c5 01       	movw	r24, r10
    1950:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
}
    1954:	62 96       	adiw	r28, 0x12	; 18
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	cf 90       	pop	r12
    1970:	bf 90       	pop	r11
    1972:	af 90       	pop	r10
    1974:	9f 90       	pop	r9
    1976:	8f 90       	pop	r8
    1978:	7f 90       	pop	r7
    197a:	6f 90       	pop	r6
    197c:	5f 90       	pop	r5
    197e:	4f 90       	pop	r4
    1980:	3f 90       	pop	r3
    1982:	2f 90       	pop	r2
    1984:	08 95       	ret

00001986 <_ZN10Connection14data_availableEv>:
bool Connection::data_available()
{
	return Serial1_Available();
    1986:	0c 94 03 01 	jmp	0x206	; 0x206 <_Z17Serial1_Availablev>
    198a:	08 95       	ret

0000198c <_ZN8Standard12parse_singleIiEENS_6stringET_>:
			return new_str;
		}
	};
	int hash_code(const string &i);
	template <typename T>
	string parse_single(T numb)
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	ec 01       	movw	r28, r24
	{
		switch(numb)
    1992:	6a 30       	cpi	r22, 0x0A	; 10
    1994:	71 05       	cpc	r23, r1
    1996:	08 f0       	brcs	.+2      	; 0x199a <_ZN8Standard12parse_singleIiEENS_6stringET_+0xe>
    1998:	01 c1       	rjmp	.+514    	; 0x1b9c <_ZN8Standard12parse_singleIiEENS_6stringET_+0x210>
    199a:	fb 01       	movw	r30, r22
    199c:	88 27       	eor	r24, r24
    199e:	ee 58       	subi	r30, 0x8E	; 142
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	8f 4f       	sbci	r24, 0xFF	; 255
    19a4:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__tablejump2__>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    19a8:	18 82       	st	Y, r1
    19aa:	19 82       	std	Y+1, r1	; 0x01
    19ac:	1a 82       	std	Y+2, r1	; 0x02
    19ae:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    19b0:	8e e0       	ldi	r24, 0x0E	; 14
    19b2:	92 e0       	ldi	r25, 0x02	; 2
    19b4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    19b8:	68 83       	st	Y, r22
    19ba:	79 83       	std	Y+1, r23	; 0x01
    19bc:	8a 83       	std	Y+2, r24	; 0x02
    19be:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    19c0:	cb 01       	movw	r24, r22
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    19c8:	9d 83       	std	Y+5, r25	; 0x05
    19ca:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    19cc:	48 81       	ld	r20, Y
    19ce:	59 81       	ldd	r21, Y+1	; 0x01
    19d0:	6e e0       	ldi	r22, 0x0E	; 14
    19d2:	72 e0       	ldi	r23, 0x02	; 2
    19d4:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    19d8:	f9 c0       	rjmp	.+498    	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    19da:	18 82       	st	Y, r1
    19dc:	19 82       	std	Y+1, r1	; 0x01
    19de:	1a 82       	std	Y+2, r1	; 0x02
    19e0:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    19e2:	8b e4       	ldi	r24, 0x4B	; 75
    19e4:	92 e0       	ldi	r25, 0x02	; 2
    19e6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    19ea:	68 83       	st	Y, r22
    19ec:	79 83       	std	Y+1, r23	; 0x01
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    19f2:	cb 01       	movw	r24, r22
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    19fa:	9d 83       	std	Y+5, r25	; 0x05
    19fc:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    19fe:	48 81       	ld	r20, Y
    1a00:	59 81       	ldd	r21, Y+1	; 0x01
    1a02:	6b e4       	ldi	r22, 0x4B	; 75
    1a04:	72 e0       	ldi	r23, 0x02	; 2
    1a06:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1a0a:	e0 c0       	rjmp	.+448    	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1a0c:	18 82       	st	Y, r1
    1a0e:	19 82       	std	Y+1, r1	; 0x01
    1a10:	1a 82       	std	Y+2, r1	; 0x02
    1a12:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1a14:	8d e4       	ldi	r24, 0x4D	; 77
    1a16:	92 e0       	ldi	r25, 0x02	; 2
    1a18:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1a1c:	68 83       	st	Y, r22
    1a1e:	79 83       	std	Y+1, r23	; 0x01
    1a20:	8a 83       	std	Y+2, r24	; 0x02
    1a22:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1a24:	cb 01       	movw	r24, r22
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1a2c:	9d 83       	std	Y+5, r25	; 0x05
    1a2e:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1a30:	48 81       	ld	r20, Y
    1a32:	59 81       	ldd	r21, Y+1	; 0x01
    1a34:	6d e4       	ldi	r22, 0x4D	; 77
    1a36:	72 e0       	ldi	r23, 0x02	; 2
    1a38:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1a3c:	c7 c0       	rjmp	.+398    	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1a3e:	18 82       	st	Y, r1
    1a40:	19 82       	std	Y+1, r1	; 0x01
    1a42:	1a 82       	std	Y+2, r1	; 0x02
    1a44:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1a46:	8f e4       	ldi	r24, 0x4F	; 79
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1a4e:	68 83       	st	Y, r22
    1a50:	79 83       	std	Y+1, r23	; 0x01
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    1a54:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1a56:	cb 01       	movw	r24, r22
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1a5e:	9d 83       	std	Y+5, r25	; 0x05
    1a60:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1a62:	48 81       	ld	r20, Y
    1a64:	59 81       	ldd	r21, Y+1	; 0x01
    1a66:	6f e4       	ldi	r22, 0x4F	; 79
    1a68:	72 e0       	ldi	r23, 0x02	; 2
    1a6a:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1a6e:	ae c0       	rjmp	.+348    	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1a70:	18 82       	st	Y, r1
    1a72:	19 82       	std	Y+1, r1	; 0x01
    1a74:	1a 82       	std	Y+2, r1	; 0x02
    1a76:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1a78:	81 e5       	ldi	r24, 0x51	; 81
    1a7a:	92 e0       	ldi	r25, 0x02	; 2
    1a7c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1a80:	68 83       	st	Y, r22
    1a82:	79 83       	std	Y+1, r23	; 0x01
    1a84:	8a 83       	std	Y+2, r24	; 0x02
    1a86:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1a88:	cb 01       	movw	r24, r22
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1a90:	9d 83       	std	Y+5, r25	; 0x05
    1a92:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1a94:	48 81       	ld	r20, Y
    1a96:	59 81       	ldd	r21, Y+1	; 0x01
    1a98:	61 e5       	ldi	r22, 0x51	; 81
    1a9a:	72 e0       	ldi	r23, 0x02	; 2
    1a9c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1aa0:	95 c0       	rjmp	.+298    	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1aa2:	18 82       	st	Y, r1
    1aa4:	19 82       	std	Y+1, r1	; 0x01
    1aa6:	1a 82       	std	Y+2, r1	; 0x02
    1aa8:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1aaa:	83 e5       	ldi	r24, 0x53	; 83
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1ab2:	68 83       	st	Y, r22
    1ab4:	79 83       	std	Y+1, r23	; 0x01
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
    1ab8:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1aba:	cb 01       	movw	r24, r22
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1ac2:	9d 83       	std	Y+5, r25	; 0x05
    1ac4:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1ac6:	48 81       	ld	r20, Y
    1ac8:	59 81       	ldd	r21, Y+1	; 0x01
    1aca:	63 e5       	ldi	r22, 0x53	; 83
    1acc:	72 e0       	ldi	r23, 0x02	; 2
    1ace:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1ad2:	7c c0       	rjmp	.+248    	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1ad4:	18 82       	st	Y, r1
    1ad6:	19 82       	std	Y+1, r1	; 0x01
    1ad8:	1a 82       	std	Y+2, r1	; 0x02
    1ada:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1adc:	85 e5       	ldi	r24, 0x55	; 85
    1ade:	92 e0       	ldi	r25, 0x02	; 2
    1ae0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1ae4:	68 83       	st	Y, r22
    1ae6:	79 83       	std	Y+1, r23	; 0x01
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
    1aea:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1aec:	cb 01       	movw	r24, r22
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1af4:	9d 83       	std	Y+5, r25	; 0x05
    1af6:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1af8:	48 81       	ld	r20, Y
    1afa:	59 81       	ldd	r21, Y+1	; 0x01
    1afc:	65 e5       	ldi	r22, 0x55	; 85
    1afe:	72 e0       	ldi	r23, 0x02	; 2
    1b00:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1b04:	63 c0       	rjmp	.+198    	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1b06:	18 82       	st	Y, r1
    1b08:	19 82       	std	Y+1, r1	; 0x01
    1b0a:	1a 82       	std	Y+2, r1	; 0x02
    1b0c:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1b0e:	87 e5       	ldi	r24, 0x57	; 87
    1b10:	92 e0       	ldi	r25, 0x02	; 2
    1b12:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1b16:	68 83       	st	Y, r22
    1b18:	79 83       	std	Y+1, r23	; 0x01
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    1b1c:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1b1e:	cb 01       	movw	r24, r22
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1b26:	9d 83       	std	Y+5, r25	; 0x05
    1b28:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1b2a:	48 81       	ld	r20, Y
    1b2c:	59 81       	ldd	r21, Y+1	; 0x01
    1b2e:	67 e5       	ldi	r22, 0x57	; 87
    1b30:	72 e0       	ldi	r23, 0x02	; 2
    1b32:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1b36:	4a c0       	rjmp	.+148    	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1b38:	18 82       	st	Y, r1
    1b3a:	19 82       	std	Y+1, r1	; 0x01
    1b3c:	1a 82       	std	Y+2, r1	; 0x02
    1b3e:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1b40:	89 e5       	ldi	r24, 0x59	; 89
    1b42:	92 e0       	ldi	r25, 0x02	; 2
    1b44:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1b48:	68 83       	st	Y, r22
    1b4a:	79 83       	std	Y+1, r23	; 0x01
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
    1b4e:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1b50:	cb 01       	movw	r24, r22
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1b58:	9d 83       	std	Y+5, r25	; 0x05
    1b5a:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1b5c:	48 81       	ld	r20, Y
    1b5e:	59 81       	ldd	r21, Y+1	; 0x01
    1b60:	69 e5       	ldi	r22, 0x59	; 89
    1b62:	72 e0       	ldi	r23, 0x02	; 2
    1b64:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1b68:	31 c0       	rjmp	.+98     	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1b6a:	18 82       	st	Y, r1
    1b6c:	19 82       	std	Y+1, r1	; 0x01
    1b6e:	1a 82       	std	Y+2, r1	; 0x02
    1b70:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1b72:	8b e5       	ldi	r24, 0x5B	; 91
    1b74:	92 e0       	ldi	r25, 0x02	; 2
    1b76:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1b7a:	68 83       	st	Y, r22
    1b7c:	79 83       	std	Y+1, r23	; 0x01
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
    1b80:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1b82:	cb 01       	movw	r24, r22
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1b8a:	9d 83       	std	Y+5, r25	; 0x05
    1b8c:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1b8e:	48 81       	ld	r20, Y
    1b90:	59 81       	ldd	r21, Y+1	; 0x01
    1b92:	6b e5       	ldi	r22, 0x5B	; 91
    1b94:	72 e0       	ldi	r23, 0x02	; 2
    1b96:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    1b9a:	18 c0       	rjmp	.+48     	; 0x1bcc <_ZN8Standard12parse_singleIiEENS_6stringET_+0x240>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    1b9c:	18 82       	st	Y, r1
    1b9e:	19 82       	std	Y+1, r1	; 0x01
    1ba0:	1a 82       	std	Y+2, r1	; 0x02
    1ba2:	1b 82       	std	Y+3, r1	; 0x03
			length_ = string_length(text);
    1ba4:	8e e0       	ldi	r24, 0x0E	; 14
    1ba6:	92 e0       	ldi	r25, 0x02	; 2
    1ba8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1bac:	68 83       	st	Y, r22
    1bae:	79 83       	std	Y+1, r23	; 0x01
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
    1bb2:	9b 83       	std	Y+3, r25	; 0x03
			chars_ = new char[length_ + 1];
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1bbc:	9d 83       	std	Y+5, r25	; 0x05
    1bbe:	8c 83       	std	Y+4, r24	; 0x04
			string_copy(chars_, text, length_);
    1bc0:	48 81       	ld	r20, Y
    1bc2:	59 81       	ldd	r21, Y+1	; 0x01
    1bc4:	6e e0       	ldi	r22, 0x0E	; 14
    1bc6:	72 e0       	ldi	r23, 0x02	; 2
    1bc8:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			case 7: return "7";
			case 8: return "8";
			case 9: return "9";
			default: return "0";
		}
	}
    1bcc:	ce 01       	movw	r24, r28
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <_ZN8Standard9parse_intIiEENS_6stringET_>:
	
	template <typename T>
	string parse_int(T value)
    1bd4:	2f 92       	push	r2
    1bd6:	3f 92       	push	r3
    1bd8:	4f 92       	push	r4
    1bda:	5f 92       	push	r5
    1bdc:	6f 92       	push	r6
    1bde:	7f 92       	push	r7
    1be0:	8f 92       	push	r8
    1be2:	9f 92       	push	r9
    1be4:	af 92       	push	r10
    1be6:	bf 92       	push	r11
    1be8:	cf 92       	push	r12
    1bea:	df 92       	push	r13
    1bec:	ef 92       	push	r14
    1bee:	ff 92       	push	r15
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	66 97       	sbiw	r28, 0x16	; 22
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	1c 01       	movw	r2, r24
    1c0a:	7e 87       	std	Y+14, r23	; 0x0e
    1c0c:	6d 87       	std	Y+13, r22	; 0x0d
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1c0e:	80 e6       	ldi	r24, 0x60	; 96
    1c10:	92 e0       	ldi	r25, 0x02	; 2
    1c12:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1c16:	2b 01       	movw	r4, r22
    1c18:	3c 01       	movw	r6, r24
			chars_ = new char[length_ + 1];
    1c1a:	7b 01       	movw	r14, r22
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1c24:	6c 01       	movw	r12, r24
			string_copy(chars_, text, length_);
    1c26:	a2 01       	movw	r20, r4
    1c28:	60 e6       	ldi	r22, 0x60	; 96
    1c2a:	72 e0       	ldi	r23, 0x02	; 2
    1c2c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1c30:	80 e6       	ldi	r24, 0x60	; 96
    1c32:	92 e0       	ldi	r25, 0x02	; 2
    1c34:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1c38:	6f 87       	std	Y+15, r22	; 0x0f
    1c3a:	78 8b       	std	Y+16, r23	; 0x10
    1c3c:	89 8b       	std	Y+17, r24	; 0x11
    1c3e:	9a 8b       	std	Y+18, r25	; 0x12
			chars_ = new char[length_ + 1];
    1c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c42:	98 89       	ldd	r25, Y+16	; 0x10
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
			string_copy(chars_, text, length_);
    1c4e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c50:	58 89       	ldd	r21, Y+16	; 0x10
    1c52:	60 e6       	ldi	r22, 0x60	; 96
    1c54:	72 e0       	ldi	r23, 0x02	; 2
    1c56:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
	string parse_int(T value)
	{
		T number = value;
		string res ="";
		string prefix = "";
		if(number < 0)
    1c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5e:	99 23       	and	r25, r25
    1c60:	0c f0       	brlt	.+2      	; 0x1c64 <_ZN8Standard9parse_intIiEENS_6stringET_+0x90>
    1c62:	47 c0       	rjmp	.+142    	; 0x1cf2 <_ZN8Standard9parse_intIiEENS_6stringET_+0x11e>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1c64:	8d e5       	ldi	r24, 0x5D	; 93
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1c6c:	6f 87       	std	Y+15, r22	; 0x0f
    1c6e:	78 8b       	std	Y+16, r23	; 0x10
    1c70:	89 8b       	std	Y+17, r24	; 0x11
    1c72:	9a 8b       	std	Y+18, r25	; 0x12
			chars_ = new char[length_ + 1];
    1c74:	af 85       	ldd	r26, Y+15	; 0x0f
    1c76:	b8 89       	ldd	r27, Y+16	; 0x10
    1c78:	be 8b       	std	Y+22, r27	; 0x16
    1c7a:	ad 8b       	std	Y+21, r26	; 0x15
    1c7c:	8d 01       	movw	r16, r26
    1c7e:	0f 5f       	subi	r16, 0xFF	; 255
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	c8 01       	movw	r24, r16
    1c84:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1c88:	4c 01       	movw	r8, r24
			string_copy(chars_, text, length_);
    1c8a:	af 84       	ldd	r10, Y+15	; 0x0f
    1c8c:	b8 88       	ldd	r11, Y+16	; 0x10
    1c8e:	a5 01       	movw	r20, r10
    1c90:	6d e5       	ldi	r22, 0x5D	; 93
    1c92:	72 e0       	ldi	r23, 0x02	; 2
    1c94:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			length_ = new_length;
			delete[] old;
		}
		string operator=(const string &other)
		{
			delete[] chars_;
    1c98:	eb 89       	ldd	r30, Y+19	; 0x13
    1c9a:	fc 89       	ldd	r31, Y+20	; 0x14
    1c9c:	30 97       	sbiw	r30, 0x00	; 0
    1c9e:	19 f0       	breq	.+6      	; 0x1ca6 <_ZN8Standard9parse_intIiEENS_6stringET_+0xd2>
    1ca0:	cf 01       	movw	r24, r30
    1ca2:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_];
    1ca6:	8d 89       	ldd	r24, Y+21	; 0x15
    1ca8:	9e 89       	ldd	r25, Y+22	; 0x16
    1caa:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1cae:	9c 8b       	std	Y+20, r25	; 0x14
    1cb0:	8b 8b       	std	Y+19, r24	; 0x13
			length_ = other.length_;
			string_copy(chars_, other.chars_, length_);
    1cb2:	a5 01       	movw	r20, r10
    1cb4:	b4 01       	movw	r22, r8
    1cb6:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
			chars_ = new char[other.length_ + 1];
    1cba:	c8 01       	movw	r24, r16
    1cbc:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1cc0:	8c 01       	movw	r16, r24
			string_copy(chars_, other.chars_, other.length_);
    1cc2:	a5 01       	movw	r20, r10
    1cc4:	6b 89       	ldd	r22, Y+19	; 0x13
    1cc6:	7c 89       	ldd	r23, Y+20	; 0x14
    1cc8:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		}
		~string()
		{
			delete[] chars_;
    1ccc:	01 15       	cp	r16, r1
    1cce:	11 05       	cpc	r17, r1
    1cd0:	19 f0       	breq	.+6      	; 0x1cd8 <_ZN8Standard9parse_intIiEENS_6stringET_+0x104>
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    1cd8:	81 14       	cp	r8, r1
    1cda:	91 04       	cpc	r9, r1
    1cdc:	19 f0       	breq	.+6      	; 0x1ce4 <_ZN8Standard9parse_intIiEENS_6stringET_+0x110>
    1cde:	c4 01       	movw	r24, r8
    1ce0:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
		string res ="";
		string prefix = "";
		if(number < 0)
		{
			prefix = "-";
			number = number * -1;
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	91 95       	neg	r25
    1cea:	81 95       	neg	r24
    1cec:	91 09       	sbc	r25, r1
    1cee:	9e 87       	std	Y+14, r25	; 0x0e
    1cf0:	8d 87       	std	Y+13, r24	; 0x0d
			
		}
		if(number < 10)
    1cf2:	ad 85       	ldd	r26, Y+13	; 0x0d
    1cf4:	be 85       	ldd	r27, Y+14	; 0x0e
    1cf6:	aa 30       	cpi	r26, 0x0A	; 10
    1cf8:	b1 05       	cpc	r27, r1
    1cfa:	2c f0       	brlt	.+10     	; 0x1d06 <_ZN8Standard9parse_intIiEENS_6stringET_+0x132>
		{
			res += parse_single(number);
		} else
		{
			int buffer = number;
			while (buffer > 0)
    1cfc:	1a 16       	cp	r1, r26
    1cfe:	1b 06       	cpc	r1, r27
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <_ZN8Standard9parse_intIiEENS_6stringET_+0x130>
    1d02:	b9 c0       	rjmp	.+370    	; 0x1e76 <_ZN8Standard9parse_intIiEENS_6stringET_+0x2a2>
    1d04:	53 c0       	rjmp	.+166    	; 0x1dac <_ZN8Standard9parse_intIiEENS_6stringET_+0x1d8>
			number = number * -1;
			
		}
		if(number < 10)
		{
			res += parse_single(number);
    1d06:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d08:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	07 96       	adiw	r24, 0x07	; 7
    1d0e:	3e de       	rcall	.-900    	; 0x198c <_ZN8Standard12parse_singleIiEENS_6stringET_>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    1d10:	8f 80       	ldd	r8, Y+7	; 0x07
    1d12:	98 84       	ldd	r9, Y+8	; 0x08
    1d14:	a9 84       	ldd	r10, Y+9	; 0x09
    1d16:	ba 84       	ldd	r11, Y+10	; 0x0a
    1d18:	84 0c       	add	r8, r4
    1d1a:	95 1c       	adc	r9, r5
    1d1c:	a6 1c       	adc	r10, r6
    1d1e:	b7 1c       	adc	r11, r7
			char *old = chars_;
			chars_ = new char[new_length + 1];
    1d20:	9e 86       	std	Y+14, r9	; 0x0e
    1d22:	8d 86       	std	Y+13, r8	; 0x0d
    1d24:	c4 01       	movw	r24, r8
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1d2c:	8c 01       	movw	r16, r24
			unsigned long i = 0;
			while (i < length_)
    1d2e:	41 14       	cp	r4, r1
    1d30:	51 04       	cpc	r5, r1
    1d32:	61 04       	cpc	r6, r1
    1d34:	71 04       	cpc	r7, r1
    1d36:	31 f4       	brne	.+12     	; 0x1d44 <_ZN8Standard9parse_intIiEENS_6stringET_+0x170>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    1d38:	48 14       	cp	r4, r8
    1d3a:	59 04       	cpc	r5, r9
    1d3c:	6a 04       	cpc	r6, r10
    1d3e:	7b 04       	cpc	r7, r11
    1d40:	60 f0       	brcs	.+24     	; 0x1d5a <_ZN8Standard9parse_intIiEENS_6stringET_+0x186>
    1d42:	21 c0       	rjmp	.+66     	; 0x1d86 <_ZN8Standard9parse_intIiEENS_6stringET_+0x1b2>
    1d44:	f6 01       	movw	r30, r12
    1d46:	dc 01       	movw	r26, r24
    1d48:	96 01       	movw	r18, r12
    1d4a:	2e 0d       	add	r18, r14
    1d4c:	3f 1d       	adc	r19, r15
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
    1d4e:	81 91       	ld	r24, Z+
    1d50:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    1d52:	e2 17       	cp	r30, r18
    1d54:	f3 07       	cpc	r31, r19
    1d56:	d9 f7       	brne	.-10     	; 0x1d4e <_ZN8Standard9parse_intIiEENS_6stringET_+0x17a>
    1d58:	ef cf       	rjmp	.-34     	; 0x1d38 <_ZN8Standard9parse_intIiEENS_6stringET_+0x164>
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	e4 0d       	add	r30, r4
    1d5e:	f5 1d       	adc	r31, r5
    1d60:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d62:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d64:	60 0f       	add	r22, r16
    1d66:	71 1f       	adc	r23, r17
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    1d68:	a8 01       	movw	r20, r16
    1d6a:	4e 0d       	add	r20, r14
    1d6c:	5f 1d       	adc	r21, r15
    1d6e:	cf 01       	movw	r24, r30
    1d70:	84 1b       	sub	r24, r20
    1d72:	95 0b       	sbc	r25, r21
    1d74:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d76:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d78:	a8 0f       	add	r26, r24
    1d7a:	b9 1f       	adc	r27, r25
    1d7c:	8c 91       	ld	r24, X
    1d7e:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    1d80:	e6 17       	cp	r30, r22
    1d82:	f7 07       	cpc	r31, r23
    1d84:	a1 f7       	brne	.-24     	; 0x1d6e <_ZN8Standard9parse_intIiEENS_6stringET_+0x19a>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    1d86:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d88:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d8a:	e0 0f       	add	r30, r16
    1d8c:	f1 1f       	adc	r31, r17
    1d8e:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
    1d90:	c1 14       	cp	r12, r1
    1d92:	d1 04       	cpc	r13, r1
    1d94:	19 f0       	breq	.+6      	; 0x1d9c <_ZN8Standard9parse_intIiEENS_6stringET_+0x1c8>
    1d96:	c6 01       	movw	r24, r12
    1d98:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    1d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <_ZN8Standard9parse_intIiEENS_6stringET_+0x1d2>
    1da4:	6b c0       	rjmp	.+214    	; 0x1e7c <_ZN8Standard9parse_intIiEENS_6stringET_+0x2a8>
    1da6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZdaPv>
    1daa:	68 c0       	rjmp	.+208    	; 0x1e7c <_ZN8Standard9parse_intIiEENS_6stringET_+0x2a8>
		} else
		{
			int buffer = number;
			while (buffer > 0)
			{
				res+=parse_single(buffer%10);
    1dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db0:	6a e0       	ldi	r22, 0x0A	; 10
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	0e 94 6f 1a 	call	0x34de	; 0x34de <__divmodhi4>
    1db8:	bc 01       	movw	r22, r24
    1dba:	ce 01       	movw	r24, r28
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	e6 dd       	rcall	.-1076   	; 0x198c <_ZN8Standard12parse_singleIiEENS_6stringET_>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    1dc0:	89 80       	ldd	r8, Y+1	; 0x01
    1dc2:	9a 80       	ldd	r9, Y+2	; 0x02
    1dc4:	ab 80       	ldd	r10, Y+3	; 0x03
    1dc6:	bc 80       	ldd	r11, Y+4	; 0x04
    1dc8:	84 0c       	add	r8, r4
    1dca:	95 1c       	adc	r9, r5
    1dcc:	a6 1c       	adc	r10, r6
    1dce:	b7 1c       	adc	r11, r7
			char *old = chars_;
			chars_ = new char[new_length + 1];
    1dd0:	74 01       	movw	r14, r8
    1dd2:	c4 01       	movw	r24, r8
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_Znaj>
    1dda:	8c 01       	movw	r16, r24
			unsigned long i = 0;
			while (i < length_)
    1ddc:	41 14       	cp	r4, r1
    1dde:	51 04       	cpc	r5, r1
    1de0:	61 04       	cpc	r6, r1
    1de2:	71 04       	cpc	r7, r1
    1de4:	59 f4       	brne	.+22     	; 0x1dfc <_ZN8Standard9parse_intIiEENS_6stringET_+0x228>
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
    1de6:	d3 01       	movw	r26, r6
    1de8:	c2 01       	movw	r24, r4
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <_ZN8Standard9parse_intIiEENS_6stringET_+0x21c>
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
    1dec:	d3 01       	movw	r26, r6
    1dee:	c2 01       	movw	r24, r4
			}
			while (i < new_length)
    1df0:	88 15       	cp	r24, r8
    1df2:	99 05       	cpc	r25, r9
    1df4:	aa 05       	cpc	r26, r10
    1df6:	bb 05       	cpc	r27, r11
    1df8:	60 f0       	brcs	.+24     	; 0x1e12 <_ZN8Standard9parse_intIiEENS_6stringET_+0x23e>
    1dfa:	1f c0       	rjmp	.+62     	; 0x1e3a <_ZN8Standard9parse_intIiEENS_6stringET_+0x266>
    1dfc:	f6 01       	movw	r30, r12
    1dfe:	dc 01       	movw	r26, r24
    1e00:	96 01       	movw	r18, r12
    1e02:	24 0d       	add	r18, r4
    1e04:	35 1d       	adc	r19, r5
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
    1e06:	81 91       	ld	r24, Z+
    1e08:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    1e0a:	2e 17       	cp	r18, r30
    1e0c:	3f 07       	cpc	r19, r31
    1e0e:	d9 f7       	brne	.-10     	; 0x1e06 <_ZN8Standard9parse_intIiEENS_6stringET_+0x232>
    1e10:	ed cf       	rjmp	.-38     	; 0x1dec <_ZN8Standard9parse_intIiEENS_6stringET_+0x218>
    1e12:	d8 01       	movw	r26, r16
    1e14:	a8 0f       	add	r26, r24
    1e16:	b9 1f       	adc	r27, r25
    1e18:	98 01       	movw	r18, r16
    1e1a:	2e 0d       	add	r18, r14
    1e1c:	3f 1d       	adc	r19, r15
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    1e1e:	40 0e       	add	r4, r16
    1e20:	51 1e       	adc	r5, r17
    1e22:	cd 01       	movw	r24, r26
    1e24:	84 19       	sub	r24, r4
    1e26:	95 09       	sbc	r25, r5
    1e28:	ed 81       	ldd	r30, Y+5	; 0x05
    1e2a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e2c:	e8 0f       	add	r30, r24
    1e2e:	f9 1f       	adc	r31, r25
    1e30:	80 81       	ld	r24, Z
    1e32:	8d 93       	st	X+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    1e34:	2a 17       	cp	r18, r26
    1e36:	3b 07       	cpc	r19, r27
    1e38:	a1 f7       	brne	.-24     	; 0x1e22 <_ZN8Standard9parse_intIiEENS_6stringET_+0x24e>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	ee 0d       	add	r30, r14
    1e3e:	ff 1d       	adc	r31, r15
    1e40:	10 82       	st	Z, r1
			length_ = new_length;
			delete[] old;
    1e42:	c1 14       	cp	r12, r1
    1e44:	d1 04       	cpc	r13, r1
    1e46:	11 f0       	breq	.+4      	; 0x1e4c <_ZN8Standard9parse_intIiEENS_6stringET_+0x278>
    1e48:	c6 01       	movw	r24, r12
    1e4a:	f2 d7       	rcall	.+4068   	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <_ZN8Standard9parse_intIiEENS_6stringET_+0x282>
    1e54:	ed d7       	rcall	.+4058   	; 0x2e30 <_ZdaPv>
		{
			int buffer = number;
			while (buffer > 0)
			{
				res+=parse_single(buffer%10);
				buffer/=10;
    1e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5a:	6a e0       	ldi	r22, 0x0A	; 10
    1e5c:	70 e0       	ldi	r23, 0x00	; 0
    1e5e:	0e 94 6f 1a 	call	0x34de	; 0x34de <__divmodhi4>
    1e62:	7e 87       	std	Y+14, r23	; 0x0e
    1e64:	6d 87       	std	Y+13, r22	; 0x0d
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    1e66:	24 01       	movw	r4, r8
    1e68:	35 01       	movw	r6, r10
			char *old = chars_;
			chars_ = new char[new_length + 1];
    1e6a:	68 01       	movw	r12, r16
		{
			res += parse_single(number);
		} else
		{
			int buffer = number;
			while (buffer > 0)
    1e6c:	16 16       	cp	r1, r22
    1e6e:	17 06       	cpc	r1, r23
    1e70:	0c f4       	brge	.+2      	; 0x1e74 <_ZN8Standard9parse_intIiEENS_6stringET_+0x2a0>
    1e72:	9c cf       	rjmp	.-200    	; 0x1dac <_ZN8Standard9parse_intIiEENS_6stringET_+0x1d8>
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <_ZN8Standard9parse_intIiEENS_6stringET_+0x2a8>
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
			chars_ = new char[length_ + 1];
    1e76:	86 01       	movw	r16, r12
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    1e78:	53 01       	movw	r10, r6
    1e7a:	42 01       	movw	r8, r4
    1e7c:	c8 01       	movw	r24, r16
    1e7e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    1e82:	6b 01       	movw	r12, r22
    1e84:	7c 01       	movw	r14, r24
			chars_ = new char[length_ + 1];
    1e86:	2b 01       	movw	r4, r22
    1e88:	bf ef       	ldi	r27, 0xFF	; 255
    1e8a:	4b 1a       	sub	r4, r27
    1e8c:	5b 0a       	sbc	r5, r27
    1e8e:	c2 01       	movw	r24, r4
    1e90:	cd d7       	rcall	.+3994   	; 0x2e2c <_Znaj>
    1e92:	3c 01       	movw	r6, r24
			string_copy(chars_, text, length_);
    1e94:	a6 01       	movw	r20, r12
    1e96:	b8 01       	movw	r22, r16
    1e98:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		}
		string reverse()
		{
			string new_str = string(chars_);
			unsigned long first =0;
			unsigned long last = length_ -1;
    1e9c:	e1 e0       	ldi	r30, 0x01	; 1
    1e9e:	8e 1a       	sub	r8, r30
    1ea0:	91 08       	sbc	r9, r1
    1ea2:	a1 08       	sbc	r10, r1
    1ea4:	b1 08       	sbc	r11, r1
			while (first != last && first <last)
    1ea6:	d1 f0       	breq	.+52     	; 0x1edc <_ZN8Standard9parse_intIiEENS_6stringET_+0x308>
    1ea8:	f4 01       	movw	r30, r8
    1eaa:	31 96       	adiw	r30, 0x01	; 1
    1eac:	e6 0d       	add	r30, r6
    1eae:	f7 1d       	adc	r31, r7
    1eb0:	d3 01       	movw	r26, r6
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	ba 01       	movw	r22, r20
			{
				char hold = new_str.chars_[last];
    1eb8:	82 91       	ld	r24, -Z
				new_str[last] = new_str[first];
    1eba:	9c 91       	ld	r25, X
    1ebc:	90 83       	st	Z, r25
				new_str[first] = hold;
    1ebe:	8d 93       	st	X+, r24
				++first;
    1ec0:	4f 5f       	subi	r20, 0xFF	; 255
    1ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec4:	6f 4f       	sbci	r22, 0xFF	; 255
    1ec6:	7f 4f       	sbci	r23, 0xFF	; 255
				--last;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	88 1a       	sub	r8, r24
    1ecc:	91 08       	sbc	r9, r1
    1ece:	a1 08       	sbc	r10, r1
    1ed0:	b1 08       	sbc	r11, r1
		string reverse()
		{
			string new_str = string(chars_);
			unsigned long first =0;
			unsigned long last = length_ -1;
			while (first != last && first <last)
    1ed2:	48 15       	cp	r20, r8
    1ed4:	59 05       	cpc	r21, r9
    1ed6:	6a 05       	cpc	r22, r10
    1ed8:	7b 05       	cpc	r23, r11
			length_ = new_length;
			delete[] old;
		}
		string operator=(const string &other)
		{
			delete[] chars_;
    1eda:	70 f3       	brcs	.-36     	; 0x1eb8 <_ZN8Standard9parse_intIiEENS_6stringET_+0x2e4>
    1edc:	01 15       	cp	r16, r1
    1ede:	11 05       	cpc	r17, r1
    1ee0:	11 f0       	breq	.+4      	; 0x1ee6 <_ZN8Standard9parse_intIiEENS_6stringET_+0x312>
    1ee2:	c8 01       	movw	r24, r16
			chars_ = new char[other.length_];
    1ee4:	a5 d7       	rcall	.+3914   	; 0x2e30 <_ZdaPv>
    1ee6:	c6 01       	movw	r24, r12
    1ee8:	a1 d7       	rcall	.+3906   	; 0x2e2c <_Znaj>
			length_ = other.length_;
			string_copy(chars_, other.chars_, length_);
    1eea:	5c 01       	movw	r10, r24
    1eec:	a6 01       	movw	r20, r12
    1eee:	b3 01       	movw	r22, r6
    1ef0:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
			chars_ = new char[other.length_ + 1];
    1ef4:	c2 01       	movw	r24, r4
    1ef6:	9a d7       	rcall	.+3892   	; 0x2e2c <_Znaj>
    1ef8:	8c 01       	movw	r16, r24
			string_copy(chars_, other.chars_, other.length_);
    1efa:	a6 01       	movw	r20, r12
    1efc:	b5 01       	movw	r22, r10
    1efe:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		}
		~string()
		{
			delete[] chars_;
    1f02:	01 15       	cp	r16, r1
    1f04:	11 05       	cpc	r17, r1
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <_ZN8Standard9parse_intIiEENS_6stringET_+0x338>
    1f08:	c8 01       	movw	r24, r16
    1f0a:	92 d7       	rcall	.+3876   	; 0x2e30 <_ZdaPv>
    1f0c:	61 14       	cp	r6, r1
    1f0e:	71 04       	cpc	r7, r1
    1f10:	11 f0       	breq	.+4      	; 0x1f16 <_ZN8Standard9parse_intIiEENS_6stringET_+0x342>
    1f12:	c3 01       	movw	r24, r6
    1f14:	8d d7       	rcall	.+3866   	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    1f16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f18:	98 89       	ldd	r25, Y+16	; 0x10
    1f1a:	a9 89       	ldd	r26, Y+17	; 0x11
    1f1c:	ba 89       	ldd	r27, Y+18	; 0x12
    1f1e:	f1 01       	movw	r30, r2
    1f20:	80 83       	st	Z, r24
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	a2 83       	std	Z+2, r26	; 0x02
			chars_ = new char[other.length_ + 1];
    1f26:	b3 83       	std	Z+3, r27	; 0x03
    1f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2a:	98 89       	ldd	r25, Y+16	; 0x10
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	7e d7       	rcall	.+3836   	; 0x2e2c <_Znaj>
    1f30:	d1 01       	movw	r26, r2
    1f32:	15 96       	adiw	r26, 0x05	; 5
    1f34:	9c 93       	st	X, r25
    1f36:	8e 93       	st	-X, r24
    1f38:	14 97       	sbiw	r26, 0x04	; 4
			string_copy(chars_, other.chars_, other.length_);
    1f3a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f3c:	58 89       	ldd	r21, Y+16	; 0x10
    1f3e:	6b 89       	ldd	r22, Y+19	; 0x13
    1f40:	7c 89       	ldd	r23, Y+20	; 0x14
    1f42:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    1f46:	f1 01       	movw	r30, r2
    1f48:	80 81       	ld	r24, Z
    1f4a:	91 81       	ldd	r25, Z+1	; 0x01
    1f4c:	a2 81       	ldd	r26, Z+2	; 0x02
    1f4e:	b3 81       	ldd	r27, Z+3	; 0x03
    1f50:	c8 0e       	add	r12, r24
    1f52:	d9 1e       	adc	r13, r25
    1f54:	ea 1e       	adc	r14, r26
    1f56:	fb 1e       	adc	r15, r27
			char *old = chars_;
    1f58:	04 81       	ldd	r16, Z+4	; 0x04
    1f5a:	15 81       	ldd	r17, Z+5	; 0x05
			chars_ = new char[new_length + 1];
    1f5c:	c6 01       	movw	r24, r12
    1f5e:	01 96       	adiw	r24, 0x01	; 1
    1f60:	65 d7       	rcall	.+3786   	; 0x2e2c <_Znaj>
    1f62:	d1 01       	movw	r26, r2
    1f64:	15 96       	adiw	r26, 0x05	; 5
    1f66:	9c 93       	st	X, r25
    1f68:	8e 93       	st	-X, r24
    1f6a:	14 97       	sbiw	r26, 0x04	; 4
			unsigned long i = 0;
			while (i < length_)
    1f6c:	8d 91       	ld	r24, X+
    1f6e:	9d 91       	ld	r25, X+
    1f70:	0d 90       	ld	r0, X+
    1f72:	bc 91       	ld	r27, X
    1f74:	a0 2d       	mov	r26, r0
    1f76:	89 2b       	or	r24, r25
    1f78:	8a 2b       	or	r24, r26
    1f7a:	8b 2b       	or	r24, r27
    1f7c:	49 f4       	brne	.+18     	; 0x1f90 <_ZN8Standard9parse_intIiEENS_6stringET_+0x3bc>
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	ba 01       	movw	r22, r20
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    1f84:	4c 15       	cp	r20, r12
    1f86:	5d 05       	cpc	r21, r13
    1f88:	6e 05       	cpc	r22, r14
    1f8a:	7f 05       	cpc	r23, r15
    1f8c:	00 f1       	brcs	.+64     	; 0x1fce <_ZN8Standard9parse_intIiEENS_6stringET_+0x3fa>
    1f8e:	39 c0       	rjmp	.+114    	; 0x2002 <_ZN8Standard9parse_intIiEENS_6stringET_+0x42e>
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	ba 01       	movw	r22, r20
    1f96:	98 01       	movw	r18, r16
			{
				chars_[i] = old[i];
    1f98:	f9 01       	movw	r30, r18
    1f9a:	81 91       	ld	r24, Z+
    1f9c:	9f 01       	movw	r18, r30
    1f9e:	d1 01       	movw	r26, r2
    1fa0:	14 96       	adiw	r26, 0x04	; 4
    1fa2:	ed 91       	ld	r30, X+
    1fa4:	fc 91       	ld	r31, X
    1fa6:	15 97       	sbiw	r26, 0x05	; 5
    1fa8:	df 01       	movw	r26, r30
    1faa:	a4 0f       	add	r26, r20
    1fac:	b5 1f       	adc	r27, r21
    1fae:	8c 93       	st	X, r24
				++i;
    1fb0:	4f 5f       	subi	r20, 0xFF	; 255
    1fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb4:	6f 4f       	sbci	r22, 0xFF	; 255
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    1fb8:	f1 01       	movw	r30, r2
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	a2 81       	ldd	r26, Z+2	; 0x02
    1fc0:	b3 81       	ldd	r27, Z+3	; 0x03
    1fc2:	48 17       	cp	r20, r24
    1fc4:	59 07       	cpc	r21, r25
    1fc6:	6a 07       	cpc	r22, r26
    1fc8:	7b 07       	cpc	r23, r27
    1fca:	30 f3       	brcs	.-52     	; 0x1f98 <_ZN8Standard9parse_intIiEENS_6stringET_+0x3c4>
    1fcc:	db cf       	rjmp	.-74     	; 0x1f84 <_ZN8Standard9parse_intIiEENS_6stringET_+0x3b0>
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    1fce:	d1 01       	movw	r26, r2
    1fd0:	8d 91       	ld	r24, X+
    1fd2:	9c 91       	ld	r25, X
    1fd4:	11 97       	sbiw	r26, 0x01	; 1
    1fd6:	fa 01       	movw	r30, r20
    1fd8:	e8 1b       	sub	r30, r24
    1fda:	f9 0b       	sbc	r31, r25
    1fdc:	ea 0d       	add	r30, r10
    1fde:	fb 1d       	adc	r31, r11
    1fe0:	80 81       	ld	r24, Z
    1fe2:	14 96       	adiw	r26, 0x04	; 4
    1fe4:	ed 91       	ld	r30, X+
    1fe6:	fc 91       	ld	r31, X
    1fe8:	15 97       	sbiw	r26, 0x05	; 5
    1fea:	e4 0f       	add	r30, r20
    1fec:	f5 1f       	adc	r31, r21
    1fee:	80 83       	st	Z, r24
				++i;
    1ff0:	4f 5f       	subi	r20, 0xFF	; 255
    1ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff4:	6f 4f       	sbci	r22, 0xFF	; 255
    1ff6:	7f 4f       	sbci	r23, 0xFF	; 255
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    1ff8:	c4 16       	cp	r12, r20
    1ffa:	d5 06       	cpc	r13, r21
    1ffc:	e6 06       	cpc	r14, r22
    1ffe:	f7 06       	cpc	r15, r23
    2000:	31 f7       	brne	.-52     	; 0x1fce <_ZN8Standard9parse_intIiEENS_6stringET_+0x3fa>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    2002:	d1 01       	movw	r26, r2
    2004:	14 96       	adiw	r26, 0x04	; 4
    2006:	ed 91       	ld	r30, X+
    2008:	fc 91       	ld	r31, X
    200a:	15 97       	sbiw	r26, 0x05	; 5
    200c:	ec 0d       	add	r30, r12
    200e:	fd 1d       	adc	r31, r13
    2010:	10 82       	st	Z, r1
			length_ = new_length;
    2012:	f1 01       	movw	r30, r2
    2014:	c0 82       	st	Z, r12
    2016:	d1 82       	std	Z+1, r13	; 0x01
    2018:	e2 82       	std	Z+2, r14	; 0x02
    201a:	f3 82       	std	Z+3, r15	; 0x03
			delete[] old;
    201c:	01 15       	cp	r16, r1
    201e:	11 05       	cpc	r17, r1
    2020:	11 f0       	breq	.+4      	; 0x2026 <_ZN8Standard9parse_intIiEENS_6stringET_+0x452>
    2022:	c8 01       	movw	r24, r16
    2024:	05 d7       	rcall	.+3594   	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    2026:	8b 89       	ldd	r24, Y+19	; 0x13
    2028:	9c 89       	ldd	r25, Y+20	; 0x14
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	09 f0       	breq	.+2      	; 0x2030 <_ZN8Standard9parse_intIiEENS_6stringET_+0x45c>
    202e:	00 d7       	rcall	.+3584   	; 0x2e30 <_ZdaPv>
    2030:	a1 14       	cp	r10, r1
    2032:	b1 04       	cpc	r11, r1
    2034:	11 f0       	breq	.+4      	; 0x203a <_ZN8Standard9parse_intIiEENS_6stringET_+0x466>
    2036:	c5 01       	movw	r24, r10
    2038:	fb d6       	rcall	.+3574   	; 0x2e30 <_ZdaPv>
		}
		res = res.reverse();
		string return_obj = prefix;
		return_obj += res;
		return return_obj;
	}
    203a:	c1 01       	movw	r24, r2
    203c:	66 96       	adiw	r28, 0x16	; 22
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	f8 94       	cli
    2042:	de bf       	out	0x3e, r29	; 62
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	cd bf       	out	0x3d, r28	; 61
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	df 90       	pop	r13
    2056:	cf 90       	pop	r12
    2058:	bf 90       	pop	r11
    205a:	af 90       	pop	r10
    205c:	9f 90       	pop	r9
    205e:	8f 90       	pop	r8
    2060:	7f 90       	pop	r7
    2062:	6f 90       	pop	r6
    2064:	5f 90       	pop	r5
    2066:	4f 90       	pop	r4
    2068:	3f 90       	pop	r3
    206a:	2f 90       	pop	r2
    206c:	08 95       	ret

0000206e <_ZN10Connection8SendDataEN8Standard6stringES1_>:
	if (data.find_first_of("OK"))
	return true;
	return false;
}
void Connection::SendData(const string id, const string response)
{
    206e:	2f 92       	push	r2
    2070:	3f 92       	push	r3
    2072:	4f 92       	push	r4
    2074:	5f 92       	push	r5
    2076:	6f 92       	push	r6
    2078:	7f 92       	push	r7
    207a:	8f 92       	push	r8
    207c:	9f 92       	push	r9
    207e:	af 92       	push	r10
    2080:	bf 92       	push	r11
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	ac 97       	sbiw	r28, 0x2c	; 44
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	9a a7       	std	Y+42, r25	; 0x2a
    20a4:	89 a7       	std	Y+41, r24	; 0x29
    20a6:	3b 01       	movw	r6, r22
    20a8:	5e a3       	std	Y+38, r21	; 0x26
    20aa:	4d a3       	std	Y+37, r20	; 0x25
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    20ac:	0a e5       	ldi	r16, 0x5A	; 90
    20ae:	13 e0       	ldi	r17, 0x03	; 3
    20b0:	d8 01       	movw	r26, r16
    20b2:	8d 90       	ld	r8, X+
    20b4:	9d 90       	ld	r9, X+
    20b6:	ad 90       	ld	r10, X+
    20b8:	bc 90       	ld	r11, X
			chars_ = new char[other.length_ + 1];
    20ba:	c4 01       	movw	r24, r8
    20bc:	01 96       	adiw	r24, 0x01	; 1
    20be:	b6 d6       	rcall	.+3436   	; 0x2e2c <_Znaj>
    20c0:	1c 01       	movw	r2, r24
			string_copy(chars_, other.chars_, other.length_);
    20c2:	f8 01       	movw	r30, r16
    20c4:	40 81       	ld	r20, Z
    20c6:	51 81       	ldd	r21, Z+1	; 0x01
    20c8:	64 81       	ldd	r22, Z+4	; 0x04
    20ca:	75 81       	ldd	r23, Z+5	; 0x05
    20cc:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    20d0:	89 e0       	ldi	r24, 0x09	; 9
    20d2:	92 e0       	ldi	r25, 0x02	; 2
    20d4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    20d8:	6b 01       	movw	r12, r22
    20da:	7c 01       	movw	r14, r24
			chars_ = new char[length_ + 1];
    20dc:	cb 01       	movw	r24, r22
    20de:	01 96       	adiw	r24, 0x01	; 1
    20e0:	a5 d6       	rcall	.+3402   	; 0x2e2c <_Znaj>
    20e2:	8c 01       	movw	r16, r24
			string_copy(chars_, text, length_);
    20e4:	a6 01       	movw	r20, r12
    20e6:	69 e0       	ldi	r22, 0x09	; 9
    20e8:	72 e0       	ldi	r23, 0x02	; 2
    20ea:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    20ee:	c8 0c       	add	r12, r8
    20f0:	d9 1c       	adc	r13, r9
    20f2:	ea 1c       	adc	r14, r10
    20f4:	fb 1c       	adc	r15, r11
			char *old = chars_;
			chars_ = new char[new_length + 1];
    20f6:	dc a6       	std	Y+44, r13	; 0x2c
    20f8:	cb a6       	std	Y+43, r12	; 0x2b
    20fa:	c6 01       	movw	r24, r12
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	96 d6       	rcall	.+3372   	; 0x2e2c <_Znaj>
    2100:	2c 01       	movw	r4, r24
			unsigned long i = 0;
			while (i < length_)
    2102:	81 14       	cp	r8, r1
    2104:	91 04       	cpc	r9, r1
    2106:	a1 04       	cpc	r10, r1
    2108:	b1 04       	cpc	r11, r1
    210a:	31 f4       	brne	.+12     	; 0x2118 <_ZN10Connection8SendDataEN8Standard6stringES1_+0xaa>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    210c:	8c 14       	cp	r8, r12
    210e:	9d 04       	cpc	r9, r13
    2110:	ae 04       	cpc	r10, r14
    2112:	bf 04       	cpc	r11, r15
    2114:	60 f0       	brcs	.+24     	; 0x212e <_ZN10Connection8SendDataEN8Standard6stringES1_+0xc0>
    2116:	17 c0       	rjmp	.+46     	; 0x2146 <_ZN10Connection8SendDataEN8Standard6stringES1_+0xd8>
    2118:	f1 01       	movw	r30, r2
    211a:	dc 01       	movw	r26, r24
    211c:	c1 01       	movw	r24, r2
    211e:	88 0d       	add	r24, r8
    2120:	99 1d       	adc	r25, r9
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
    2122:	21 91       	ld	r18, Z+
    2124:	2d 93       	st	X+, r18
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    2126:	e8 17       	cp	r30, r24
    2128:	f9 07       	cpc	r31, r25
    212a:	d9 f7       	brne	.-10     	; 0x2122 <_ZN10Connection8SendDataEN8Standard6stringES1_+0xb4>
    212c:	ef cf       	rjmp	.-34     	; 0x210c <_ZN10Connection8SendDataEN8Standard6stringES1_+0x9e>
    212e:	d8 01       	movw	r26, r16
    2130:	f2 01       	movw	r30, r4
    2132:	e8 0d       	add	r30, r8
    2134:	f9 1d       	adc	r31, r9
    2136:	92 01       	movw	r18, r4
    2138:	2c 0d       	add	r18, r12
    213a:	3d 1d       	adc	r19, r13
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    213c:	8d 91       	ld	r24, X+
    213e:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    2140:	e2 17       	cp	r30, r18
    2142:	f3 07       	cpc	r31, r19
    2144:	d9 f7       	brne	.-10     	; 0x213c <_ZN10Connection8SendDataEN8Standard6stringES1_+0xce>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    2146:	c2 01       	movw	r24, r4
    2148:	8c 0d       	add	r24, r12
    214a:	9d 1d       	adc	r25, r13
    214c:	98 a7       	std	Y+40, r25	; 0x28
    214e:	8f a3       	std	Y+39, r24	; 0x27
    2150:	dc 01       	movw	r26, r24
    2152:	1c 92       	st	X, r1
			length_ = new_length;
			delete[] old;
    2154:	21 14       	cp	r2, r1
    2156:	31 04       	cpc	r3, r1
    2158:	11 f0       	breq	.+4      	; 0x215e <_ZN10Connection8SendDataEN8Standard6stringES1_+0xf0>
    215a:	c1 01       	movw	r24, r2
    215c:	69 d6       	rcall	.+3282   	; 0x2e30 <_ZdaPv>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    215e:	01 15       	cp	r16, r1
    2160:	11 05       	cpc	r17, r1
    2162:	11 f0       	breq	.+4      	; 0x2168 <_ZN10Connection8SendDataEN8Standard6stringES1_+0xfa>
    2164:	c8 01       	movw	r24, r16
    2166:	64 d6       	rcall	.+3272   	; 0x2e30 <_ZdaPv>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    2168:	f3 01       	movw	r30, r6
    216a:	80 80       	ld	r8, Z
    216c:	91 80       	ldd	r9, Z+1	; 0x01
    216e:	a2 80       	ldd	r10, Z+2	; 0x02
    2170:	b3 80       	ldd	r11, Z+3	; 0x03
    2172:	8c 0c       	add	r8, r12
    2174:	9d 1c       	adc	r9, r13
    2176:	ae 1c       	adc	r10, r14
			char *old = chars_;
			chars_ = new char[new_length + 1];
    2178:	bf 1c       	adc	r11, r15
    217a:	c4 01       	movw	r24, r8
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	56 d6       	rcall	.+3244   	; 0x2e2c <_Znaj>
    2180:	8c 01       	movw	r16, r24
			unsigned long i = 0;
			while (i < length_)
    2182:	c1 14       	cp	r12, r1
    2184:	d1 04       	cpc	r13, r1
    2186:	e1 04       	cpc	r14, r1
    2188:	f1 04       	cpc	r15, r1
    218a:	31 f4       	brne	.+12     	; 0x2198 <_ZN10Connection8SendDataEN8Standard6stringES1_+0x12a>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    218c:	c8 14       	cp	r12, r8
    218e:	d9 04       	cpc	r13, r9
    2190:	ea 04       	cpc	r14, r10
    2192:	fb 04       	cpc	r15, r11
    2194:	58 f0       	brcs	.+22     	; 0x21ac <_ZN10Connection8SendDataEN8Standard6stringES1_+0x13e>
    2196:	24 c0       	rjmp	.+72     	; 0x21e0 <_ZN10Connection8SendDataEN8Standard6stringES1_+0x172>
    2198:	f2 01       	movw	r30, r4
    219a:	dc 01       	movw	r26, r24
    219c:	8f a1       	ldd	r24, Y+39	; 0x27
    219e:	98 a5       	ldd	r25, Y+40	; 0x28
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
    21a0:	21 91       	ld	r18, Z+
    21a2:	2d 93       	st	X+, r18
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    21a4:	e8 17       	cp	r30, r24
    21a6:	f9 07       	cpc	r31, r25
    21a8:	d9 f7       	brne	.-10     	; 0x21a0 <_ZN10Connection8SendDataEN8Standard6stringES1_+0x132>
    21aa:	f0 cf       	rjmp	.-32     	; 0x218c <_ZN10Connection8SendDataEN8Standard6stringES1_+0x11e>
    21ac:	f8 01       	movw	r30, r16
    21ae:	ec 0d       	add	r30, r12
    21b0:	fd 1d       	adc	r31, r13
    21b2:	b8 01       	movw	r22, r16
    21b4:	68 0d       	add	r22, r8
    21b6:	79 1d       	adc	r23, r9
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    21b8:	4b a5       	ldd	r20, Y+43	; 0x2b
    21ba:	5c a5       	ldd	r21, Y+44	; 0x2c
    21bc:	40 0f       	add	r20, r16
    21be:	51 1f       	adc	r21, r17
    21c0:	cf 01       	movw	r24, r30
    21c2:	84 1b       	sub	r24, r20
    21c4:	95 0b       	sbc	r25, r21
    21c6:	d3 01       	movw	r26, r6
    21c8:	14 96       	adiw	r26, 0x04	; 4
    21ca:	2d 91       	ld	r18, X+
    21cc:	3c 91       	ld	r19, X
    21ce:	15 97       	sbiw	r26, 0x05	; 5
    21d0:	d9 01       	movw	r26, r18
    21d2:	a8 0f       	add	r26, r24
    21d4:	b9 1f       	adc	r27, r25
    21d6:	8c 91       	ld	r24, X
    21d8:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    21da:	e6 17       	cp	r30, r22
    21dc:	f7 07       	cpc	r31, r23
    21de:	81 f7       	brne	.-32     	; 0x21c0 <_ZN10Connection8SendDataEN8Standard6stringES1_+0x152>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    21e0:	18 01       	movw	r2, r16
    21e2:	28 0c       	add	r2, r8
    21e4:	39 1c       	adc	r3, r9
    21e6:	f1 01       	movw	r30, r2
			length_ = new_length;
			delete[] old;
    21e8:	10 82       	st	Z, r1
    21ea:	41 14       	cp	r4, r1
    21ec:	51 04       	cpc	r5, r1
    21ee:	11 f0       	breq	.+4      	; 0x21f4 <_ZN10Connection8SendDataEN8Standard6stringES1_+0x186>
    21f0:	c2 01       	movw	r24, r4
    21f2:	1e d6       	rcall	.+3132   	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    21f4:	8f e5       	ldi	r24, 0x5F	; 95
    21f6:	92 e0       	ldi	r25, 0x02	; 2
    21f8:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    21fc:	6b 01       	movw	r12, r22
			chars_ = new char[length_ + 1];
    21fe:	7c 01       	movw	r14, r24
    2200:	cb 01       	movw	r24, r22
    2202:	01 96       	adiw	r24, 0x01	; 1
    2204:	13 d6       	rcall	.+3110   	; 0x2e2c <_Znaj>
    2206:	2c 01       	movw	r4, r24
			string_copy(chars_, text, length_);
    2208:	a6 01       	movw	r20, r12
    220a:	6f e5       	ldi	r22, 0x5F	; 95
    220c:	72 e0       	ldi	r23, 0x02	; 2
    220e:	0e 94 75 19 	call	0x32ea	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    2212:	c8 0c       	add	r12, r8
    2214:	d9 1c       	adc	r13, r9
    2216:	ea 1c       	adc	r14, r10
			char *old = chars_;
			chars_ = new char[new_length + 1];
    2218:	fb 1c       	adc	r15, r11
    221a:	d8 a6       	std	Y+40, r13	; 0x28
    221c:	cf a2       	std	Y+39, r12	; 0x27
    221e:	c6 01       	movw	r24, r12
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	04 d6       	rcall	.+3080   	; 0x2e2c <_Znaj>
    2224:	3c 01       	movw	r6, r24
			unsigned long i = 0;
			while (i < length_)
    2226:	81 14       	cp	r8, r1
    2228:	91 04       	cpc	r9, r1
    222a:	a1 04       	cpc	r10, r1
    222c:	b1 04       	cpc	r11, r1
    222e:	31 f4       	brne	.+12     	; 0x223c <__stack+0x3d>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    2230:	8c 14       	cp	r8, r12
    2232:	9d 04       	cpc	r9, r13
    2234:	ae 04       	cpc	r10, r14
    2236:	bf 04       	cpc	r11, r15
    2238:	50 f0       	brcs	.+20     	; 0x224e <__stack+0x4f>
    223a:	15 c0       	rjmp	.+42     	; 0x2266 <__stack+0x67>
    223c:	f8 01       	movw	r30, r16
    223e:	dc 01       	movw	r26, r24
    2240:	c1 01       	movw	r24, r2
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
    2242:	21 91       	ld	r18, Z+
    2244:	2d 93       	st	X+, r18
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    2246:	8e 17       	cp	r24, r30
    2248:	9f 07       	cpc	r25, r31
    224a:	d9 f7       	brne	.-10     	; 0x2242 <__stack+0x43>
    224c:	f1 cf       	rjmp	.-30     	; 0x2230 <__stack+0x31>
    224e:	d2 01       	movw	r26, r4
    2250:	f3 01       	movw	r30, r6
    2252:	e8 0d       	add	r30, r8
    2254:	f9 1d       	adc	r31, r9
    2256:	93 01       	movw	r18, r6
    2258:	2c 0d       	add	r18, r12
    225a:	3d 1d       	adc	r19, r13
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    225c:	8d 91       	ld	r24, X+
    225e:	81 93       	st	Z+, r24
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    2260:	2e 17       	cp	r18, r30
    2262:	3f 07       	cpc	r19, r31
    2264:	d9 f7       	brne	.-10     	; 0x225c <__stack+0x5d>
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    2266:	13 01       	movw	r2, r6
    2268:	2c 0c       	add	r2, r12
    226a:	3d 1c       	adc	r3, r13
    226c:	d1 01       	movw	r26, r2
			length_ = new_length;
			delete[] old;
    226e:	1c 92       	st	X, r1
    2270:	01 15       	cp	r16, r1
    2272:	11 05       	cpc	r17, r1
    2274:	11 f0       	breq	.+4      	; 0x227a <__stack+0x7b>
    2276:	c8 01       	movw	r24, r16
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    2278:	db d5       	rcall	.+2998   	; 0x2e30 <_ZdaPv>
    227a:	41 14       	cp	r4, r1
    227c:	51 04       	cpc	r5, r1
    227e:	11 f0       	breq	.+4      	; 0x2284 <__stack+0x85>
    2280:	c2 01       	movw	r24, r4
	string s_mode = send_command;
	s_mode += "=";
	s_mode += id;
	s_mode += ",";
	s_mode += Standard::parse_int(response.size());
    2282:	d6 d5       	rcall	.+2988   	; 0x2e30 <_ZdaPv>
    2284:	ed a1       	ldd	r30, Y+37	; 0x25
    2286:	fe a1       	ldd	r31, Y+38	; 0x26
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	ce 01       	movw	r24, r28
    228e:	4f 96       	adiw	r24, 0x1f	; 31
    2290:	a1 dc       	rcall	.-1726   	; 0x1bd4 <_ZN8Standard9parse_intIiEENS_6stringET_>
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
		void operator+=(const string &other)
		{
			unsigned long new_length = other.length_ + length_;
    2292:	8f 8c       	ldd	r8, Y+31	; 0x1f
    2294:	98 a0       	ldd	r9, Y+32	; 0x20
    2296:	a9 a0       	ldd	r10, Y+33	; 0x21
    2298:	ba a0       	ldd	r11, Y+34	; 0x22
    229a:	8c 0c       	add	r8, r12
    229c:	9d 1c       	adc	r9, r13
    229e:	ae 1c       	adc	r10, r14
			char *old = chars_;
			chars_ = new char[new_length + 1];
    22a0:	bf 1c       	adc	r11, r15
    22a2:	24 01       	movw	r4, r8
    22a4:	ff ef       	ldi	r31, 0xFF	; 255
    22a6:	4f 1a       	sub	r4, r31
    22a8:	5f 0a       	sbc	r5, r31
    22aa:	c2 01       	movw	r24, r4
    22ac:	bf d5       	rcall	.+2942   	; 0x2e2c <_Znaj>
    22ae:	8c 01       	movw	r16, r24
			unsigned long i = 0;
			while (i < length_)
    22b0:	c1 14       	cp	r12, r1
    22b2:	d1 04       	cpc	r13, r1
    22b4:	e1 04       	cpc	r14, r1
    22b6:	f1 04       	cpc	r15, r1
    22b8:	31 f4       	brne	.+12     	; 0x22c6 <__stack+0xc7>
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    22ba:	c8 14       	cp	r12, r8
    22bc:	d9 04       	cpc	r13, r9
    22be:	ea 04       	cpc	r14, r10
    22c0:	fb 04       	cpc	r15, r11
    22c2:	48 f0       	brcs	.+18     	; 0x22d6 <__stack+0xd7>
    22c4:	1f c0       	rjmp	.+62     	; 0x2304 <__stack+0x105>
    22c6:	f3 01       	movw	r30, r6
    22c8:	dc 01       	movw	r26, r24
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
			{
				chars_[i] = old[i];
    22ca:	81 91       	ld	r24, Z+
    22cc:	8d 93       	st	X+, r24
		{
			unsigned long new_length = other.length_ + length_;
			char *old = chars_;
			chars_ = new char[new_length + 1];
			unsigned long i = 0;
			while (i < length_)
    22ce:	e2 15       	cp	r30, r2
    22d0:	f3 05       	cpc	r31, r3
    22d2:	d9 f7       	brne	.-10     	; 0x22ca <__stack+0xcb>
    22d4:	f2 cf       	rjmp	.-28     	; 0x22ba <__stack+0xbb>
    22d6:	f8 01       	movw	r30, r16
    22d8:	ec 0d       	add	r30, r12
    22da:	fd 1d       	adc	r31, r13
    22dc:	b8 01       	movw	r22, r16
    22de:	68 0d       	add	r22, r8
    22e0:	79 1d       	adc	r23, r9
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
			{
				chars_[i] = other[i - length_];
    22e2:	4f a1       	ldd	r20, Y+39	; 0x27
    22e4:	58 a5       	ldd	r21, Y+40	; 0x28
    22e6:	40 0f       	add	r20, r16
    22e8:	51 1f       	adc	r21, r17
    22ea:	cf 01       	movw	r24, r30
    22ec:	84 1b       	sub	r24, r20
    22ee:	95 0b       	sbc	r25, r21
    22f0:	2b a1       	ldd	r18, Y+35	; 0x23
    22f2:	3c a1       	ldd	r19, Y+36	; 0x24
    22f4:	d9 01       	movw	r26, r18
    22f6:	a8 0f       	add	r26, r24
    22f8:	b9 1f       	adc	r27, r25
    22fa:	8c 91       	ld	r24, X
			while (i < length_)
			{
				chars_[i] = old[i];
				++i;
			}
			while (i < new_length)
    22fc:	81 93       	st	Z+, r24
    22fe:	e6 17       	cp	r30, r22
    2300:	f7 07       	cpc	r31, r23
			{
				chars_[i] = other[i - length_];
				++i;
			}
			chars_[new_length] = '\0';
    2302:	99 f7       	brne	.-26     	; 0x22ea <__stack+0xeb>
    2304:	f8 01       	movw	r30, r16
    2306:	e8 0d       	add	r30, r8
			length_ = new_length;
			delete[] old;
    2308:	f9 1d       	adc	r31, r9
    230a:	10 82       	st	Z, r1
    230c:	61 14       	cp	r6, r1
    230e:	71 04       	cpc	r7, r1
    2310:	11 f0       	breq	.+4      	; 0x2316 <__stack+0x117>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    2312:	c3 01       	movw	r24, r6
    2314:	8d d5       	rcall	.+2842   	; 0x2e30 <_ZdaPv>
    2316:	8b a1       	ldd	r24, Y+35	; 0x23
    2318:	9c a1       	ldd	r25, Y+36	; 0x24
    231a:	00 97       	sbiw	r24, 0x00	; 0
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    231c:	09 f0       	breq	.+2      	; 0x2320 <__stack+0x121>
    231e:	88 d5       	rcall	.+2832   	; 0x2e30 <_ZdaPv>
    2320:	8b 8a       	std	Y+19, r8	; 0x13
    2322:	9c 8a       	std	Y+20, r9	; 0x14
			chars_ = new char[other.length_ + 1];
    2324:	ad 8a       	std	Y+21, r10	; 0x15
    2326:	be 8a       	std	Y+22, r11	; 0x16
    2328:	c2 01       	movw	r24, r4
    232a:	80 d5       	rcall	.+2816   	; 0x2e2c <_Znaj>
    232c:	98 8f       	std	Y+24, r25	; 0x18
			string_copy(chars_, other.chars_, other.length_);
    232e:	8f 8b       	std	Y+23, r24	; 0x17
    2330:	a4 01       	movw	r20, r8
    2332:	b8 01       	movw	r22, r16
	send(s_mode);
    2334:	da d7       	rcall	.+4020   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2336:	ae 01       	movw	r20, r28
    2338:	4d 5e       	subi	r20, 0xED	; 237
    233a:	5f 4f       	sbci	r21, 0xFF	; 255
    233c:	69 a5       	ldd	r22, Y+41	; 0x29
    233e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2340:	ce 01       	movw	r24, r28
    2342:	49 96       	adiw	r24, 0x19	; 25
		}
		~string()
		{
			delete[] chars_;
    2344:	0e 94 33 03 	call	0x666	; 0x666 <_ZN10Connection4sendEN8Standard6stringE>
    2348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	09 f0       	breq	.+2      	; 0x2352 <__stack+0x153>
    2350:	6f d5       	rcall	.+2782   	; 0x2e30 <_ZdaPv>
    2352:	8f 89       	ldd	r24, Y+23	; 0x17
    2354:	98 8d       	ldd	r25, Y+24	; 0x18
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	09 f0       	breq	.+2      	; 0x235c <__stack+0x15d>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    235a:	6a d5       	rcall	.+2772   	; 0x2e30 <_ZdaPv>
    235c:	1d 86       	std	Y+13, r1	; 0x0d
    235e:	1e 86       	std	Y+14, r1	; 0x0e
			length_ = string_length(text);
    2360:	1f 86       	std	Y+15, r1	; 0x0f
    2362:	18 8a       	std	Y+16, r1	; 0x10
    2364:	81 e6       	ldi	r24, 0x61	; 97
    2366:	92 e0       	ldi	r25, 0x02	; 2
    2368:	a6 d7       	rcall	.+3916   	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    236a:	6d 87       	std	Y+13, r22	; 0x0d
    236c:	7e 87       	std	Y+14, r23	; 0x0e
    236e:	8f 87       	std	Y+15, r24	; 0x0f
			chars_ = new char[length_ + 1];
    2370:	98 8b       	std	Y+16, r25	; 0x10
    2372:	cb 01       	movw	r24, r22
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	5a d5       	rcall	.+2740   	; 0x2e2c <_Znaj>
    2378:	9a 8b       	std	Y+18, r25	; 0x12
			string_copy(chars_, text, length_);
    237a:	89 8b       	std	Y+17, r24	; 0x11
    237c:	4d 85       	ldd	r20, Y+13	; 0x0d
    237e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2380:	61 e6       	ldi	r22, 0x61	; 97
    2382:	72 e0       	ldi	r23, 0x02	; 2
    2384:	b2 d7       	rcall	.+3940   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
	Serial0_PrintString("Responding");
    2386:	ce 01       	movw	r24, r28
    2388:	0d 96       	adiw	r24, 0x0d	; 13
    238a:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z19Serial0_PrintStringN8Standard6stringE>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    238e:	89 89       	ldd	r24, Y+17	; 0x11
    2390:	9a 89       	ldd	r25, Y+18	; 0x12
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	09 f0       	breq	.+2      	; 0x2398 <__stack+0x199>
    2396:	4c d5       	rcall	.+2712   	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2398:	ed a1       	ldd	r30, Y+37	; 0x25
    239a:	fe a1       	ldd	r31, Y+38	; 0x26
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	a2 81       	ldd	r26, Z+2	; 0x02
    23a2:	b3 81       	ldd	r27, Z+3	; 0x03
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	ab 83       	std	Y+3, r26	; 0x03
			chars_ = new char[other.length_ + 1];
    23aa:	bc 83       	std	Y+4, r27	; 0x04
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	3e d5       	rcall	.+2684   	; 0x2e2c <_Znaj>
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, other.chars_, other.length_);
    23b4:	ad a1       	ldd	r26, Y+37	; 0x25
    23b6:	be a1       	ldd	r27, Y+38	; 0x26
    23b8:	4d 91       	ld	r20, X+
    23ba:	5c 91       	ld	r21, X
    23bc:	11 97       	sbiw	r26, 0x01	; 1
    23be:	14 96       	adiw	r26, 0x04	; 4
    23c0:	6d 91       	ld	r22, X+
    23c2:	7c 91       	ld	r23, X
    23c4:	15 97       	sbiw	r26, 0x05	; 5
	send(response);
    23c6:	91 d7       	rcall	.+3874   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    23c8:	ae 01       	movw	r20, r28
    23ca:	4f 5f       	subi	r20, 0xFF	; 255
    23cc:	5f 4f       	sbci	r21, 0xFF	; 255
    23ce:	69 a5       	ldd	r22, Y+41	; 0x29
    23d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    23d2:	ce 01       	movw	r24, r28
    23d4:	07 96       	adiw	r24, 0x07	; 7
		}
		~string()
		{
			delete[] chars_;
    23d6:	0e 94 33 03 	call	0x666	; 0x666 <_ZN10Connection4sendEN8Standard6stringE>
    23da:	8b 85       	ldd	r24, Y+11	; 0x0b
    23dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <__stack+0x1e5>
    23e2:	26 d5       	rcall	.+2636   	; 0x2e30 <_ZdaPv>
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05
    23e6:	9e 81       	ldd	r25, Y+6	; 0x06
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	09 f0       	breq	.+2      	; 0x23ee <__stack+0x1ef>
    23ec:	21 d5       	rcall	.+2626   	; 0x2e30 <_ZdaPv>
    23ee:	01 15       	cp	r16, r1
    23f0:	11 05       	cpc	r17, r1
    23f2:	11 f0       	breq	.+4      	; 0x23f8 <__stack+0x1f9>
    23f4:	c8 01       	movw	r24, r16
    23f6:	1c d5       	rcall	.+2616   	; 0x2e30 <_ZdaPv>
    23f8:	ac 96       	adiw	r28, 0x2c	; 44
}
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	9f 90       	pop	r9
    241a:	8f 90       	pop	r8
    241c:	7f 90       	pop	r7
    241e:	6f 90       	pop	r6
    2420:	5f 90       	pop	r5
    2422:	4f 90       	pop	r4
    2424:	3f 90       	pop	r3
    2426:	2f 90       	pop	r2
    2428:	08 95       	ret

0000242a <_GLOBAL__sub_I_USART1_Buffer_>:
    242a:	6c e6       	ldi	r22, 0x6C	; 108
#define CONNECTION_H
#include "ClientConnection.h"
#include "String.h"

using string = Standard::string;
const static string reset_command{"AT+RST"};
    242c:	72 e0       	ldi	r23, 0x02	; 2
    242e:	82 e7       	ldi	r24, 0x72	; 114
    2430:	93 e0       	ldi	r25, 0x03	; 3
    2432:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string mode_command{"AT+CWMODE"};
    2436:	63 e7       	ldi	r22, 0x73	; 115
    2438:	72 e0       	ldi	r23, 0x02	; 2
    243a:	8c e6       	ldi	r24, 0x6C	; 108
    243c:	93 e0       	ldi	r25, 0x03	; 3
    243e:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string multiple_connections_command{"AT+CIPMUX"};
    2442:	6d e7       	ldi	r22, 0x7D	; 125
    2444:	72 e0       	ldi	r23, 0x02	; 2
    2446:	86 e6       	ldi	r24, 0x66	; 102
    2448:	93 e0       	ldi	r25, 0x03	; 3
    244a:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string server_command{"AT+CIPSERVER"};
    244e:	67 e8       	ldi	r22, 0x87	; 135
    2450:	72 e0       	ldi	r23, 0x02	; 2
    2452:	80 e6       	ldi	r24, 0x60	; 96
    2454:	93 e0       	ldi	r25, 0x03	; 3
    2456:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string send_command{"AT+CIPSEND"};
    245a:	64 e9       	ldi	r22, 0x94	; 148
    245c:	72 e0       	ldi	r23, 0x02	; 2
    245e:	8a e5       	ldi	r24, 0x5A	; 90
    2460:	93 e0       	ldi	r25, 0x03	; 3
    2462:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string status_command{"AT+CIPSTATUS"};
    2466:	6f e9       	ldi	r22, 0x9F	; 159
    2468:	72 e0       	ldi	r23, 0x02	; 2
    246a:	84 e5       	ldi	r24, 0x54	; 84
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string close_connection_command{"AT+CIPCLOSE"};
    2472:	6c ea       	ldi	r22, 0xAC	; 172
    2474:	72 e0       	ldi	r23, 0x02	; 2
    2476:	8e e4       	ldi	r24, 0x4E	; 78
    2478:	93 e0       	ldi	r25, 0x03	; 3
    247a:	0c 94 b2 00 	jmp	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
    247e:	08 95       	ret

00002480 <_GLOBAL__sub_D_USART1_Buffer_>:
    2480:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <_ZL24close_connection_command+0x4>
    2484:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <_ZL24close_connection_command+0x5>
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	09 f0       	breq	.+2      	; 0x248e <_GLOBAL__sub_D_USART1_Buffer_+0xe>
    248c:	d1 d4       	rcall	.+2466   	; 0x2e30 <_ZdaPv>
    248e:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <_ZL14status_command+0x4>
    2492:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <_ZL14status_command+0x5>
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	09 f0       	breq	.+2      	; 0x249c <_GLOBAL__sub_D_USART1_Buffer_+0x1c>
    249a:	ca d4       	rcall	.+2452   	; 0x2e30 <_ZdaPv>
    249c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <_ZL12send_command+0x4>
    24a0:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <_ZL12send_command+0x5>
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	09 f0       	breq	.+2      	; 0x24aa <_GLOBAL__sub_D_USART1_Buffer_+0x2a>
    24a8:	c3 d4       	rcall	.+2438   	; 0x2e30 <_ZdaPv>
    24aa:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <_ZL14server_command+0x4>
    24ae:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <_ZL14server_command+0x5>
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <_GLOBAL__sub_D_USART1_Buffer_+0x38>
    24b6:	bc d4       	rcall	.+2424   	; 0x2e30 <_ZdaPv>
    24b8:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <_ZL28multiple_connections_command+0x4>
    24bc:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <_ZL28multiple_connections_command+0x5>
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <_GLOBAL__sub_D_USART1_Buffer_+0x46>
    24c4:	b5 d4       	rcall	.+2410   	; 0x2e30 <_ZdaPv>
    24c6:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <_ZL12mode_command+0x4>
    24ca:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <_ZL12mode_command+0x5>
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <_GLOBAL__sub_D_USART1_Buffer_+0x54>
    24d2:	ae d4       	rcall	.+2396   	; 0x2e30 <_ZdaPv>
    24d4:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <_ZL13reset_command+0x4>
    24d8:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <_ZL13reset_command+0x5>
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	09 f0       	breq	.+2      	; 0x24e2 <_GLOBAL__sub_D_USART1_Buffer_+0x62>
    24e0:	a7 c4       	rjmp	.+2382   	; 0x2e30 <_ZdaPv>
    24e2:	08 95       	ret

000024e4 <_ZN8Standard6stringC1ERKS0_>:
		{
			length_ = string_length(text);
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	8c 01       	movw	r16, r24
    24ee:	eb 01       	movw	r28, r22
		{
    24f0:	fc 01       	movw	r30, r24
    24f2:	10 82       	st	Z, r1
    24f4:	11 82       	std	Z+1, r1	; 0x01
    24f6:	12 82       	std	Z+2, r1	; 0x02
    24f8:	13 82       	std	Z+3, r1	; 0x03
			length_ = other.length_;
    24fa:	88 81       	ld	r24, Y
    24fc:	99 81       	ldd	r25, Y+1	; 0x01
    24fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2500:	bb 81       	ldd	r27, Y+3	; 0x03
    2502:	80 83       	st	Z, r24
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	a2 83       	std	Z+2, r26	; 0x02
    2508:	b3 83       	std	Z+3, r27	; 0x03
			chars_ = new char[other.length_ + 1];
    250a:	88 81       	ld	r24, Y
    250c:	99 81       	ldd	r25, Y+1	; 0x01
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	8d d4       	rcall	.+2330   	; 0x2e2c <_Znaj>
    2512:	f8 01       	movw	r30, r16
    2514:	95 83       	std	Z+5, r25	; 0x05
    2516:	84 83       	std	Z+4, r24	; 0x04
			string_copy(chars_, other.chars_, other.length_);
    2518:	48 81       	ld	r20, Y
    251a:	59 81       	ldd	r21, Y+1	; 0x01
    251c:	6c 81       	ldd	r22, Y+4	; 0x04
    251e:	7d 81       	ldd	r23, Y+5	; 0x05
    2520:	e4 d6       	rcall	.+3528   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		}
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	08 95       	ret

0000252c <_ZN6Server6server11StartServerEv>:
					conn.SendData(conFrame.ID_, site.generate_site(conFrame.parameters_));
					conn.close_connection(conFrame.ID_);
				}
			}
		}
		bool StartServer()
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	00 d0       	rcall	.+0      	; 0x2538 <_ZN6Server6server11StartServerEv+0xc>
    2538:	00 d0       	rcall	.+0      	; 0x253a <_ZN6Server6server11StartServerEv+0xe>
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	7c 01       	movw	r14, r24
		{
			bool success = true;
			success = success && conn.reset();
    2540:	0e 94 c6 03 	call	0x78c	; 0x78c <_ZN10Connection5resetEv>
			success = success && conn.wifimode("2");
    2544:	88 23       	and	r24, r24
    2546:	81 f1       	breq	.+96     	; 0x25a8 <_ZN6Server6server11StartServerEv+0x7c>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    2548:	19 82       	std	Y+1, r1	; 0x01
    254a:	1a 82       	std	Y+2, r1	; 0x02
    254c:	1b 82       	std	Y+3, r1	; 0x03
    254e:	1c 82       	std	Y+4, r1	; 0x04
			length_ = string_length(text);
    2550:	8d e4       	ldi	r24, 0x4D	; 77
    2552:	92 e0       	ldi	r25, 0x02	; 2
    2554:	b0 d6       	rcall	.+3424   	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    2556:	69 83       	std	Y+1, r22	; 0x01
    2558:	7a 83       	std	Y+2, r23	; 0x02
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	9c 83       	std	Y+4, r25	; 0x04
			chars_ = new char[length_ + 1];
    255e:	cb 01       	movw	r24, r22
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	64 d4       	rcall	.+2248   	; 0x2e2c <_Znaj>
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, text, length_);
    2568:	49 81       	ldd	r20, Y+1	; 0x01
    256a:	5a 81       	ldd	r21, Y+2	; 0x02
    256c:	6d e4       	ldi	r22, 0x4D	; 77
    256e:	72 e0       	ldi	r23, 0x02	; 2
    2570:	bc d6       	rcall	.+3448   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2572:	be 01       	movw	r22, r28
    2574:	6f 5f       	subi	r22, 0xFF	; 255
    2576:	7f 4f       	sbci	r23, 0xFF	; 255
    2578:	c7 01       	movw	r24, r14
    257a:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN10Connection8wifimodeEN8Standard6stringE>
    257e:	18 2f       	mov	r17, r24
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	09 f0       	breq	.+2      	; 0x258a <_ZN6Server6server11StartServerEv+0x5e>
    2588:	53 d4       	rcall	.+2214   	; 0x2e30 <_ZdaPv>
			success = success && conn.enable_multiple_connections(true);
    258a:	11 23       	and	r17, r17
    258c:	71 f0       	breq	.+28     	; 0x25aa <_ZN6Server6server11StartServerEv+0x7e>
    258e:	61 e0       	ldi	r22, 0x01	; 1
    2590:	c7 01       	movw	r24, r14
    2592:	0e 94 6f 05 	call	0xade	; 0xade <_ZN10Connection27enable_multiple_connectionsEb>
    2596:	18 2f       	mov	r17, r24
			success = success && conn.enable_server(true);
    2598:	88 23       	and	r24, r24
    259a:	39 f0       	breq	.+14     	; 0x25aa <_ZN6Server6server11StartServerEv+0x7e>
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	c7 01       	movw	r24, r14
    25a0:	0e 94 f3 06 	call	0xde6	; 0xde6 <_ZN10Connection13enable_serverEb>
    25a4:	18 2f       	mov	r17, r24
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <_ZN6Server6server11StartServerEv+0x7e>
    25a8:	10 e0       	ldi	r17, 0x00	; 0
			SetupDone = success;
    25aa:	f7 01       	movw	r30, r14
    25ac:	13 83       	std	Z+3, r17	; 0x03
			return success;
		}
    25ae:	81 2f       	mov	r24, r17
    25b0:	26 96       	adiw	r28, 0x06	; 6
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	08 95       	ret

000025c8 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev>:
		K key_{};
		V value_{};
		MapEntry *next_{};
		MapEntry(K key, V value, MapEntry<K, V> *next = nullptr) : key_{key}, value_{value}, next_{next} {}
		MapEntry() : next_{nullptr} {};
		~MapEntry()
    25c8:	8f 92       	push	r8
    25ca:	9f 92       	push	r9
    25cc:	af 92       	push	r10
    25ce:	bf 92       	push	r11
    25d0:	cf 92       	push	r12
    25d2:	df 92       	push	r13
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	8c 01       	movw	r16, r24
		{
			//if there is a next MapEntry, delete it!
			if (next_)
    25e2:	fc 01       	movw	r30, r24
    25e4:	c6 85       	ldd	r28, Z+14	; 0x0e
    25e6:	d7 85       	ldd	r29, Z+15	; 0x0f
    25e8:	20 97       	sbiw	r28, 0x00	; 0
    25ea:	09 f4       	brne	.+2      	; 0x25ee <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0x26>
    25ec:	60 c0       	rjmp	.+192    	; 0x26ae <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xe6>
    25ee:	ee 84       	ldd	r14, Y+14	; 0x0e
    25f0:	ff 84       	ldd	r15, Y+15	; 0x0f
    25f2:	e1 14       	cp	r14, r1
    25f4:	f1 04       	cpc	r15, r1
    25f6:	09 f4       	brne	.+2      	; 0x25fa <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0x32>
    25f8:	4b c0       	rjmp	.+150    	; 0x2690 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xc8>
    25fa:	f7 01       	movw	r30, r14
    25fc:	c6 84       	ldd	r12, Z+14	; 0x0e
    25fe:	d7 84       	ldd	r13, Z+15	; 0x0f
    2600:	c1 14       	cp	r12, r1
    2602:	d1 04       	cpc	r13, r1
    2604:	a9 f1       	breq	.+106    	; 0x2670 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xa8>
    2606:	f6 01       	movw	r30, r12
    2608:	86 84       	ldd	r8, Z+14	; 0x0e
    260a:	97 84       	ldd	r9, Z+15	; 0x0f
    260c:	81 14       	cp	r8, r1
    260e:	91 04       	cpc	r9, r1
    2610:	f1 f0       	breq	.+60     	; 0x264e <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0x86>
    2612:	f4 01       	movw	r30, r8
    2614:	a6 84       	ldd	r10, Z+14	; 0x0e
    2616:	b7 84       	ldd	r11, Z+15	; 0x0f
    2618:	a1 14       	cp	r10, r1
    261a:	b1 04       	cpc	r11, r1
    261c:	39 f0       	breq	.+14     	; 0x262c <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0x64>
			{
				delete next_;
    261e:	c5 01       	movw	r24, r10
    2620:	d3 df       	rcall	.-90     	; 0x25c8 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev>
    2622:	c5 01       	movw	r24, r10
    2624:	ff d3       	rcall	.+2046   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    2626:	f4 01       	movw	r30, r8
    2628:	17 86       	std	Z+15, r1	; 0x0f
    262a:	16 86       	std	Z+14, r1	; 0x0e
    262c:	f4 01       	movw	r30, r8
    262e:	82 85       	ldd	r24, Z+10	; 0x0a
    2630:	93 85       	ldd	r25, Z+11	; 0x0b
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	09 f0       	breq	.+2      	; 0x2638 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0x70>
    2636:	fc d3       	rcall	.+2040   	; 0x2e30 <_ZdaPv>
    2638:	f4 01       	movw	r30, r8
    263a:	84 81       	ldd	r24, Z+4	; 0x04
    263c:	95 81       	ldd	r25, Z+5	; 0x05
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	09 f0       	breq	.+2      	; 0x2644 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0x7c>
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    2642:	f6 d3       	rcall	.+2028   	; 0x2e30 <_ZdaPv>
    2644:	c4 01       	movw	r24, r8
    2646:	ee d3       	rcall	.+2012   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    2648:	f6 01       	movw	r30, r12
    264a:	17 86       	std	Z+15, r1	; 0x0f
    264c:	16 86       	std	Z+14, r1	; 0x0e
    264e:	f6 01       	movw	r30, r12
    2650:	82 85       	ldd	r24, Z+10	; 0x0a
    2652:	93 85       	ldd	r25, Z+11	; 0x0b
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	09 f0       	breq	.+2      	; 0x265a <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0x92>
    2658:	eb d3       	rcall	.+2006   	; 0x2e30 <_ZdaPv>
    265a:	f6 01       	movw	r30, r12
    265c:	84 81       	ldd	r24, Z+4	; 0x04
    265e:	95 81       	ldd	r25, Z+5	; 0x05
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	09 f0       	breq	.+2      	; 0x2666 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0x9e>
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    2664:	e5 d3       	rcall	.+1994   	; 0x2e30 <_ZdaPv>
    2666:	c6 01       	movw	r24, r12
    2668:	dd d3       	rcall	.+1978   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    266a:	f7 01       	movw	r30, r14
    266c:	17 86       	std	Z+15, r1	; 0x0f
    266e:	16 86       	std	Z+14, r1	; 0x0e
    2670:	f7 01       	movw	r30, r14
    2672:	82 85       	ldd	r24, Z+10	; 0x0a
    2674:	93 85       	ldd	r25, Z+11	; 0x0b
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	09 f0       	breq	.+2      	; 0x267c <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xb4>
    267a:	da d3       	rcall	.+1972   	; 0x2e30 <_ZdaPv>
    267c:	f7 01       	movw	r30, r14
    267e:	84 81       	ldd	r24, Z+4	; 0x04
    2680:	95 81       	ldd	r25, Z+5	; 0x05
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	09 f0       	breq	.+2      	; 0x2688 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xc0>
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    2686:	d4 d3       	rcall	.+1960   	; 0x2e30 <_ZdaPv>
    2688:	c7 01       	movw	r24, r14
    268a:	cc d3       	rcall	.+1944   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    268c:	1f 86       	std	Y+15, r1	; 0x0f
    268e:	1e 86       	std	Y+14, r1	; 0x0e
    2690:	8a 85       	ldd	r24, Y+10	; 0x0a
    2692:	9b 85       	ldd	r25, Y+11	; 0x0b
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	09 f0       	breq	.+2      	; 0x269a <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xd2>
    2698:	cb d3       	rcall	.+1942   	; 0x2e30 <_ZdaPv>
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	9d 81       	ldd	r25, Y+5	; 0x05
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xdc>
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    26a2:	c6 d3       	rcall	.+1932   	; 0x2e30 <_ZdaPv>
    26a4:	ce 01       	movw	r24, r28
    26a6:	be d3       	rcall	.+1916   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    26a8:	f8 01       	movw	r30, r16
    26aa:	17 86       	std	Z+15, r1	; 0x0f
    26ac:	16 86       	std	Z+14, r1	; 0x0e
    26ae:	f8 01       	movw	r30, r16
    26b0:	82 85       	ldd	r24, Z+10	; 0x0a
    26b2:	93 85       	ldd	r25, Z+11	; 0x0b
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	09 f0       	breq	.+2      	; 0x26ba <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xf2>
    26b8:	bb d3       	rcall	.+1910   	; 0x2e30 <_ZdaPv>
    26ba:	f8 01       	movw	r30, r16
    26bc:	84 81       	ldd	r24, Z+4	; 0x04
    26be:	95 81       	ldd	r25, Z+5	; 0x05
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev+0xfe>
    26c4:	b5 d3       	rcall	.+1898   	; 0x2e30 <_ZdaPv>
    26c6:	df 91       	pop	r29
			}
		}
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	ff 90       	pop	r15
    26d0:	ef 90       	pop	r14
    26d2:	df 90       	pop	r13
    26d4:	cf 90       	pop	r12
    26d6:	bf 90       	pop	r11
    26d8:	af 90       	pop	r10
    26da:	9f 90       	pop	r9
    26dc:	8f 90       	pop	r8
    26de:	08 95       	ret

000026e0 <_ZN6Server6serverD1Ev>:
    26e0:	2f 92       	push	r2
		Sitemap *siteMapping{};
		bool SetupDone{false};

		public:
		server() : conn{}, siteMapping{new Sitemap()}, SetupDone{false}{}
		~server(){delete siteMapping;}
    26e2:	3f 92       	push	r3
    26e4:	4f 92       	push	r4
    26e6:	5f 92       	push	r5
    26e8:	6f 92       	push	r6
    26ea:	7f 92       	push	r7
    26ec:	8f 92       	push	r8
    26ee:	9f 92       	push	r9
    26f0:	af 92       	push	r10
    26f2:	bf 92       	push	r11
    26f4:	cf 92       	push	r12
    26f6:	df 92       	push	r13
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	dc 01       	movw	r26, r24
    2706:	11 96       	adiw	r26, 0x01	; 1
    2708:	cd 90       	ld	r12, X+
    270a:	dc 90       	ld	r13, X
    270c:	12 97       	sbiw	r26, 0x02	; 2
    270e:	c1 14       	cp	r12, r1
    2710:	d1 04       	cpc	r13, r1
    2712:	09 f4       	brne	.+2      	; 0x2716 <_ZN6Server6serverD1Ev+0x36>
    2714:	d3 c0       	rjmp	.+422    	; 0x28bc <_ZN6Server6serverD1Ev+0x1dc>
    2716:	f6 01       	movw	r30, r12
    2718:	86 85       	ldd	r24, Z+14	; 0x0e
    271a:	97 85       	ldd	r25, Z+15	; 0x0f
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	09 f0       	breq	.+2      	; 0x2722 <_ZN6Server6serverD1Ev+0x42>
    2720:	87 d3       	rcall	.+1806   	; 0x2e30 <_ZdaPv>
			elements_[i] = nullptr;
		};
		~Hashmap()
		{
			//delete all the map entries
			for (int i = 0; i < capacity_; ++i)
    2722:	d6 01       	movw	r26, r12
    2724:	8d 91       	ld	r24, X+
    2726:	9c 91       	ld	r25, X
    2728:	18 16       	cp	r1, r24
    272a:	19 06       	cpc	r1, r25
    272c:	0c f0       	brlt	.+2      	; 0x2730 <_ZN6Server6serverD1Ev+0x50>
    272e:	bc c0       	rjmp	.+376    	; 0x28a8 <_ZN6Server6serverD1Ev+0x1c8>
    2730:	00 e0       	ldi	r16, 0x00	; 0
    2732:	10 e0       	ldi	r17, 0x00	; 0
			{
				if (elements_[i])
    2734:	d6 01       	movw	r26, r12
    2736:	18 96       	adiw	r26, 0x08	; 8
    2738:	ed 91       	ld	r30, X+
    273a:	fc 91       	ld	r31, X
    273c:	19 97       	sbiw	r26, 0x09	; 9
    273e:	c8 01       	movw	r24, r16
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	e8 0f       	add	r30, r24
    2746:	f9 1f       	adc	r31, r25
    2748:	c0 81       	ld	r28, Z
    274a:	d1 81       	ldd	r29, Z+1	; 0x01
				{
					delete elements_[i];
    274c:	20 97       	sbiw	r28, 0x00	; 0
    274e:	09 f4       	brne	.+2      	; 0x2752 <_ZN6Server6serverD1Ev+0x72>
    2750:	a2 c0       	rjmp	.+324    	; 0x2896 <_ZN6Server6serverD1Ev+0x1b6>
		MapEntry(K key, V value, MapEntry<K, V> *next = nullptr) : key_{key}, value_{value}, next_{next} {}
		MapEntry() : next_{nullptr} {};
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
    2752:	ee 84       	ldd	r14, Y+14	; 0x0e
    2754:	ff 84       	ldd	r15, Y+15	; 0x0f
    2756:	e1 14       	cp	r14, r1
    2758:	f1 04       	cpc	r15, r1
    275a:	09 f4       	brne	.+2      	; 0x275e <_ZN6Server6serverD1Ev+0x7e>
    275c:	90 c0       	rjmp	.+288    	; 0x287e <_ZN6Server6serverD1Ev+0x19e>
    275e:	f7 01       	movw	r30, r14
    2760:	86 84       	ldd	r8, Z+14	; 0x0e
    2762:	97 84       	ldd	r9, Z+15	; 0x0f
    2764:	81 14       	cp	r8, r1
    2766:	91 04       	cpc	r9, r1
    2768:	09 f4       	brne	.+2      	; 0x276c <_ZN6Server6serverD1Ev+0x8c>
    276a:	77 c0       	rjmp	.+238    	; 0x285a <_ZN6Server6serverD1Ev+0x17a>
    276c:	d4 01       	movw	r26, r8
    276e:	1e 96       	adiw	r26, 0x0e	; 14
    2770:	6d 90       	ld	r6, X+
    2772:	7c 90       	ld	r7, X
    2774:	1f 97       	sbiw	r26, 0x0f	; 15
    2776:	61 14       	cp	r6, r1
    2778:	71 04       	cpc	r7, r1
    277a:	09 f4       	brne	.+2      	; 0x277e <_ZN6Server6serverD1Ev+0x9e>
    277c:	59 c0       	rjmp	.+178    	; 0x2830 <_ZN6Server6serverD1Ev+0x150>
    277e:	f3 01       	movw	r30, r6
    2780:	46 84       	ldd	r4, Z+14	; 0x0e
    2782:	57 84       	ldd	r5, Z+15	; 0x0f
    2784:	41 14       	cp	r4, r1
    2786:	51 04       	cpc	r5, r1
    2788:	09 f4       	brne	.+2      	; 0x278c <_ZN6Server6serverD1Ev+0xac>
    278a:	3f c0       	rjmp	.+126    	; 0x280a <_ZN6Server6serverD1Ev+0x12a>
    278c:	d2 01       	movw	r26, r4
    278e:	1e 96       	adiw	r26, 0x0e	; 14
    2790:	2d 90       	ld	r2, X+
    2792:	3c 90       	ld	r3, X
    2794:	1f 97       	sbiw	r26, 0x0f	; 15
    2796:	21 14       	cp	r2, r1
    2798:	31 04       	cpc	r3, r1
    279a:	11 f1       	breq	.+68     	; 0x27e0 <_ZN6Server6serverD1Ev+0x100>
    279c:	f1 01       	movw	r30, r2
    279e:	a6 84       	ldd	r10, Z+14	; 0x0e
    27a0:	b7 84       	ldd	r11, Z+15	; 0x0f
    27a2:	a1 14       	cp	r10, r1
    27a4:	b1 04       	cpc	r11, r1
    27a6:	49 f0       	breq	.+18     	; 0x27ba <_ZN6Server6serverD1Ev+0xda>
			{
				delete next_;
    27a8:	c5 01       	movw	r24, r10
    27aa:	0e df       	rcall	.-484    	; 0x25c8 <_ZN3Map8MapEntryIN8Standard6stringEN10Webcontent7WebsiteEED1Ev>
    27ac:	c5 01       	movw	r24, r10
    27ae:	3a d3       	rcall	.+1652   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    27b0:	d1 01       	movw	r26, r2
    27b2:	1f 96       	adiw	r26, 0x0f	; 15
    27b4:	1c 92       	st	X, r1
    27b6:	1e 92       	st	-X, r1
    27b8:	1e 97       	sbiw	r26, 0x0e	; 14
    27ba:	f1 01       	movw	r30, r2
    27bc:	82 85       	ldd	r24, Z+10	; 0x0a
    27be:	93 85       	ldd	r25, Z+11	; 0x0b
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	09 f0       	breq	.+2      	; 0x27c6 <_ZN6Server6serverD1Ev+0xe6>
    27c4:	35 d3       	rcall	.+1642   	; 0x2e30 <_ZdaPv>
    27c6:	d1 01       	movw	r26, r2
    27c8:	14 96       	adiw	r26, 0x04	; 4
    27ca:	8d 91       	ld	r24, X+
    27cc:	9c 91       	ld	r25, X
    27ce:	15 97       	sbiw	r26, 0x05	; 5
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <_ZN6Server6serverD1Ev+0xf6>
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    27d4:	2d d3       	rcall	.+1626   	; 0x2e30 <_ZdaPv>
    27d6:	c1 01       	movw	r24, r2
    27d8:	25 d3       	rcall	.+1610   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    27da:	f2 01       	movw	r30, r4
    27dc:	17 86       	std	Z+15, r1	; 0x0f
    27de:	16 86       	std	Z+14, r1	; 0x0e
    27e0:	d2 01       	movw	r26, r4
    27e2:	1a 96       	adiw	r26, 0x0a	; 10
    27e4:	8d 91       	ld	r24, X+
    27e6:	9c 91       	ld	r25, X
    27e8:	1b 97       	sbiw	r26, 0x0b	; 11
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <_ZN6Server6serverD1Ev+0x110>
    27ee:	20 d3       	rcall	.+1600   	; 0x2e30 <_ZdaPv>
    27f0:	f2 01       	movw	r30, r4
    27f2:	84 81       	ldd	r24, Z+4	; 0x04
    27f4:	95 81       	ldd	r25, Z+5	; 0x05
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	09 f0       	breq	.+2      	; 0x27fc <_ZN6Server6serverD1Ev+0x11c>
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    27fa:	1a d3       	rcall	.+1588   	; 0x2e30 <_ZdaPv>
    27fc:	c2 01       	movw	r24, r4
    27fe:	12 d3       	rcall	.+1572   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    2800:	d3 01       	movw	r26, r6
    2802:	1f 96       	adiw	r26, 0x0f	; 15
    2804:	1c 92       	st	X, r1
    2806:	1e 92       	st	-X, r1
    2808:	1e 97       	sbiw	r26, 0x0e	; 14
    280a:	f3 01       	movw	r30, r6
    280c:	82 85       	ldd	r24, Z+10	; 0x0a
    280e:	93 85       	ldd	r25, Z+11	; 0x0b
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	09 f0       	breq	.+2      	; 0x2816 <_ZN6Server6serverD1Ev+0x136>
    2814:	0d d3       	rcall	.+1562   	; 0x2e30 <_ZdaPv>
    2816:	d3 01       	movw	r26, r6
    2818:	14 96       	adiw	r26, 0x04	; 4
    281a:	8d 91       	ld	r24, X+
    281c:	9c 91       	ld	r25, X
    281e:	15 97       	sbiw	r26, 0x05	; 5
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	09 f0       	breq	.+2      	; 0x2826 <_ZN6Server6serverD1Ev+0x146>
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    2824:	05 d3       	rcall	.+1546   	; 0x2e30 <_ZdaPv>
    2826:	c3 01       	movw	r24, r6
				next_ = nullptr;
    2828:	fd d2       	rcall	.+1530   	; 0x2e24 <_ZdlPv>
    282a:	f4 01       	movw	r30, r8
    282c:	17 86       	std	Z+15, r1	; 0x0f
    282e:	16 86       	std	Z+14, r1	; 0x0e
    2830:	d4 01       	movw	r26, r8
    2832:	1a 96       	adiw	r26, 0x0a	; 10
    2834:	8d 91       	ld	r24, X+
    2836:	9c 91       	ld	r25, X
    2838:	1b 97       	sbiw	r26, 0x0b	; 11
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	09 f0       	breq	.+2      	; 0x2840 <_ZN6Server6serverD1Ev+0x160>
    283e:	f8 d2       	rcall	.+1520   	; 0x2e30 <_ZdaPv>
    2840:	f4 01       	movw	r30, r8
    2842:	84 81       	ldd	r24, Z+4	; 0x04
    2844:	95 81       	ldd	r25, Z+5	; 0x05
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	09 f0       	breq	.+2      	; 0x284c <_ZN6Server6serverD1Ev+0x16c>
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    284a:	f2 d2       	rcall	.+1508   	; 0x2e30 <_ZdaPv>
    284c:	c4 01       	movw	r24, r8
    284e:	ea d2       	rcall	.+1492   	; 0x2e24 <_ZdlPv>
				next_ = nullptr;
    2850:	d7 01       	movw	r26, r14
    2852:	1f 96       	adiw	r26, 0x0f	; 15
    2854:	1c 92       	st	X, r1
    2856:	1e 92       	st	-X, r1
    2858:	1e 97       	sbiw	r26, 0x0e	; 14
    285a:	f7 01       	movw	r30, r14
    285c:	82 85       	ldd	r24, Z+10	; 0x0a
    285e:	93 85       	ldd	r25, Z+11	; 0x0b
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	09 f0       	breq	.+2      	; 0x2866 <_ZN6Server6serverD1Ev+0x186>
    2864:	e5 d2       	rcall	.+1482   	; 0x2e30 <_ZdaPv>
    2866:	d7 01       	movw	r26, r14
    2868:	14 96       	adiw	r26, 0x04	; 4
    286a:	8d 91       	ld	r24, X+
    286c:	9c 91       	ld	r25, X
    286e:	15 97       	sbiw	r26, 0x05	; 5
    2870:	00 97       	sbiw	r24, 0x00	; 0
		~MapEntry()
		{
			//if there is a next MapEntry, delete it!
			if (next_)
			{
				delete next_;
    2872:	09 f0       	breq	.+2      	; 0x2876 <_ZN6Server6serverD1Ev+0x196>
    2874:	dd d2       	rcall	.+1466   	; 0x2e30 <_ZdaPv>
    2876:	c7 01       	movw	r24, r14
				next_ = nullptr;
    2878:	d5 d2       	rcall	.+1450   	; 0x2e24 <_ZdlPv>
    287a:	1f 86       	std	Y+15, r1	; 0x0f
    287c:	1e 86       	std	Y+14, r1	; 0x0e
    287e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2880:	9b 85       	ldd	r25, Y+11	; 0x0b
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	09 f0       	breq	.+2      	; 0x2888 <_ZN6Server6serverD1Ev+0x1a8>
    2886:	d4 d2       	rcall	.+1448   	; 0x2e30 <_ZdaPv>
    2888:	8c 81       	ldd	r24, Y+4	; 0x04
    288a:	9d 81       	ldd	r25, Y+5	; 0x05
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	09 f0       	breq	.+2      	; 0x2892 <_ZN6Server6serverD1Ev+0x1b2>
    2890:	cf d2       	rcall	.+1438   	; 0x2e30 <_ZdaPv>
			//delete all the map entries
			for (int i = 0; i < capacity_; ++i)
			{
				if (elements_[i])
				{
					delete elements_[i];
    2892:	ce 01       	movw	r24, r28
    2894:	c7 d2       	rcall	.+1422   	; 0x2e24 <_ZdlPv>
			elements_[i] = nullptr;
		};
		~Hashmap()
		{
			//delete all the map entries
			for (int i = 0; i < capacity_; ++i)
    2896:	0f 5f       	subi	r16, 0xFF	; 255
    2898:	1f 4f       	sbci	r17, 0xFF	; 255
    289a:	f6 01       	movw	r30, r12
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	08 17       	cp	r16, r24
    28a2:	19 07       	cpc	r17, r25
    28a4:	0c f4       	brge	.+2      	; 0x28a8 <_ZN6Server6serverD1Ev+0x1c8>
    28a6:	46 cf       	rjmp	.-372    	; 0x2734 <_ZN6Server6serverD1Ev+0x54>
				{
					delete elements_[i];
				}
			}
			//delete the mapping
			delete[](elements_);
    28a8:	d6 01       	movw	r26, r12
    28aa:	18 96       	adiw	r26, 0x08	; 8
    28ac:	8d 91       	ld	r24, X+
    28ae:	9c 91       	ld	r25, X
    28b0:	19 97       	sbiw	r26, 0x09	; 9
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <_ZN6Server6serverD1Ev+0x1d8>
    28b6:	bc d2       	rcall	.+1400   	; 0x2e30 <_ZdaPv>
    28b8:	c6 01       	movw	r24, r12
    28ba:	b4 d2       	rcall	.+1384   	; 0x2e24 <_ZdlPv>
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
    28cc:	bf 90       	pop	r11
    28ce:	af 90       	pop	r10
    28d0:	9f 90       	pop	r9
    28d2:	8f 90       	pop	r8
    28d4:	7f 90       	pop	r7
    28d6:	6f 90       	pop	r6
    28d8:	5f 90       	pop	r5
    28da:	4f 90       	pop	r4
    28dc:	3f 90       	pop	r3
    28de:	2f 90       	pop	r2
    28e0:	08 95       	ret

000028e2 <main>:
    28e2:	4f 92       	push	r4
    28e4:	5f 92       	push	r5
#include "ResponseProvider.h"



int main(void)
{
    28e6:	6f 92       	push	r6
    28e8:	7f 92       	push	r7
    28ea:	8f 92       	push	r8
    28ec:	9f 92       	push	r9
    28ee:	af 92       	push	r10
    28f0:	bf 92       	push	r11
    28f2:	cf 92       	push	r12
    28f4:	df 92       	push	r13
    28f6:	ef 92       	push	r14
    28f8:	ff 92       	push	r15
    28fa:	0f 93       	push	r16
    28fc:	1f 93       	push	r17
    28fe:	cf 93       	push	r28
    2900:	df 93       	push	r29
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	c6 56       	subi	r28, 0x66	; 102
    2908:	d1 09       	sbc	r29, r1
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	de bf       	out	0x3e, r29	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	cd bf       	out	0x3d, r28	; 61
		Connection conn{};
		Sitemap *siteMapping{};
		bool SetupDone{false};

		public:
		server() : conn{}, siteMapping{new Sitemap()}, SetupDone{false}{}
    2914:	ce 01       	movw	r24, r28
    2916:	8f 5b       	subi	r24, 0xBF	; 191
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	0e 94 bb 03 	call	0x776	; 0x776 <_ZN10ConnectionC1Ev>
    291e:	82 e1       	ldi	r24, 0x12	; 18
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	7a d2       	rcall	.+1268   	; 0x2e18 <_Znwj>
    2924:	8c 01       	movw	r16, r24
		double load_factor_{0.75};
		MapEntry<K, V> **elements_;
		void reparent(MapEntry<K, V> *parent, MapEntry<K, V> *child);

		public:
		Hashmap() : capacity_{10}, length_{0}, load_factor_{0.75}
    2926:	8a e0       	ldi	r24, 0x0A	; 10
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	d8 01       	movw	r26, r16
    292c:	11 96       	adiw	r26, 0x01	; 1
    292e:	9c 93       	st	X, r25
    2930:	8e 93       	st	-X, r24
    2932:	13 96       	adiw	r26, 0x03	; 3
    2934:	1c 92       	st	X, r1
    2936:	1e 92       	st	-X, r1
    2938:	12 97       	sbiw	r26, 0x02	; 2
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a0 e4       	ldi	r26, 0x40	; 64
    2940:	bf e3       	ldi	r27, 0x3F	; 63
    2942:	f8 01       	movw	r30, r16
    2944:	84 83       	std	Z+4, r24	; 0x04
    2946:	95 83       	std	Z+5, r25	; 0x05
    2948:	a6 83       	std	Z+6, r26	; 0x06
    294a:	b7 83       	std	Z+7, r27	; 0x07
		{
			elements_ = new MapEntry<K, V> *[capacity_] {};
    294c:	84 e1       	ldi	r24, 0x14	; 20
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	6d d2       	rcall	.+1242   	; 0x2e2c <_Znaj>
    2952:	9c 01       	movw	r18, r24
    2954:	2c 5e       	subi	r18, 0xEC	; 236
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	fc 01       	movw	r30, r24
    295a:	11 92       	st	Z+, r1
    295c:	11 92       	st	Z+, r1
    295e:	e2 17       	cp	r30, r18
    2960:	f3 07       	cpc	r31, r19
    2962:	d9 f7       	brne	.-10     	; 0x295a <main+0x78>
    2964:	d8 01       	movw	r26, r16
    2966:	19 96       	adiw	r26, 0x09	; 9
    2968:	9c 93       	st	X, r25
    296a:	8e 93       	st	-X, r24
    296c:	18 97       	sbiw	r26, 0x08	; 8
			for (int i = 0; i < capacity_; ++i)
    296e:	8d 91       	ld	r24, X+
    2970:	9c 91       	ld	r25, X
    2972:	18 16       	cp	r1, r24
    2974:	19 06       	cpc	r1, r25
    2976:	a4 f4       	brge	.+40     	; 0x29a0 <main+0xbe>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
			elements_[i] = nullptr;
    297c:	9c 01       	movw	r18, r24
    297e:	22 0f       	add	r18, r18
    2980:	33 1f       	adc	r19, r19
    2982:	d8 01       	movw	r26, r16
    2984:	18 96       	adiw	r26, 0x08	; 8
    2986:	ed 91       	ld	r30, X+
    2988:	fc 91       	ld	r31, X
    298a:	19 97       	sbiw	r26, 0x09	; 9
    298c:	e2 0f       	add	r30, r18
    298e:	f3 1f       	adc	r31, r19
    2990:	11 82       	std	Z+1, r1	; 0x01
    2992:	10 82       	st	Z, r1

		public:
		Hashmap() : capacity_{10}, length_{0}, load_factor_{0.75}
		{
			elements_ = new MapEntry<K, V> *[capacity_] {};
			for (int i = 0; i < capacity_; ++i)
    2994:	01 96       	adiw	r24, 0x01	; 1
    2996:	2d 91       	ld	r18, X+
    2998:	3c 91       	ld	r19, X
    299a:	82 17       	cp	r24, r18
    299c:	93 07       	cpc	r25, r19
    299e:	74 f3       	brlt	.-36     	; 0x297c <main+0x9a>
			length_ = 0;
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
    29a0:	f8 01       	movw	r30, r16
    29a2:	12 86       	std	Z+10, r1	; 0x0a
    29a4:	13 86       	std	Z+11, r1	; 0x0b
    29a6:	14 86       	std	Z+12, r1	; 0x0c
    29a8:	15 86       	std	Z+13, r1	; 0x0d
			length_ = string_length(text);
    29aa:	88 eb       	ldi	r24, 0xB8	; 184
    29ac:	92 e0       	ldi	r25, 0x02	; 2
    29ae:	83 d4       	rcall	.+2310   	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    29b0:	d8 01       	movw	r26, r16
    29b2:	1a 96       	adiw	r26, 0x0a	; 10
    29b4:	6d 93       	st	X+, r22
    29b6:	7d 93       	st	X+, r23
    29b8:	8d 93       	st	X+, r24
    29ba:	9c 93       	st	X, r25
    29bc:	1d 97       	sbiw	r26, 0x0d	; 13
			chars_ = new char[length_ + 1];
    29be:	cb 01       	movw	r24, r22
    29c0:	01 96       	adiw	r24, 0x01	; 1
    29c2:	34 d2       	rcall	.+1128   	; 0x2e2c <_Znaj>
    29c4:	f8 01       	movw	r30, r16
    29c6:	97 87       	std	Z+15, r25	; 0x0f
    29c8:	86 87       	std	Z+14, r24	; 0x0e
    29ca:	42 85       	ldd	r20, Z+10	; 0x0a
			string_copy(chars_, text, length_);
    29cc:	53 85       	ldd	r21, Z+11	; 0x0b
    29ce:	68 eb       	ldi	r22, 0xB8	; 184
    29d0:	72 e0       	ldi	r23, 0x02	; 2
    29d2:	8b d4       	rcall	.+2326   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    29d4:	d8 01       	movw	r26, r16
		private:
		string html_{"NOT FOUND"};
		Response_Provdier *response_provdier_{nullptr};

		public:
		Website(){};
    29d6:	51 96       	adiw	r26, 0x11	; 17
    29d8:	1c 92       	st	X, r1
    29da:	1e 92       	st	-X, r1
    29dc:	50 97       	sbiw	r26, 0x10	; 16
    29de:	24 96       	adiw	r28, 0x04	; 4
    29e0:	1f af       	std	Y+63, r17	; 0x3f
    29e2:	0e af       	std	Y+62, r16	; 0x3e
    29e4:	24 97       	sbiw	r28, 0x04	; 4
    29e6:	25 96       	adiw	r28, 0x05	; 5
    29e8:	1f ae       	std	Y+63, r1	; 0x3f
    29ea:	25 97       	sbiw	r28, 0x05	; 5
    29ec:	62 ec       	ldi	r22, 0xC2	; 194
	//Setting up the server
	Server::server serv {};
	Website site{"<!doctype html><html><head><title>PlaceHolder</title></head><body><H1>This is a placeholder site for now, </H1></body></html>", 0};
    29ee:	72 e0       	ldi	r23, 0x02	; 2
    29f0:	ce 01       	movw	r24, r28
    29f2:	cb 96       	adiw	r24, 0x3b	; 59
    29f4:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
    29f8:	be 01       	movw	r22, r28
		Website(string html, Response_Provdier *RP) : html_{html}, response_provdier_{RP} {};
    29fa:	65 5c       	subi	r22, 0xC5	; 197
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255
    29fe:	ce 01       	movw	r24, r28
    2a00:	8b 5b       	subi	r24, 0xBB	; 187
    2a02:	9f 4f       	sbci	r25, 0xFF	; 255
    2a04:	6f dd       	rcall	.-1314   	; 0x24e4 <_ZN8Standard6stringC1ERKS0_>
    2a06:	2d 96       	adiw	r28, 0x0d	; 13
    2a08:	1f ae       	std	Y+63, r1	; 0x3f
    2a0a:	1e ae       	std	Y+62, r1	; 0x3e
    2a0c:	2d 97       	sbiw	r28, 0x0d	; 13
    2a0e:	21 96       	adiw	r28, 0x01	; 1
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    2a10:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a12:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a14:	21 97       	sbiw	r28, 0x01	; 1
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	09 f0       	breq	.+2      	; 0x2a1c <main+0x13a>
    2a1a:	0a d2       	rcall	.+1044   	; 0x2e30 <_ZdaPv>

using string = Standard::string;

namespace Webcontent
{
	class Website
    2a1c:	be 01       	movw	r22, r28
    2a1e:	6b 5b       	subi	r22, 0xBB	; 187
    2a20:	7f 4f       	sbci	r23, 0xFF	; 255
    2a22:	ce 01       	movw	r24, r28
    2a24:	c3 96       	adiw	r24, 0x33	; 51
    2a26:	5e dd       	rcall	.-1348   	; 0x24e4 <_ZN8Standard6stringC1ERKS0_>
    2a28:	2d 96       	adiw	r28, 0x0d	; 13
    2a2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a2e:	2d 97       	sbiw	r28, 0x0d	; 13
    2a30:	9a af       	std	Y+58, r25	; 0x3a
    2a32:	89 af       	std	Y+57, r24	; 0x39
    2a34:	60 e4       	ldi	r22, 0x40	; 64
	serv.add_site("/", site);
    2a36:	73 e0       	ldi	r23, 0x03	; 3
    2a38:	ce 01       	movw	r24, r28
    2a3a:	8d 96       	adiw	r24, 0x2d	; 45
    2a3c:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
    2a40:	8b a9       	ldd	r24, Y+51	; 0x33
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2a42:	9c a9       	ldd	r25, Y+52	; 0x34
    2a44:	ad a9       	ldd	r26, Y+53	; 0x35
    2a46:	be a9       	ldd	r27, Y+54	; 0x36
    2a48:	8f 8f       	std	Y+31, r24	; 0x1f
    2a4a:	98 a3       	std	Y+32, r25	; 0x20
    2a4c:	a9 a3       	std	Y+33, r26	; 0x21
    2a4e:	ba a3       	std	Y+34, r27	; 0x22
			chars_ = new char[other.length_ + 1];
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	ec d1       	rcall	.+984    	; 0x2e2c <_Znaj>
    2a54:	9c a3       	std	Y+36, r25	; 0x24
    2a56:	8b a3       	std	Y+35, r24	; 0x23
			string_copy(chars_, other.chars_, other.length_);
    2a58:	4b a9       	ldd	r20, Y+51	; 0x33
    2a5a:	5c a9       	ldd	r21, Y+52	; 0x34
    2a5c:	6f a9       	ldd	r22, Y+55	; 0x37
    2a5e:	78 ad       	ldd	r23, Y+56	; 0x38
    2a60:	44 d4       	rcall	.+2184   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2a62:	89 ad       	ldd	r24, Y+57	; 0x39
    2a64:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a66:	9e a3       	std	Y+38, r25	; 0x26
    2a68:	8d a3       	std	Y+37, r24	; 0x25
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2a6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a6e:	af a5       	ldd	r26, Y+47	; 0x2f
    2a70:	b8 a9       	ldd	r27, Y+48	; 0x30
    2a72:	8f a3       	std	Y+39, r24	; 0x27
    2a74:	98 a7       	std	Y+40, r25	; 0x28
    2a76:	a9 a7       	std	Y+41, r26	; 0x29
			chars_ = new char[other.length_ + 1];
    2a78:	ba a7       	std	Y+42, r27	; 0x2a
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	d7 d1       	rcall	.+942    	; 0x2e2c <_Znaj>
    2a7e:	9c a7       	std	Y+44, r25	; 0x2c
    2a80:	8b a7       	std	Y+43, r24	; 0x2b
			string_copy(chars_, other.chars_, other.length_);
    2a82:	4d a5       	ldd	r20, Y+45	; 0x2d
    2a84:	5e a5       	ldd	r21, Y+46	; 0x2e
    2a86:	69 a9       	ldd	r22, Y+49	; 0x31
    2a88:	7a a9       	ldd	r23, Y+50	; 0x32
    2a8a:	2f d4       	rcall	.+2142   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
		~server(){delete siteMapping;}
		void add_site(string link, Website site)
		{
			siteMapping->add(link, site);
    2a8c:	ae 01       	movw	r20, r28
    2a8e:	41 5e       	subi	r20, 0xE1	; 225
    2a90:	5f 4f       	sbci	r21, 0xFF	; 255
    2a92:	be 01       	movw	r22, r28
    2a94:	69 5d       	subi	r22, 0xD9	; 217
    2a96:	7f 4f       	sbci	r23, 0xFF	; 255
    2a98:	24 96       	adiw	r28, 0x04	; 4
    2a9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a9e:	24 97       	sbiw	r28, 0x04	; 4
		}
		~string()
		{
			delete[] chars_;
    2aa0:	c0 d2       	rcall	.+1408   	; 0x3022 <_ZN10webMapping7Sitemap3addEN8Standard6stringEN10Webcontent7WebsiteE>
    2aa2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aa4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <main+0x1ca>
    2aaa:	c2 d1       	rcall	.+900    	; 0x2e30 <_ZdaPv>
    2aac:	8b a1       	ldd	r24, Y+35	; 0x23
    2aae:	9c a1       	ldd	r25, Y+36	; 0x24
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <main+0x1d4>
    2ab4:	bd d1       	rcall	.+890    	; 0x2e30 <_ZdaPv>
    2ab6:	89 a9       	ldd	r24, Y+49	; 0x31
    2ab8:	9a a9       	ldd	r25, Y+50	; 0x32
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <main+0x1de>
    2abe:	b8 d1       	rcall	.+880    	; 0x2e30 <_ZdaPv>
    2ac0:	8f a9       	ldd	r24, Y+55	; 0x37
    2ac2:	98 ad       	ldd	r25, Y+56	; 0x38
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <main+0x1e8>
    2ac8:	b3 d1       	rcall	.+870    	; 0x2e30 <_ZdaPv>
	 if (serv.StartServer())
    2aca:	ce 01       	movw	r24, r28
    2acc:	8f 5b       	subi	r24, 0xBF	; 191
    2ace:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad0:	2d dd       	rcall	.-1446   	; 0x252c <_ZN6Server6server11StartServerEv>
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	1f c1       	rjmp	.+574    	; 0x2d14 <main+0x432>
    2ad6:	5e 01       	movw	r10, r28
		}
		void handleConnections()
		{
			if (SetupDone&&conn.data_available())
    2ad8:	b1 e4       	ldi	r27, 0x41	; 65
    2ada:	ab 0e       	add	r10, r27
    2adc:	b1 1c       	adc	r11, r1
    2ade:	8a 2c       	mov	r8, r10
    2ae0:	9b 2c       	mov	r9, r11
    2ae2:	f5 01       	movw	r30, r10
    2ae4:	83 81       	ldd	r24, Z+3	; 0x03
    2ae6:	88 23       	and	r24, r24
    2ae8:	e1 f3       	breq	.-8      	; 0x2ae2 <main+0x200>
    2aea:	88 2d       	mov	r24, r8
    2aec:	99 2d       	mov	r25, r9
    2aee:	0e 94 c3 0c 	call	0x1986	; 0x1986 <_ZN10Connection14data_availableEv>
    2af2:	88 23       	and	r24, r24
			{
				ClientConnection conFrame = conn.readData();
    2af4:	b1 f3       	breq	.-20     	; 0x2ae2 <main+0x200>
    2af6:	68 2d       	mov	r22, r8
    2af8:	79 2d       	mov	r23, r9
    2afa:	ce 01       	movw	r24, r28
    2afc:	83 5b       	subi	r24, 0xB3	; 179
    2afe:	9f 4f       	sbci	r25, 0xFF	; 255
			chars_ = new char[length_ + 1];
			chars_[0] = '\0';
		}
		string(const char *text)
		{
			length_ = string_length(text);
    2b00:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_ZN10Connection8readDataEv>
    2b04:	8a e4       	ldi	r24, 0x4A	; 74
    2b06:	92 e0       	ldi	r25, 0x02	; 2
    2b08:	d6 d3       	rcall	.+1964   	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
			chars_ = new char[length_ + 1];
    2b0a:	6b 01       	movw	r12, r22
    2b0c:	7c 01       	movw	r14, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	01 96       	adiw	r24, 0x01	; 1
			string_copy(chars_, text, length_);
    2b12:	8c d1       	rcall	.+792    	; 0x2e2c <_Znaj>
    2b14:	8c 01       	movw	r16, r24
    2b16:	a6 01       	movw	r20, r12
    2b18:	6a e4       	ldi	r22, 0x4A	; 74
    2b1a:	72 e0       	ldi	r23, 0x02	; 2
		char &operator[](const int index) const { return chars_[index]; }
		operator char *() const { return chars_; }
		bool operator==(const string &other) const { return string_compare(chars_, other.chars_) == 0; }
		bool operator<(const string &other) const { return string_compare(chars_, other.chars_) < 0; }
		bool operator>(const string &other) const { return string_compare(chars_, other.chars_) > 0; }
		bool operator!=(const string &other) const { return string_compare(chars_, other.chars_) != 0; };
    2b1c:	e6 d3       	rcall	.+1996   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2b1e:	b8 01       	movw	r22, r16
    2b20:	63 96       	adiw	r28, 0x13	; 19
    2b22:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b24:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b26:	63 97       	sbiw	r28, 0x13	; 19
    2b28:	ef d3       	rcall	.+2014   	; 0x3308 <_ZN8Standard14string_compareEPKcS1_>
			chars_ = new char[other.length_ + 1];
			string_copy(chars_, other.chars_, other.length_);
		}
		~string()
		{
			delete[] chars_;
    2b2a:	7c 01       	movw	r14, r24
    2b2c:	01 15       	cp	r16, r1
    2b2e:	11 05       	cpc	r17, r1
    2b30:	11 f0       	breq	.+4      	; 0x2b36 <main+0x254>
    2b32:	c8 01       	movw	r24, r16
    2b34:	7d d1       	rcall	.+762    	; 0x2e30 <_ZdaPv>
				if(conFrame.ID_!=string("-1"))
    2b36:	ef 28       	or	r14, r15
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <main+0x25a>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2b3a:	d5 c0       	rjmp	.+426    	; 0x2ce6 <main+0x404>
    2b3c:	67 96       	adiw	r28, 0x17	; 23
    2b3e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b40:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b42:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b44:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b46:	67 97       	sbiw	r28, 0x17	; 23
    2b48:	8f 83       	std	Y+7, r24	; 0x07
    2b4a:	98 87       	std	Y+8, r25	; 0x08
    2b4c:	a9 87       	std	Y+9, r26	; 0x09
			chars_ = new char[other.length_ + 1];
    2b4e:	ba 87       	std	Y+10, r27	; 0x0a
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	6c d1       	rcall	.+728    	; 0x2e2c <_Znaj>
    2b54:	9c 87       	std	Y+12, r25	; 0x0c
			string_copy(chars_, other.chars_, other.length_);
    2b56:	8b 87       	std	Y+11, r24	; 0x0b
    2b58:	65 96       	adiw	r28, 0x15	; 21
    2b5a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b5c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b5e:	65 97       	sbiw	r28, 0x15	; 21
    2b60:	69 96       	adiw	r28, 0x19	; 25
    2b62:	6e ad       	ldd	r22, Y+62	; 0x3e
    2b64:	7f ad       	ldd	r23, Y+63	; 0x3f
    2b66:	69 97       	sbiw	r28, 0x19	; 25
				{
					Website site = siteMapping->get(conFrame.request_);
    2b68:	c0 d3       	rcall	.+1920   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2b6a:	d5 01       	movw	r26, r10
    2b6c:	11 96       	adiw	r26, 0x01	; 1
    2b6e:	6d 91       	ld	r22, X+
    2b70:	7c 91       	ld	r23, X
    2b72:	12 97       	sbiw	r26, 0x02	; 2
    2b74:	ae 01       	movw	r20, r28
    2b76:	49 5f       	subi	r20, 0xF9	; 249
    2b78:	5f 4f       	sbci	r21, 0xFF	; 255
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	81 5a       	subi	r24, 0xA1	; 161
    2b7e:	9f 4f       	sbci	r25, 0xFF	; 255
		}
		~string()
		{
			delete[] chars_;
    2b80:	de d2       	rcall	.+1468   	; 0x313e <_ZN10webMapping7Sitemap3getEN8Standard6stringE>
    2b82:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b84:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <main+0x2aa>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2b8a:	52 d1       	rcall	.+676    	; 0x2e30 <_ZdaPv>
    2b8c:	6d 96       	adiw	r28, 0x1d	; 29
    2b8e:	4c ac       	ldd	r4, Y+60	; 0x3c
    2b90:	5d ac       	ldd	r5, Y+61	; 0x3d
    2b92:	6e ac       	ldd	r6, Y+62	; 0x3e
    2b94:	7f ac       	ldd	r7, Y+63	; 0x3f
			chars_ = new char[other.length_ + 1];
    2b96:	6d 97       	sbiw	r28, 0x1d	; 29
    2b98:	72 01       	movw	r14, r4
    2b9a:	bf ef       	ldi	r27, 0xFF	; 255
    2b9c:	eb 1a       	sub	r14, r27
    2b9e:	fb 0a       	sbc	r15, r27
    2ba0:	c7 01       	movw	r24, r14
    2ba2:	44 d1       	rcall	.+648    	; 0x2e2c <_Znaj>
			string_copy(chars_, other.chars_, other.length_);
    2ba4:	8c 01       	movw	r16, r24
    2ba6:	6b 96       	adiw	r28, 0x1b	; 27
    2ba8:	4e ad       	ldd	r20, Y+62	; 0x3e
    2baa:	5f ad       	ldd	r21, Y+63	; 0x3f
    2bac:	6b 97       	sbiw	r28, 0x1b	; 27
    2bae:	6f 96       	adiw	r28, 0x1f	; 31
    2bb0:	6e ad       	ldd	r22, Y+62	; 0x3e
    2bb2:	7f ad       	ldd	r23, Y+63	; 0x3f
    2bb4:	6f 97       	sbiw	r28, 0x1f	; 31
		public:
		Website(){};
		Website(string html, Response_Provdier *RP) : html_{html}, response_provdier_{RP} {};
		const string generate_site(const string parameters) const
		{
			if (response_provdier_)
    2bb6:	99 d3       	rcall	.+1842   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2bb8:	a7 96       	adiw	r28, 0x27	; 39
    2bba:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bbe:	a7 97       	sbiw	r28, 0x27	; 39
    2bc0:	30 97       	sbiw	r30, 0x00	; 0
			{
				return response_provdier_->generate_response(parameters);
    2bc2:	09 f1       	breq	.+66     	; 0x2c06 <main+0x324>
    2bc4:	01 90       	ld	r0, Z+
    2bc6:	f0 81       	ld	r31, Z
    2bc8:	e0 2d       	mov	r30, r0
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2bca:	c0 80       	ld	r12, Z
    2bcc:	d1 80       	ldd	r13, Z+1	; 0x01
    2bce:	49 82       	std	Y+1, r4	; 0x01
    2bd0:	5a 82       	std	Y+2, r5	; 0x02
			chars_ = new char[other.length_ + 1];
    2bd2:	6b 82       	std	Y+3, r6	; 0x03
    2bd4:	7c 82       	std	Y+4, r7	; 0x04
    2bd6:	c7 01       	movw	r24, r14
    2bd8:	29 d1       	rcall	.+594    	; 0x2e2c <_Znaj>
    2bda:	9e 83       	std	Y+6, r25	; 0x06
			string_copy(chars_, other.chars_, other.length_);
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
    2bde:	a2 01       	movw	r20, r4
    2be0:	b8 01       	movw	r22, r16
    2be2:	83 d3       	rcall	.+1798   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2be4:	a7 96       	adiw	r28, 0x27	; 39
    2be6:	6e ad       	ldd	r22, Y+62	; 0x3e
    2be8:	7f ad       	ldd	r23, Y+63	; 0x3f
    2bea:	a7 97       	sbiw	r28, 0x27	; 39
    2bec:	ae 01       	movw	r20, r28
    2bee:	4f 5f       	subi	r20, 0xFF	; 255
    2bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	0d 96       	adiw	r24, 0x0d	; 13
		}
		~string()
		{
			delete[] chars_;
    2bf6:	f6 01       	movw	r30, r12
    2bf8:	19 95       	eicall
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	c9 f0       	breq	.+50     	; 0x2c34 <main+0x352>
    2c02:	16 d1       	rcall	.+556    	; 0x2e30 <_ZdaPv>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2c04:	17 c0       	rjmp	.+46     	; 0x2c34 <main+0x352>
    2c06:	a3 96       	adiw	r28, 0x23	; 35
    2c08:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c0a:	9d ad       	ldd	r25, Y+61	; 0x3d
    2c0c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2c0e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2c10:	a3 97       	sbiw	r28, 0x23	; 35
    2c12:	8d 87       	std	Y+13, r24	; 0x0d
    2c14:	9e 87       	std	Y+14, r25	; 0x0e
			chars_ = new char[other.length_ + 1];
    2c16:	af 87       	std	Y+15, r26	; 0x0f
    2c18:	b8 8b       	std	Y+16, r27	; 0x10
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	07 d1       	rcall	.+526    	; 0x2e2c <_Znaj>
			string_copy(chars_, other.chars_, other.length_);
    2c1e:	9a 8b       	std	Y+18, r25	; 0x12
    2c20:	89 8b       	std	Y+17, r24	; 0x11
    2c22:	a1 96       	adiw	r28, 0x21	; 33
    2c24:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c26:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c28:	a1 97       	sbiw	r28, 0x21	; 33
    2c2a:	a5 96       	adiw	r28, 0x25	; 37
    2c2c:	6e ad       	ldd	r22, Y+62	; 0x3e
    2c2e:	7f ad       	ldd	r23, Y+63	; 0x3f
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2c30:	a5 97       	sbiw	r28, 0x25	; 37
    2c32:	5b d3       	rcall	.+1718   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2c34:	61 96       	adiw	r28, 0x11	; 17
    2c36:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c38:	9d ad       	ldd	r25, Y+61	; 0x3d
    2c3a:	ae ad       	ldd	r26, Y+62	; 0x3e
    2c3c:	bf ad       	ldd	r27, Y+63	; 0x3f
    2c3e:	61 97       	sbiw	r28, 0x11	; 17
			chars_ = new char[other.length_ + 1];
    2c40:	8b 8b       	std	Y+19, r24	; 0x13
    2c42:	9c 8b       	std	Y+20, r25	; 0x14
    2c44:	ad 8b       	std	Y+21, r26	; 0x15
    2c46:	be 8b       	std	Y+22, r27	; 0x16
			string_copy(chars_, other.chars_, other.length_);
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	f0 d0       	rcall	.+480    	; 0x2e2c <_Znaj>
    2c4c:	98 8f       	std	Y+24, r25	; 0x18
    2c4e:	8f 8b       	std	Y+23, r24	; 0x17
    2c50:	2f 96       	adiw	r28, 0x0f	; 15
    2c52:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c54:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c56:	2f 97       	sbiw	r28, 0x0f	; 15
    2c58:	63 96       	adiw	r28, 0x13	; 19
					conn.SendData(conFrame.ID_, site.generate_site(conFrame.parameters_));
    2c5a:	6e ad       	ldd	r22, Y+62	; 0x3e
    2c5c:	7f ad       	ldd	r23, Y+63	; 0x3f
    2c5e:	63 97       	sbiw	r28, 0x13	; 19
    2c60:	44 d3       	rcall	.+1672   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2c62:	ae 01       	movw	r20, r28
    2c64:	43 5f       	subi	r20, 0xF3	; 243
    2c66:	5f 4f       	sbci	r21, 0xFF	; 255
    2c68:	be 01       	movw	r22, r28
    2c6a:	6d 5e       	subi	r22, 0xED	; 237
    2c6c:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		~string()
		{
			delete[] chars_;
    2c6e:	88 2d       	mov	r24, r8
    2c70:	99 2d       	mov	r25, r9
    2c72:	fd d9       	rcall	.-3078   	; 0x206e <_ZN10Connection8SendDataEN8Standard6stringES1_>
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <main+0x39c>
    2c7c:	d9 d0       	rcall	.+434    	; 0x2e30 <_ZdaPv>
    2c7e:	89 89       	ldd	r24, Y+17	; 0x11
    2c80:	9a 89       	ldd	r25, Y+18	; 0x12
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <main+0x3a6>
    2c86:	d4 d0       	rcall	.+424    	; 0x2e30 <_ZdaPv>
    2c88:	01 15       	cp	r16, r1
    2c8a:	11 05       	cpc	r17, r1
    2c8c:	11 f0       	breq	.+4      	; 0x2c92 <main+0x3b0>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2c8e:	c8 01       	movw	r24, r16
    2c90:	cf d0       	rcall	.+414    	; 0x2e30 <_ZdaPv>
    2c92:	61 96       	adiw	r28, 0x11	; 17
    2c94:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c96:	9d ad       	ldd	r25, Y+61	; 0x3d
    2c98:	ae ad       	ldd	r26, Y+62	; 0x3e
    2c9a:	bf ad       	ldd	r27, Y+63	; 0x3f
    2c9c:	61 97       	sbiw	r28, 0x11	; 17
			chars_ = new char[other.length_ + 1];
    2c9e:	89 8f       	std	Y+25, r24	; 0x19
    2ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca4:	bc 8f       	std	Y+28, r27	; 0x1c
    2ca6:	01 96       	adiw	r24, 0x01	; 1
			string_copy(chars_, other.chars_, other.length_);
    2ca8:	c1 d0       	rcall	.+386    	; 0x2e2c <_Znaj>
    2caa:	9e 8f       	std	Y+30, r25	; 0x1e
    2cac:	8d 8f       	std	Y+29, r24	; 0x1d
    2cae:	2f 96       	adiw	r28, 0x0f	; 15
    2cb0:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cb2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cb4:	2f 97       	sbiw	r28, 0x0f	; 15
    2cb6:	63 96       	adiw	r28, 0x13	; 19
					conn.close_connection(conFrame.ID_);
    2cb8:	6e ad       	ldd	r22, Y+62	; 0x3e
    2cba:	7f ad       	ldd	r23, Y+63	; 0x3f
    2cbc:	63 97       	sbiw	r28, 0x13	; 19
    2cbe:	15 d3       	rcall	.+1578   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2cc0:	be 01       	movw	r22, r28
    2cc2:	67 5e       	subi	r22, 0xE7	; 231
		}
		~string()
		{
			delete[] chars_;
    2cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc6:	88 2d       	mov	r24, r8
    2cc8:	99 2d       	mov	r25, r9
    2cca:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN10Connection16close_connectionEN8Standard6stringE>
    2cce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <main+0x3f6>
    2cd6:	ac d0       	rcall	.+344    	; 0x2e30 <_ZdaPv>
    2cd8:	a5 96       	adiw	r28, 0x25	; 37
    2cda:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cdc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cde:	a5 97       	sbiw	r28, 0x25	; 37
    2ce0:	00 97       	sbiw	r24, 0x00	; 0
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <main+0x404>
    2ce4:	a5 d0       	rcall	.+330    	; 0x2e30 <_ZdaPv>
    2ce6:	6f 96       	adiw	r28, 0x1f	; 31
    2ce8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cea:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cec:	6f 97       	sbiw	r28, 0x1f	; 31
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <main+0x412>
    2cf2:	9e d0       	rcall	.+316    	; 0x2e30 <_ZdaPv>
    2cf4:	69 96       	adiw	r28, 0x19	; 25
    2cf6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cfa:	69 97       	sbiw	r28, 0x19	; 25
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <main+0x420>
    2d00:	97 d0       	rcall	.+302    	; 0x2e30 <_ZdaPv>
    2d02:	63 96       	adiw	r28, 0x13	; 19
    2d04:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d06:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d08:	63 97       	sbiw	r28, 0x13	; 19
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <main+0x42e>
    2d0e:	e9 ce       	rjmp	.-558    	; 0x2ae2 <main+0x200>
    2d10:	8f d0       	rcall	.+286    	; 0x2e30 <_ZdaPv>
    2d12:	e7 ce       	rjmp	.-562    	; 0x2ae2 <main+0x200>
    2d14:	2b 96       	adiw	r28, 0x0b	; 11
    2d16:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d18:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d1a:	2b 97       	sbiw	r28, 0x0b	; 11
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <main+0x440>
    2d20:	87 d0       	rcall	.+270    	; 0x2e30 <_ZdaPv>


int main(void)
{
	//Setting up the server
	Server::server serv {};
    2d22:	ce 01       	movw	r24, r28
    2d24:	8f 5b       	subi	r24, 0xBF	; 191
    2d26:	9f 4f       	sbci	r25, 0xFF	; 255
    2d28:	db dc       	rcall	.-1610   	; 0x26e0 <_ZN6Server6serverD1Ev>
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
		serv.handleConnections();
	}
	//TODO: Implement handling multiple connections from one string.
	//TODO: Add Ability to host a server on a network
	//TODO: Investigate saving data to EEPROM
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	ca 59       	subi	r28, 0x9A	; 154
    2d30:	df 4f       	sbci	r29, 0xFF	; 255
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	1f 91       	pop	r17
    2d42:	0f 91       	pop	r16
    2d44:	ff 90       	pop	r15
    2d46:	ef 90       	pop	r14
    2d48:	df 90       	pop	r13
    2d4a:	cf 90       	pop	r12
    2d4c:	bf 90       	pop	r11
    2d4e:	af 90       	pop	r10
    2d50:	9f 90       	pop	r9
    2d52:	8f 90       	pop	r8
    2d54:	7f 90       	pop	r7
    2d56:	6f 90       	pop	r6
    2d58:	5f 90       	pop	r5
    2d5a:	4f 90       	pop	r4
    2d5c:	08 95       	ret

00002d5e <_GLOBAL__sub_I_main>:
    2d5e:	6c e6       	ldi	r22, 0x6C	; 108
#define CONNECTION_H
#include "ClientConnection.h"
#include "String.h"

using string = Standard::string;
const static string reset_command{"AT+RST"};
    2d60:	72 e0       	ldi	r23, 0x02	; 2
    2d62:	8c e9       	ldi	r24, 0x9C	; 156
    2d64:	93 e0       	ldi	r25, 0x03	; 3
    2d66:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string mode_command{"AT+CWMODE"};
    2d6a:	63 e7       	ldi	r22, 0x73	; 115
    2d6c:	72 e0       	ldi	r23, 0x02	; 2
    2d6e:	86 e9       	ldi	r24, 0x96	; 150
    2d70:	93 e0       	ldi	r25, 0x03	; 3
    2d72:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string multiple_connections_command{"AT+CIPMUX"};
    2d76:	6d e7       	ldi	r22, 0x7D	; 125
    2d78:	72 e0       	ldi	r23, 0x02	; 2
    2d7a:	80 e9       	ldi	r24, 0x90	; 144
    2d7c:	93 e0       	ldi	r25, 0x03	; 3
    2d7e:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string server_command{"AT+CIPSERVER"};
    2d82:	67 e8       	ldi	r22, 0x87	; 135
    2d84:	72 e0       	ldi	r23, 0x02	; 2
    2d86:	8a e8       	ldi	r24, 0x8A	; 138
    2d88:	93 e0       	ldi	r25, 0x03	; 3
    2d8a:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string send_command{"AT+CIPSEND"};
    2d8e:	64 e9       	ldi	r22, 0x94	; 148
    2d90:	72 e0       	ldi	r23, 0x02	; 2
    2d92:	84 e8       	ldi	r24, 0x84	; 132
    2d94:	93 e0       	ldi	r25, 0x03	; 3
    2d96:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string status_command{"AT+CIPSTATUS"};
    2d9a:	6f e9       	ldi	r22, 0x9F	; 159
    2d9c:	72 e0       	ldi	r23, 0x02	; 2
    2d9e:	8e e7       	ldi	r24, 0x7E	; 126
    2da0:	93 e0       	ldi	r25, 0x03	; 3
    2da2:	0e 94 b2 00 	call	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
const static string close_connection_command{"AT+CIPCLOSE"};
    2da6:	6c ea       	ldi	r22, 0xAC	; 172
    2da8:	72 e0       	ldi	r23, 0x02	; 2
    2daa:	88 e7       	ldi	r24, 0x78	; 120
    2dac:	93 e0       	ldi	r25, 0x03	; 3
    2dae:	0c 94 b2 00 	jmp	0x164	; 0x164 <_ZN8Standard6stringC1EPKc>
    2db2:	08 95       	ret

00002db4 <_GLOBAL__sub_D_main>:
    2db4:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <_ZL24close_connection_command+0x4>
    2db8:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <_ZL24close_connection_command+0x5>
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	09 f0       	breq	.+2      	; 0x2dc2 <_GLOBAL__sub_D_main+0xe>
    2dc0:	37 d0       	rcall	.+110    	; 0x2e30 <_ZdaPv>
    2dc2:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <_ZL14status_command+0x4>
    2dc6:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <_ZL14status_command+0x5>
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <_GLOBAL__sub_D_main+0x1c>
    2dce:	30 d0       	rcall	.+96     	; 0x2e30 <_ZdaPv>
    2dd0:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <_ZL12send_command+0x4>
    2dd4:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <_ZL12send_command+0x5>
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	09 f0       	breq	.+2      	; 0x2dde <_GLOBAL__sub_D_main+0x2a>
    2ddc:	29 d0       	rcall	.+82     	; 0x2e30 <_ZdaPv>
    2dde:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <_ZL14server_command+0x4>
    2de2:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <_ZL14server_command+0x5>
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	09 f0       	breq	.+2      	; 0x2dec <_GLOBAL__sub_D_main+0x38>
    2dea:	22 d0       	rcall	.+68     	; 0x2e30 <_ZdaPv>
    2dec:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <_ZL28multiple_connections_command+0x4>
    2df0:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <_ZL28multiple_connections_command+0x5>
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <_GLOBAL__sub_D_main+0x46>
    2df8:	1b d0       	rcall	.+54     	; 0x2e30 <_ZdaPv>
    2dfa:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <_ZL12mode_command+0x4>
    2dfe:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <_ZL12mode_command+0x5>
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	09 f0       	breq	.+2      	; 0x2e08 <_GLOBAL__sub_D_main+0x54>
    2e06:	14 d0       	rcall	.+40     	; 0x2e30 <_ZdaPv>
    2e08:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_ZL13reset_command+0x4>
    2e0c:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <_ZL13reset_command+0x5>
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <_GLOBAL__sub_D_main+0x62>
    2e14:	0d c0       	rjmp	.+26     	; 0x2e30 <_ZdaPv>
    2e16:	08 95       	ret

00002e18 <_Znwj>:
 *  Author: Marlon Abeln
 */ 
#include "Memory.h"
void* operator new(size_t objsize) 
{
	if(objsize ==0)
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	11 f4       	brne	.+4      	; 0x2e20 <_Znwj+0x8>
	objsize = 1;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
	return malloc(objsize);
    2e20:	8d c3       	rjmp	.+1818   	; 0x353c <malloc>
}
    2e22:	08 95       	ret

00002e24 <_ZdlPv>:
void operator delete(void *obj) 
{
	if(obj)
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <_ZdlPv+0x6>
		free(obj);
    2e28:	21 c4       	rjmp	.+2114   	; 0x366c <free>
    2e2a:	08 95       	ret

00002e2c <_Znaj>:
}
void* operator new[](size_t objsize)
{
	return ::operator new(objsize);
    2e2c:	f5 cf       	rjmp	.-22     	; 0x2e18 <_Znwj>
}
    2e2e:	08 95       	ret

00002e30 <_ZdaPv>:
void operator delete[](void *obj)
{
	if(obj)
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <_ZdaPv+0x6>
		free(obj);
    2e34:	1b c4       	rjmp	.+2102   	; 0x366c <free>
    2e36:	08 95       	ret

00002e38 <_ZN3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3addES2_S4_>:
		}
		return code;
	}

	template <class K, class V>
	const V &Hashmap<K, V>::add(K key, V element)
    2e38:	2f 92       	push	r2
    2e3a:	3f 92       	push	r3
    2e3c:	4f 92       	push	r4
    2e3e:	5f 92       	push	r5
    2e40:	6f 92       	push	r6
    2e42:	7f 92       	push	r7
    2e44:	8f 92       	push	r8
    2e46:	9f 92       	push	r9
    2e48:	af 92       	push	r10
    2e4a:	bf 92       	push	r11
    2e4c:	cf 92       	push	r12
    2e4e:	df 92       	push	r13
    2e50:	ef 92       	push	r14
    2e52:	ff 92       	push	r15
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	2a 97       	sbiw	r28, 0x0a	; 10
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	7c 01       	movw	r14, r24
    2e6e:	7a 83       	std	Y+2, r23	; 0x02
    2e70:	69 83       	std	Y+1, r22	; 0x01
    2e72:	6a 01       	movw	r12, r20
	{
		const int index = hash_code(key) % capacity_;
    2e74:	cb 01       	movw	r24, r22
    2e76:	17 d3       	rcall	.+1582   	; 0x34a6 <_ZN8Standard9hash_codeERKNS_6stringE>
		const MapEntry<K, V> *current_entry = elements_[index];
    2e78:	d7 01       	movw	r26, r14
    2e7a:	6d 91       	ld	r22, X+
    2e7c:	7c 91       	ld	r23, X
    2e7e:	2f d3       	rcall	.+1630   	; 0x34de <__divmodhi4>
    2e80:	8c 01       	movw	r16, r24
    2e82:	00 0f       	add	r16, r16
    2e84:	11 1f       	adc	r17, r17
    2e86:	d7 01       	movw	r26, r14
    2e88:	18 96       	adiw	r26, 0x08	; 8
    2e8a:	ed 91       	ld	r30, X+
    2e8c:	fc 91       	ld	r31, X
    2e8e:	19 97       	sbiw	r26, 0x09	; 9
    2e90:	e0 0f       	add	r30, r16
    2e92:	f1 1f       	adc	r31, r17
    2e94:	a0 80       	ld	r10, Z
    2e96:	b1 80       	ldd	r11, Z+1	; 0x01
		if (current_entry)
    2e98:	a1 14       	cp	r10, r1
    2e9a:	b1 04       	cpc	r11, r1
    2e9c:	a9 f0       	breq	.+42     	; 0x2ec8 <_ZN3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3addES2_S4_+0x90>
		}
		int size() const { return length_; }
		char &operator[](const int index) const { return chars_[index]; }
		operator char *() const { return chars_; }
		bool operator==(const string &other) const { return string_compare(chars_, other.chars_) == 0; }
    2e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea2:	64 81       	ldd	r22, Z+4	; 0x04
    2ea4:	75 81       	ldd	r23, Z+5	; 0x05
    2ea6:	d5 01       	movw	r26, r10
    2ea8:	14 96       	adiw	r26, 0x04	; 4
    2eaa:	8d 91       	ld	r24, X+
    2eac:	9c 91       	ld	r25, X
    2eae:	15 97       	sbiw	r26, 0x05	; 5
    2eb0:	2b d2       	rcall	.+1110   	; 0x3308 <_ZN8Standard14string_compareEPKcS1_>
		{
			while (current_entry)
			{
				if (current_entry->key_ == key)
    2eb2:	89 2b       	or	r24, r25
    2eb4:	19 f4       	brne	.+6      	; 0x2ebc <_ZN3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3addES2_S4_+0x84>
				return current_entry->value_;
    2eb6:	c5 01       	movw	r24, r10
    2eb8:	06 96       	adiw	r24, 0x06	; 6
    2eba:	9a c0       	rjmp	.+308    	; 0x2ff0 <_ZN3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3addES2_S4_+0x1b8>
				current_entry = current_entry->next_;
    2ebc:	f5 01       	movw	r30, r10
    2ebe:	a6 84       	ldd	r10, Z+14	; 0x0e
    2ec0:	b7 84       	ldd	r11, Z+15	; 0x0f
	{
		const int index = hash_code(key) % capacity_;
		const MapEntry<K, V> *current_entry = elements_[index];
		if (current_entry)
		{
			while (current_entry)
    2ec2:	a1 14       	cp	r10, r1
    2ec4:	b1 04       	cpc	r11, r1
    2ec6:	59 f7       	brne	.-42     	; 0x2e9e <_ZN3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3addES2_S4_+0x66>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2ec8:	a9 81       	ldd	r26, Y+1	; 0x01
    2eca:	ba 81       	ldd	r27, Y+2	; 0x02
    2ecc:	8d 90       	ld	r8, X+
    2ece:	9d 90       	ld	r9, X+
    2ed0:	ad 90       	ld	r10, X+
    2ed2:	bc 90       	ld	r11, X
			chars_ = new char[other.length_ + 1];
    2ed4:	f4 01       	movw	r30, r8
    2ed6:	31 96       	adiw	r30, 0x01	; 1
    2ed8:	f8 87       	std	Y+8, r31	; 0x08
    2eda:	ef 83       	std	Y+7, r30	; 0x07
    2edc:	cf 01       	movw	r24, r30
    2ede:	a6 df       	rcall	.-180    	; 0x2e2c <_Znaj>
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
			string_copy(chars_, other.chars_, other.length_);
    2ee4:	a9 81       	ldd	r26, Y+1	; 0x01
    2ee6:	ba 81       	ldd	r27, Y+2	; 0x02
    2ee8:	4d 91       	ld	r20, X+
    2eea:	5c 91       	ld	r21, X
    2eec:	11 97       	sbiw	r26, 0x01	; 1
    2eee:	14 96       	adiw	r26, 0x04	; 4
    2ef0:	6d 91       	ld	r22, X+
    2ef2:	7c 91       	ld	r23, X
    2ef4:	15 97       	sbiw	r26, 0x05	; 5
    2ef6:	f9 d1       	rcall	.+1010   	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2ef8:	f6 01       	movw	r30, r12
    2efa:	40 80       	ld	r4, Z
    2efc:	51 80       	ldd	r5, Z+1	; 0x01
    2efe:	62 80       	ldd	r6, Z+2	; 0x02
			chars_ = new char[other.length_ + 1];
    2f00:	73 80       	ldd	r7, Z+3	; 0x03
    2f02:	c2 01       	movw	r24, r4
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
    2f0a:	90 df       	rcall	.-224    	; 0x2e2c <_Znaj>
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01
			string_copy(chars_, other.chars_, other.length_);
    2f10:	d6 01       	movw	r26, r12
    2f12:	4d 91       	ld	r20, X+
    2f14:	5c 91       	ld	r21, X
    2f16:	11 97       	sbiw	r26, 0x01	; 1
    2f18:	14 96       	adiw	r26, 0x04	; 4
    2f1a:	6d 91       	ld	r22, X+
    2f1c:	7c 91       	ld	r23, X
    2f1e:	15 97       	sbiw	r26, 0x05	; 5

using string = Standard::string;

namespace Webcontent
{
	class Website
    2f20:	e4 d1       	rcall	.+968    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2f22:	f6 01       	movw	r30, r12
    2f24:	c6 80       	ldd	r12, Z+6	; 0x06
				if (current_entry->key_ == key)
				return current_entry->value_;
				current_entry = current_entry->next_;
			}
		}
		elements_[index] = new MapEntry<K, V>(key, element, elements_[index]);
    2f26:	d7 80       	ldd	r13, Z+7	; 0x07
    2f28:	80 e1       	ldi	r24, 0x10	; 16
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	75 df       	rcall	.-278    	; 0x2e18 <_Znwj>
    2f2e:	9a 87       	std	Y+10, r25	; 0x0a
    2f30:	89 87       	std	Y+9, r24	; 0x09
    2f32:	d7 01       	movw	r26, r14
    2f34:	18 96       	adiw	r26, 0x08	; 8
    2f36:	ed 91       	ld	r30, X+
    2f38:	fc 91       	ld	r31, X
    2f3a:	19 97       	sbiw	r26, 0x09	; 9
    2f3c:	e0 0f       	add	r30, r16
    2f3e:	f1 1f       	adc	r31, r17
    2f40:	20 80       	ld	r2, Z
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2f42:	31 80       	ldd	r3, Z+1	; 0x01
    2f44:	fc 01       	movw	r30, r24
    2f46:	80 82       	st	Z, r8
    2f48:	91 82       	std	Z+1, r9	; 0x01
    2f4a:	a2 82       	std	Z+2, r10	; 0x02
			chars_ = new char[other.length_ + 1];
    2f4c:	b3 82       	std	Z+3, r11	; 0x03
    2f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f50:	98 85       	ldd	r25, Y+8	; 0x08
    2f52:	6c df       	rcall	.-296    	; 0x2e2c <_Znaj>
    2f54:	a9 85       	ldd	r26, Y+9	; 0x09
    2f56:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f58:	15 96       	adiw	r26, 0x05	; 5
    2f5a:	9c 93       	st	X, r25
    2f5c:	8e 93       	st	-X, r24
			string_copy(chars_, other.chars_, other.length_);
    2f5e:	14 97       	sbiw	r26, 0x04	; 4
    2f60:	a4 01       	movw	r20, r8
    2f62:	6b 81       	ldd	r22, Y+3	; 0x03
    2f64:	7c 81       	ldd	r23, Y+4	; 0x04
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    2f66:	c1 d1       	rcall	.+898    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2f68:	e9 85       	ldd	r30, Y+9	; 0x09
    2f6a:	fa 85       	ldd	r31, Y+10	; 0x0a
    2f6c:	46 82       	std	Z+6, r4	; 0x06
    2f6e:	57 82       	std	Z+7, r5	; 0x07
    2f70:	60 86       	std	Z+8, r6	; 0x08
			chars_ = new char[other.length_ + 1];
    2f72:	71 86       	std	Z+9, r7	; 0x09
    2f74:	8d 81       	ldd	r24, Y+5	; 0x05
    2f76:	9e 81       	ldd	r25, Y+6	; 0x06
    2f78:	59 df       	rcall	.-334    	; 0x2e2c <_Znaj>
    2f7a:	a9 85       	ldd	r26, Y+9	; 0x09
    2f7c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f7e:	1b 96       	adiw	r26, 0x0b	; 11
    2f80:	9c 93       	st	X, r25
    2f82:	8e 93       	st	-X, r24
			string_copy(chars_, other.chars_, other.length_);
    2f84:	1a 97       	sbiw	r26, 0x0a	; 10
    2f86:	a2 01       	movw	r20, r4
    2f88:	69 81       	ldd	r22, Y+1	; 0x01
    2f8a:	7a 81       	ldd	r23, Y+2	; 0x02
    2f8c:	ae d1       	rcall	.+860    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    2f8e:	e9 85       	ldd	r30, Y+9	; 0x09
    2f90:	fa 85       	ldd	r31, Y+10	; 0x0a
    2f92:	d5 86       	std	Z+13, r13	; 0x0d
    2f94:	c4 86       	std	Z+12, r12	; 0x0c
	struct MapEntry
	{
		K key_{};
		V value_{};
		MapEntry *next_{};
		MapEntry(K key, V value, MapEntry<K, V> *next = nullptr) : key_{key}, value_{value}, next_{next} {}
    2f96:	37 86       	std	Z+15, r3	; 0x0f
    2f98:	26 86       	std	Z+14, r2	; 0x0e
				if (current_entry->key_ == key)
				return current_entry->value_;
				current_entry = current_entry->next_;
			}
		}
		elements_[index] = new MapEntry<K, V>(key, element, elements_[index]);
    2f9a:	d7 01       	movw	r26, r14
    2f9c:	18 96       	adiw	r26, 0x08	; 8
    2f9e:	ed 91       	ld	r30, X+
    2fa0:	fc 91       	ld	r31, X
    2fa2:	19 97       	sbiw	r26, 0x09	; 9
    2fa4:	e0 0f       	add	r30, r16
    2fa6:	f1 1f       	adc	r31, r17
    2fa8:	89 85       	ldd	r24, Y+9	; 0x09
    2faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fac:	91 83       	std	Z+1, r25	; 0x01
		}
		~string()
		{
			delete[] chars_;
    2fae:	80 83       	st	Z, r24
    2fb0:	a9 81       	ldd	r26, Y+1	; 0x01
    2fb2:	ba 81       	ldd	r27, Y+2	; 0x02
    2fb4:	10 97       	sbiw	r26, 0x00	; 0
    2fb6:	11 f0       	breq	.+4      	; 0x2fbc <_ZN3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3addES2_S4_+0x184>
    2fb8:	cd 01       	movw	r24, r26
    2fba:	3a df       	rcall	.-396    	; 0x2e30 <_ZdaPv>
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	30 97       	sbiw	r30, 0x00	; 0
    2fc2:	11 f0       	breq	.+4      	; 0x2fc8 <_ZN3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3addES2_S4_+0x190>
    2fc4:	cf 01       	movw	r24, r30
    2fc6:	34 df       	rcall	.-408    	; 0x2e30 <_ZdaPv>
    2fc8:	d7 01       	movw	r26, r14
		++length_;
    2fca:	12 96       	adiw	r26, 0x02	; 2
    2fcc:	8d 91       	ld	r24, X+
    2fce:	9c 91       	ld	r25, X
    2fd0:	13 97       	sbiw	r26, 0x03	; 3
    2fd2:	01 96       	adiw	r24, 0x01	; 1
    2fd4:	13 96       	adiw	r26, 0x03	; 3
    2fd6:	9c 93       	st	X, r25
    2fd8:	8e 93       	st	-X, r24
    2fda:	12 97       	sbiw	r26, 0x02	; 2
    2fdc:	18 96       	adiw	r26, 0x08	; 8
		return elements_[index]->value_;
    2fde:	8d 91       	ld	r24, X+
    2fe0:	9c 91       	ld	r25, X
    2fe2:	19 97       	sbiw	r26, 0x09	; 9
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	e0 0f       	add	r30, r16
    2fe8:	f1 1f       	adc	r31, r17
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	06 96       	adiw	r24, 0x06	; 6
    2ff0:	2a 96       	adiw	r28, 0x0a	; 10
	}
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	f8 94       	cli
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	1f 91       	pop	r17
    3002:	0f 91       	pop	r16
    3004:	ff 90       	pop	r15
    3006:	ef 90       	pop	r14
    3008:	df 90       	pop	r13
    300a:	cf 90       	pop	r12
    300c:	bf 90       	pop	r11
    300e:	af 90       	pop	r10
    3010:	9f 90       	pop	r9
    3012:	8f 90       	pop	r8
    3014:	7f 90       	pop	r7
    3016:	6f 90       	pop	r6
    3018:	5f 90       	pop	r5
    301a:	4f 90       	pop	r4
    301c:	3f 90       	pop	r3
    301e:	2f 90       	pop	r2
    3020:	08 95       	ret

00003022 <_ZN10webMapping7Sitemap3addEN8Standard6stringEN10Webcontent7WebsiteE>:
    3022:	cf 92       	push	r12
 */ 

#include "SiteMapping.h"

void webMapping::Sitemap::add(string link, Website site)
{
    3024:	df 92       	push	r13
    3026:	ef 92       	push	r14
    3028:	ff 92       	push	r15
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	2e 97       	sbiw	r28, 0x0e	; 14
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	f8 94       	cli
    303c:	de bf       	out	0x3e, r29	; 62
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	cd bf       	out	0x3d, r28	; 61
    3042:	6c 01       	movw	r12, r24
    3044:	7b 01       	movw	r14, r22
    3046:	8a 01       	movw	r16, r20
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    3048:	fa 01       	movw	r30, r20
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	a2 81       	ldd	r26, Z+2	; 0x02
    3050:	b3 81       	ldd	r27, Z+3	; 0x03
    3052:	8f 83       	std	Y+7, r24	; 0x07
    3054:	98 87       	std	Y+8, r25	; 0x08
    3056:	a9 87       	std	Y+9, r26	; 0x09
    3058:	ba 87       	std	Y+10, r27	; 0x0a
			chars_ = new char[other.length_ + 1];
    305a:	01 96       	adiw	r24, 0x01	; 1
    305c:	e7 de       	rcall	.-562    	; 0x2e2c <_Znaj>
    305e:	9c 87       	std	Y+12, r25	; 0x0c
    3060:	8b 87       	std	Y+11, r24	; 0x0b
			string_copy(chars_, other.chars_, other.length_);
    3062:	f8 01       	movw	r30, r16
    3064:	40 81       	ld	r20, Z
    3066:	51 81       	ldd	r21, Z+1	; 0x01
    3068:	64 81       	ldd	r22, Z+4	; 0x04
    306a:	75 81       	ldd	r23, Z+5	; 0x05
    306c:	3e d1       	rcall	.+636    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    306e:	f8 01       	movw	r30, r16
    3070:	86 81       	ldd	r24, Z+6	; 0x06
    3072:	97 81       	ldd	r25, Z+7	; 0x07
    3074:	9e 87       	std	Y+14, r25	; 0x0e
    3076:	8d 87       	std	Y+13, r24	; 0x0d
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    3078:	f7 01       	movw	r30, r14
    307a:	80 81       	ld	r24, Z
    307c:	91 81       	ldd	r25, Z+1	; 0x01
    307e:	a2 81       	ldd	r26, Z+2	; 0x02
    3080:	b3 81       	ldd	r27, Z+3	; 0x03
    3082:	89 83       	std	Y+1, r24	; 0x01
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	ab 83       	std	Y+3, r26	; 0x03
			chars_ = new char[other.length_ + 1];
    3088:	bc 83       	std	Y+4, r27	; 0x04
    308a:	01 96       	adiw	r24, 0x01	; 1
    308c:	cf de       	rcall	.-610    	; 0x2e2c <_Znaj>
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, other.chars_, other.length_);
    3092:	f7 01       	movw	r30, r14
    3094:	40 81       	ld	r20, Z
    3096:	51 81       	ldd	r21, Z+1	; 0x01
    3098:	64 81       	ldd	r22, Z+4	; 0x04
    309a:	75 81       	ldd	r23, Z+5	; 0x05
    309c:	26 d1       	rcall	.+588    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
	site_mapping_.add(link, site);
    309e:	ae 01       	movw	r20, r28
    30a0:	49 5f       	subi	r20, 0xF9	; 249
    30a2:	5f 4f       	sbci	r21, 0xFF	; 255
    30a4:	be 01       	movw	r22, r28
    30a6:	6f 5f       	subi	r22, 0xFF	; 255
    30a8:	7f 4f       	sbci	r23, 0xFF	; 255
    30aa:	c6 01       	movw	r24, r12
    30ac:	c5 de       	rcall	.-630    	; 0x2e38 <_ZN3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3addES2_S4_>
		}
		~string()
		{
			delete[] chars_;
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	9e 81       	ldd	r25, Y+6	; 0x06
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	09 f0       	breq	.+2      	; 0x30b8 <_ZN10webMapping7Sitemap3addEN8Standard6stringEN10Webcontent7WebsiteE+0x96>
    30b6:	bc de       	rcall	.-648    	; 0x2e30 <_ZdaPv>
    30b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    30ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	09 f0       	breq	.+2      	; 0x30c2 <_ZN10webMapping7Sitemap3addEN8Standard6stringEN10Webcontent7WebsiteE+0xa0>
    30c0:	b7 de       	rcall	.-658    	; 0x2e30 <_ZdaPv>
    30c2:	2e 96       	adiw	r28, 0x0e	; 14
}
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	df 91       	pop	r29
    30d0:	cf 91       	pop	r28
    30d2:	1f 91       	pop	r17
    30d4:	0f 91       	pop	r16
    30d6:	ff 90       	pop	r15
    30d8:	ef 90       	pop	r14
    30da:	df 90       	pop	r13
    30dc:	cf 90       	pop	r12
    30de:	08 95       	ret

000030e0 <_ZNK3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3getES2_>:
    30e0:	0f 93       	push	r16
	template <class K, class V>
	V *Hashmap<K, V>::get(const K key) const
    30e2:	1f 93       	push	r17
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	ec 01       	movw	r28, r24
    30ea:	8b 01       	movw	r16, r22
	{
		const int index = hash_code(key) % capacity_;
    30ec:	cb 01       	movw	r24, r22
    30ee:	db d1       	rcall	.+950    	; 0x34a6 <_ZN8Standard9hash_codeERKNS_6stringE>
		MapEntry<K, V> *current_entry = elements_[index];
    30f0:	68 81       	ld	r22, Y
    30f2:	79 81       	ldd	r23, Y+1	; 0x01
    30f4:	f4 d1       	rcall	.+1000   	; 0x34de <__divmodhi4>
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	e8 85       	ldd	r30, Y+8	; 0x08
    30fc:	f9 85       	ldd	r31, Y+9	; 0x09
    30fe:	e8 0f       	add	r30, r24
    3100:	f9 1f       	adc	r31, r25
    3102:	c0 81       	ld	r28, Z
    3104:	d1 81       	ldd	r29, Z+1	; 0x01
		if (current_entry)
    3106:	20 97       	sbiw	r28, 0x00	; 0
    3108:	99 f0       	breq	.+38     	; 0x3130 <_ZNK3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3getES2_+0x50>
		}
		int size() const { return length_; }
		char &operator[](const int index) const { return chars_[index]; }
		operator char *() const { return chars_; }
		bool operator==(const string &other) const { return string_compare(chars_, other.chars_) == 0; }
    310a:	f8 01       	movw	r30, r16
    310c:	64 81       	ldd	r22, Z+4	; 0x04
    310e:	75 81       	ldd	r23, Z+5	; 0x05
    3110:	8c 81       	ldd	r24, Y+4	; 0x04
    3112:	9d 81       	ldd	r25, Y+5	; 0x05
    3114:	f9 d0       	rcall	.+498    	; 0x3308 <_ZN8Standard14string_compareEPKcS1_>
		{
			while (current_entry)
			{
				if (current_entry->key_ == key)
    3116:	89 2b       	or	r24, r25
    3118:	19 f4       	brne	.+6      	; 0x3120 <_ZNK3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3getES2_+0x40>
				return &(current_entry->value_);
    311a:	ce 01       	movw	r24, r28
    311c:	06 96       	adiw	r24, 0x06	; 6
    311e:	0a c0       	rjmp	.+20     	; 0x3134 <_ZNK3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3getES2_+0x54>
				current_entry = current_entry->next_;
    3120:	0e 84       	ldd	r0, Y+14	; 0x0e
    3122:	df 85       	ldd	r29, Y+15	; 0x0f
    3124:	c0 2d       	mov	r28, r0
	{
		const int index = hash_code(key) % capacity_;
		MapEntry<K, V> *current_entry = elements_[index];
		if (current_entry)
		{
			while (current_entry)
    3126:	20 97       	sbiw	r28, 0x00	; 0
    3128:	81 f7       	brne	.-32     	; 0x310a <_ZNK3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3getES2_+0x2a>
				if (current_entry->key_ == key)
				return &(current_entry->value_);
				current_entry = current_entry->next_;
			}
		}
		return nullptr;
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	02 c0       	rjmp	.+4      	; 0x3134 <_ZNK3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3getES2_+0x54>
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
	}
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	08 95       	ret

0000313e <_ZN10webMapping7Sitemap3getEN8Standard6stringE>:
Website webMapping::Sitemap::get(string link)
{
    313e:	4f 92       	push	r4
    3140:	5f 92       	push	r5
    3142:	6f 92       	push	r6
    3144:	7f 92       	push	r7
    3146:	af 92       	push	r10
    3148:	bf 92       	push	r11
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	ff 92       	push	r15
    3152:	0f 93       	push	r16
    3154:	1f 93       	push	r17
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	2c 97       	sbiw	r28, 0x0c	; 12
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	7c 01       	movw	r14, r24
    316c:	6b 01       	movw	r12, r22
    316e:	8a 01       	movw	r16, r20
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    3170:	fa 01       	movw	r30, r20
    3172:	80 81       	ld	r24, Z
    3174:	91 81       	ldd	r25, Z+1	; 0x01
    3176:	a2 81       	ldd	r26, Z+2	; 0x02
    3178:	b3 81       	ldd	r27, Z+3	; 0x03
    317a:	8f 83       	std	Y+7, r24	; 0x07
    317c:	98 87       	std	Y+8, r25	; 0x08
    317e:	a9 87       	std	Y+9, r26	; 0x09
    3180:	ba 87       	std	Y+10, r27	; 0x0a
			chars_ = new char[other.length_ + 1];
    3182:	01 96       	adiw	r24, 0x01	; 1
    3184:	53 de       	rcall	.-858    	; 0x2e2c <_Znaj>
    3186:	9c 87       	std	Y+12, r25	; 0x0c
    3188:	8b 87       	std	Y+11, r24	; 0x0b
			string_copy(chars_, other.chars_, other.length_);
    318a:	f8 01       	movw	r30, r16
    318c:	40 81       	ld	r20, Z
    318e:	51 81       	ldd	r21, Z+1	; 0x01
    3190:	64 81       	ldd	r22, Z+4	; 0x04
    3192:	75 81       	ldd	r23, Z+5	; 0x05
    3194:	aa d0       	rcall	.+340    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>

	if ((site_mapping_.get(link)))
    3196:	be 01       	movw	r22, r28
    3198:	69 5f       	subi	r22, 0xF9	; 249
    319a:	7f 4f       	sbci	r23, 0xFF	; 255
    319c:	c6 01       	movw	r24, r12
    319e:	a0 df       	rcall	.-192    	; 0x30e0 <_ZNK3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3getES2_>
    31a0:	5c 01       	movw	r10, r24
		}
		~string()
		{
			delete[] chars_;
    31a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    31a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	09 f0       	breq	.+2      	; 0x31ac <_ZN10webMapping7Sitemap3getEN8Standard6stringE+0x6e>
    31aa:	42 de       	rcall	.-892    	; 0x2e30 <_ZdaPv>
    31ac:	ab 28       	or	r10, r11
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <_ZN10webMapping7Sitemap3getEN8Standard6stringE+0x74>
    31b0:	49 c0       	rjmp	.+146    	; 0x3244 <_ZN10webMapping7Sitemap3getEN8Standard6stringE+0x106>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    31b2:	f8 01       	movw	r30, r16
    31b4:	80 81       	ld	r24, Z
    31b6:	91 81       	ldd	r25, Z+1	; 0x01
    31b8:	a2 81       	ldd	r26, Z+2	; 0x02
    31ba:	b3 81       	ldd	r27, Z+3	; 0x03
    31bc:	89 83       	std	Y+1, r24	; 0x01
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	ab 83       	std	Y+3, r26	; 0x03
			chars_ = new char[other.length_ + 1];
    31c2:	bc 83       	std	Y+4, r27	; 0x04
    31c4:	01 96       	adiw	r24, 0x01	; 1
    31c6:	32 de       	rcall	.-924    	; 0x2e2c <_Znaj>
    31c8:	9e 83       	std	Y+6, r25	; 0x06
    31ca:	8d 83       	std	Y+5, r24	; 0x05
			string_copy(chars_, other.chars_, other.length_);
    31cc:	f8 01       	movw	r30, r16
    31ce:	40 81       	ld	r20, Z
    31d0:	51 81       	ldd	r21, Z+1	; 0x01
    31d2:	64 81       	ldd	r22, Z+4	; 0x04
    31d4:	75 81       	ldd	r23, Z+5	; 0x05
	{
		Website site{*site_mapping_.get(link)};
    31d6:	89 d0       	rcall	.+274    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    31d8:	be 01       	movw	r22, r28
    31da:	6f 5f       	subi	r22, 0xFF	; 255
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	c6 01       	movw	r24, r12
    31e0:	7f df       	rcall	.-258    	; 0x30e0 <_ZNK3Map7HashmapIN8Standard6stringEN10Webcontent7WebsiteEE3getES2_>
    31e2:	8c 01       	movw	r16, r24
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    31e4:	fc 01       	movw	r30, r24
    31e6:	40 80       	ld	r4, Z
    31e8:	51 80       	ldd	r5, Z+1	; 0x01
    31ea:	62 80       	ldd	r6, Z+2	; 0x02
			chars_ = new char[other.length_ + 1];
    31ec:	73 80       	ldd	r7, Z+3	; 0x03
    31ee:	52 01       	movw	r10, r4
    31f0:	ff ef       	ldi	r31, 0xFF	; 255
    31f2:	af 1a       	sub	r10, r31
    31f4:	bf 0a       	sbc	r11, r31
    31f6:	c5 01       	movw	r24, r10
    31f8:	19 de       	rcall	.-974    	; 0x2e2c <_Znaj>
			string_copy(chars_, other.chars_, other.length_);
    31fa:	6c 01       	movw	r12, r24
    31fc:	f8 01       	movw	r30, r16
    31fe:	40 81       	ld	r20, Z
    3200:	51 81       	ldd	r21, Z+1	; 0x01
    3202:	64 81       	ldd	r22, Z+4	; 0x04
    3204:	75 81       	ldd	r23, Z+5	; 0x05
    3206:	71 d0       	rcall	.+226    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    3208:	f8 01       	movw	r30, r16
    320a:	06 81       	ldd	r16, Z+6	; 0x06
		}
		~string()
		{
			delete[] chars_;
    320c:	17 81       	ldd	r17, Z+7	; 0x07
    320e:	8d 81       	ldd	r24, Y+5	; 0x05
    3210:	9e 81       	ldd	r25, Y+6	; 0x06
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	09 f0       	breq	.+2      	; 0x3218 <_ZN10webMapping7Sitemap3getEN8Standard6stringE+0xda>
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
			length_ = other.length_;
    3216:	0c de       	rcall	.-1000   	; 0x2e30 <_ZdaPv>
    3218:	f7 01       	movw	r30, r14
    321a:	40 82       	st	Z, r4
    321c:	51 82       	std	Z+1, r5	; 0x01
			chars_ = new char[other.length_ + 1];
    321e:	62 82       	std	Z+2, r6	; 0x02
    3220:	73 82       	std	Z+3, r7	; 0x03
    3222:	c5 01       	movw	r24, r10
    3224:	03 de       	rcall	.-1018   	; 0x2e2c <_Znaj>
    3226:	f7 01       	movw	r30, r14
			string_copy(chars_, other.chars_, other.length_);
    3228:	95 83       	std	Z+5, r25	; 0x05
    322a:	84 83       	std	Z+4, r24	; 0x04
    322c:	a2 01       	movw	r20, r4
    322e:	b6 01       	movw	r22, r12
    3230:	5c d0       	rcall	.+184    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    3232:	f7 01       	movw	r30, r14
    3234:	17 83       	std	Z+7, r17	; 0x07
		}
		~string()
		{
			delete[] chars_;
    3236:	06 83       	std	Z+6, r16	; 0x06
    3238:	c1 14       	cp	r12, r1
    323a:	d1 04       	cpc	r13, r1
    323c:	31 f1       	breq	.+76     	; 0x328a <_ZN10webMapping7Sitemap3getEN8Standard6stringE+0x14c>
    323e:	c6 01       	movw	r24, r12
    3240:	f7 dd       	rcall	.-1042   	; 0x2e30 <_ZdaPv>
    3242:	23 c0       	rjmp	.+70     	; 0x328a <_ZN10webMapping7Sitemap3getEN8Standard6stringE+0x14c>
			length_ = string_length(text);
			chars_ = new char[length_ + 1];
			string_copy(chars_, text, length_);
		}
		string(const string &other)
		{
    3244:	f7 01       	movw	r30, r14
    3246:	10 82       	st	Z, r1
    3248:	11 82       	std	Z+1, r1	; 0x01
    324a:	12 82       	std	Z+2, r1	; 0x02
    324c:	13 82       	std	Z+3, r1	; 0x03
			length_ = other.length_;
    324e:	f6 01       	movw	r30, r12
    3250:	82 85       	ldd	r24, Z+10	; 0x0a
    3252:	93 85       	ldd	r25, Z+11	; 0x0b
    3254:	a4 85       	ldd	r26, Z+12	; 0x0c
    3256:	b5 85       	ldd	r27, Z+13	; 0x0d
    3258:	f7 01       	movw	r30, r14
    325a:	80 83       	st	Z, r24
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	a2 83       	std	Z+2, r26	; 0x02
			chars_ = new char[other.length_ + 1];
    3260:	b3 83       	std	Z+3, r27	; 0x03
    3262:	f6 01       	movw	r30, r12
    3264:	82 85       	ldd	r24, Z+10	; 0x0a
    3266:	93 85       	ldd	r25, Z+11	; 0x0b
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	e0 dd       	rcall	.-1088   	; 0x2e2c <_Znaj>
    326c:	f7 01       	movw	r30, r14
    326e:	95 83       	std	Z+5, r25	; 0x05
			string_copy(chars_, other.chars_, other.length_);
    3270:	84 83       	std	Z+4, r24	; 0x04
    3272:	f6 01       	movw	r30, r12
    3274:	42 85       	ldd	r20, Z+10	; 0x0a
    3276:	53 85       	ldd	r21, Z+11	; 0x0b
    3278:	66 85       	ldd	r22, Z+14	; 0x0e
    327a:	77 85       	ldd	r23, Z+15	; 0x0f
    327c:	36 d0       	rcall	.+108    	; 0x32ea <_ZN8Standard11string_copyEPcPKci>
    327e:	f6 01       	movw	r30, r12
    3280:	80 89       	ldd	r24, Z+16	; 0x10
    3282:	91 89       	ldd	r25, Z+17	; 0x11
    3284:	f7 01       	movw	r30, r14
    3286:	97 83       	std	Z+7, r25	; 0x07
    3288:	86 83       	std	Z+6, r24	; 0x06
		return site;
	}
	else
	return not_found;
    328a:	c7 01       	movw	r24, r14
    328c:	2c 96       	adiw	r28, 0x0c	; 12
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	df 90       	pop	r13
    32a6:	cf 90       	pop	r12
    32a8:	bf 90       	pop	r11
    32aa:	af 90       	pop	r10
    32ac:	7f 90       	pop	r7
    32ae:	6f 90       	pop	r6
    32b0:	5f 90       	pop	r5
    32b2:	4f 90       	pop	r4
    32b4:	08 95       	ret

000032b6 <_ZN8Standard13string_lengthEPKc>:
#include "String.h"

unsigned long Standard::string_length(const char *chars)
{
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	fc 01       	movw	r30, r24
    unsigned long count{0};
    32c0:	60 e0       	ldi	r22, 0x00	; 0
    32c2:	70 e0       	ldi	r23, 0x00	; 0
    32c4:	cb 01       	movw	r24, r22
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <_ZN8Standard13string_lengthEPKc+0x16>
    while (chars[count++])
    32c8:	c7 01       	movw	r24, r14
    32ca:	b6 01       	movw	r22, r12
    32cc:	6b 01       	movw	r12, r22
    32ce:	7c 01       	movw	r14, r24
    32d0:	2f ef       	ldi	r18, 0xFF	; 255
    32d2:	c2 1a       	sub	r12, r18
    32d4:	d2 0a       	sbc	r13, r18
    32d6:	e2 0a       	sbc	r14, r18
    32d8:	f2 0a       	sbc	r15, r18
    32da:	21 91       	ld	r18, Z+
    32dc:	21 11       	cpse	r18, r1
    32de:	f4 cf       	rjmp	.-24     	; 0x32c8 <_ZN8Standard13string_lengthEPKc+0x12>
        /**do nothing**/;
    return count - 1;
}
    32e0:	ff 90       	pop	r15
    32e2:	ef 90       	pop	r14
    32e4:	df 90       	pop	r13
    32e6:	cf 90       	pop	r12
    32e8:	08 95       	ret

000032ea <_ZN8Standard11string_copyEPcPKci>:
void Standard::string_copy(char *dest, const char *source, const int length)
{
    for (int i = 0; i <= length; ++i)
    32ea:	55 23       	and	r21, r21
    32ec:	64 f0       	brlt	.+24     	; 0x3306 <_ZN8Standard11string_copyEPcPKci+0x1c>
    32ee:	a6 2f       	mov	r26, r22
    32f0:	b7 2f       	mov	r27, r23
    32f2:	e8 2f       	mov	r30, r24
    32f4:	f9 2f       	mov	r31, r25
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    {
        dest[i] = source[i];
    32fa:	2d 91       	ld	r18, X+
    32fc:	21 93       	st	Z+, r18
        /**do nothing**/;
    return count - 1;
}
void Standard::string_copy(char *dest, const char *source, const int length)
{
    for (int i = 0; i <= length; ++i)
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	48 17       	cp	r20, r24
    3302:	59 07       	cpc	r21, r25
    3304:	d4 f7       	brge	.-12     	; 0x32fa <_ZN8Standard11string_copyEPcPKci+0x10>
    3306:	08 95       	ret

00003308 <_ZN8Standard14string_compareEPKcS1_>:
    {
        dest[i] = source[i];
    }
}
int Standard::string_compare(const char *first, const char *second)
{
    3308:	cf 93       	push	r28
    330a:	df 93       	push	r29
    int loop_count{0};
    while (first[loop_count] && second[loop_count])
    330c:	fc 01       	movw	r30, r24
    330e:	20 81       	ld	r18, Z
    3310:	22 23       	and	r18, r18
    3312:	09 f1       	breq	.+66     	; 0x3356 <_ZN8Standard14string_compareEPKcS1_+0x4e>
    3314:	fb 01       	movw	r30, r22
    3316:	40 81       	ld	r20, Z
    3318:	44 23       	and	r20, r20
    331a:	61 f1       	breq	.+88     	; 0x3374 <_ZN8Standard14string_compareEPKcS1_+0x6c>
    {
	    int sum = first[loop_count] - second[loop_count];
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	24 1b       	sub	r18, r20
    3320:	31 09       	sbc	r19, r1
	    if (sum != 0)
    3322:	a9 f4       	brne	.+42     	; 0x334e <_ZN8Standard14string_compareEPKcS1_+0x46>
    3324:	fc 01       	movw	r30, r24
    3326:	31 96       	adiw	r30, 0x01	; 1
    3328:	db 01       	movw	r26, r22
    332a:	11 96       	adiw	r26, 0x01	; 1
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	50 e0       	ldi	r21, 0x00	; 0
    3330:	07 c0       	rjmp	.+14     	; 0x3340 <_ZN8Standard14string_compareEPKcS1_+0x38>
    }
}
int Standard::string_compare(const char *first, const char *second)
{
    int loop_count{0};
    while (first[loop_count] && second[loop_count])
    3332:	9d 91       	ld	r25, X+
    3334:	99 23       	and	r25, r25
    3336:	01 f1       	breq	.+64     	; 0x3378 <_ZN8Standard14string_compareEPKcS1_+0x70>
    {
	    int sum = first[loop_count] - second[loop_count];
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	29 1b       	sub	r18, r25
    333c:	31 09       	sbc	r19, r1
	    if (sum != 0)
    333e:	49 f4       	brne	.+18     	; 0x3352 <_ZN8Standard14string_compareEPKcS1_+0x4a>
	    {
		    return sum;
	    }
	    ++loop_count;
    3340:	4f 5f       	subi	r20, 0xFF	; 255
    3342:	5f 4f       	sbci	r21, 0xFF	; 255
    }
}
int Standard::string_compare(const char *first, const char *second)
{
    int loop_count{0};
    while (first[loop_count] && second[loop_count])
    3344:	ea 01       	movw	r28, r20
    3346:	21 91       	ld	r18, Z+
    3348:	21 11       	cpse	r18, r1
    334a:	f3 cf       	rjmp	.-26     	; 0x3332 <_ZN8Standard14string_compareEPKcS1_+0x2a>
    334c:	06 c0       	rjmp	.+12     	; 0x335a <_ZN8Standard14string_compareEPKcS1_+0x52>
    {
	    int sum = first[loop_count] - second[loop_count];
    334e:	c9 01       	movw	r24, r18
    3350:	1c c0       	rjmp	.+56     	; 0x338a <_ZN8Standard14string_compareEPKcS1_+0x82>
    3352:	c9 01       	movw	r24, r18
    3354:	1a c0       	rjmp	.+52     	; 0x338a <_ZN8Standard14string_compareEPKcS1_+0x82>
    }
}
int Standard::string_compare(const char *first, const char *second)
{
    int loop_count{0};
    while (first[loop_count] && second[loop_count])
    3356:	c0 e0       	ldi	r28, 0x00	; 0
    3358:	d0 e0       	ldi	r29, 0x00	; 0
	    {
		    return sum;
	    }
	    ++loop_count;
    }
    if ((!first[loop_count]) && second[loop_count])
    335a:	c6 0f       	add	r28, r22
    335c:	d7 1f       	adc	r29, r23
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	28 81       	ld	r18, Y
    3364:	21 11       	cpse	r18, r1
    3366:	02 c0       	rjmp	.+4      	; 0x336c <_ZN8Standard14string_compareEPKcS1_+0x64>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	91 95       	neg	r25
    336e:	81 95       	neg	r24
    3370:	91 09       	sbc	r25, r1
    3372:	0b c0       	rjmp	.+22     	; 0x338a <_ZN8Standard14string_compareEPKcS1_+0x82>
    }
}
int Standard::string_compare(const char *first, const char *second)
{
    int loop_count{0};
    while (first[loop_count] && second[loop_count])
    3374:	c0 e0       	ldi	r28, 0x00	; 0
    3376:	d0 e0       	ldi	r29, 0x00	; 0
	    }
	    ++loop_count;
    }
    if ((!first[loop_count]) && second[loop_count])
		return -1;
    else if (first[loop_count] && !second[loop_count])
    3378:	c6 0f       	add	r28, r22
    337a:	d7 1f       	adc	r29, r23
int Standard::string_compare(const char *first, const char *second)
{
    int loop_count{0};
    while (first[loop_count] && second[loop_count])
    {
	    int sum = first[loop_count] - second[loop_count];
    337c:	31 e0       	ldi	r19, 0x01	; 1
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	88 81       	ld	r24, Y
    3382:	81 11       	cpse	r24, r1
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	83 2f       	mov	r24, r19
    3388:	92 2f       	mov	r25, r18
    if ((!first[loop_count]) && second[loop_count])
		return -1;
    else if (first[loop_count] && !second[loop_count])
	 return 1;
    return 0;
}
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	08 95       	ret

00003390 <_ZN8Standard20string_find_first_ofEPKcic>:
int Standard::string_find_first_of(const char *chars, const int length, const char symbol)
{
    for (int index = 0; index < length; ++index)
    3390:	16 16       	cp	r1, r22
    3392:	17 06       	cpc	r1, r23
    3394:	9c f4       	brge	.+38     	; 0x33bc <_ZN8Standard20string_find_first_ofEPKcic+0x2c>
    {
        if (chars[index] == symbol)
    3396:	fc 01       	movw	r30, r24
    3398:	20 81       	ld	r18, Z
    339a:	42 17       	cp	r20, r18
    339c:	91 f0       	breq	.+36     	; 0x33c2 <_ZN8Standard20string_find_first_ofEPKcic+0x32>
    339e:	31 96       	adiw	r30, 0x01	; 1
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <_ZN8Standard20string_find_first_ofEPKcic+0x1c>
    33a6:	81 91       	ld	r24, Z+
    33a8:	84 17       	cp	r24, r20
    33aa:	71 f0       	breq	.+28     	; 0x33c8 <_ZN8Standard20string_find_first_ofEPKcic+0x38>
	 return 1;
    return 0;
}
int Standard::string_find_first_of(const char *chars, const int length, const char symbol)
{
    for (int index = 0; index < length; ++index)
    33ac:	2f 5f       	subi	r18, 0xFF	; 255
    33ae:	3f 4f       	sbci	r19, 0xFF	; 255
    33b0:	62 17       	cp	r22, r18
    33b2:	73 07       	cpc	r23, r19
    33b4:	c1 f7       	brne	.-16     	; 0x33a6 <_ZN8Standard20string_find_first_ofEPKcic+0x16>
        if (chars[index] == symbol)
        {
            return index;
        }
    }
    return -1;
    33b6:	8f ef       	ldi	r24, 0xFF	; 255
    33b8:	9f ef       	ldi	r25, 0xFF	; 255
    33ba:	08 95       	ret
    33bc:	8f ef       	ldi	r24, 0xFF	; 255
    33be:	9f ef       	ldi	r25, 0xFF	; 255
    33c0:	08 95       	ret
	 return 1;
    return 0;
}
int Standard::string_find_first_of(const char *chars, const int length, const char symbol)
{
    for (int index = 0; index < length; ++index)
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	08 95       	ret
    33c8:	82 2f       	mov	r24, r18
    33ca:	93 2f       	mov	r25, r19
        {
            return index;
        }
    }
    return -1;
}
    33cc:	08 95       	ret

000033ce <_ZN8Standard20string_find_first_ofEPKciS1_>:
int Standard::string_find_first_of(const char *chars, const int length, const char *symbols)
{
    33ce:	8f 92       	push	r8
    33d0:	9f 92       	push	r9
    33d2:	af 92       	push	r10
    33d4:	bf 92       	push	r11
    33d6:	cf 92       	push	r12
    33d8:	df 92       	push	r13
    33da:	ef 92       	push	r14
    33dc:	ff 92       	push	r15
    33de:	0f 93       	push	r16
    33e0:	1f 93       	push	r17
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	e8 2e       	mov	r14, r24
    33e8:	f9 2e       	mov	r15, r25
    33ea:	8b 01       	movw	r16, r22
    33ec:	ea 01       	movw	r28, r20
    int olength = string_length(symbols);
    33ee:	ca 01       	movw	r24, r20
    33f0:	62 df       	rcall	.-316    	; 0x32b6 <_ZN8Standard13string_lengthEPKc>
    33f2:	6b 01       	movw	r12, r22
    int index2{0};
    int first_found_index = -1;
    for (int index = 0; index < length; ++index)
    33f4:	10 16       	cp	r1, r16
    33f6:	11 06       	cpc	r1, r17
    33f8:	4c f5       	brge	.+82     	; 0x344c <_ZN8Standard20string_find_first_ofEPKciS1_+0x7e>
    {
        if (index2 == olength)
    33fa:	67 2b       	or	r22, r23
    33fc:	b1 f1       	breq	.+108    	; 0x346a <_ZN8Standard20string_find_first_ofEPKciS1_+0x9c>
    33fe:	ee 2d       	mov	r30, r14
    3400:	ff 2d       	mov	r31, r15
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	4f ef       	ldi	r20, 0xFF	; 255
    3408:	5f ef       	ldi	r21, 0xFF	; 255
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
            return first_found_index;
        }
        else if (chars[index] != symbols[index2])
        {
            index2 = 0;
            first_found_index = -1;
    340e:	aa 24       	eor	r10, r10
    3410:	aa 94       	dec	r10
    3412:	bb 24       	eor	r11, r11
    3414:	ba 94       	dec	r11
    3416:	03 c0       	rjmp	.+6      	; 0x341e <_ZN8Standard20string_find_first_ofEPKciS1_+0x50>
    int olength = string_length(symbols);
    int index2{0};
    int first_found_index = -1;
    for (int index = 0; index < length; ++index)
    {
        if (index2 == olength)
    3418:	c2 16       	cp	r12, r18
    341a:	d3 06       	cpc	r13, r19
    341c:	49 f1       	breq	.+82     	; 0x3470 <_ZN8Standard20string_find_first_ofEPKciS1_+0xa2>
    341e:	68 2f       	mov	r22, r24
    3420:	89 2e       	mov	r8, r25
        {
            return first_found_index;
        }
        else if (chars[index] != symbols[index2])
    3422:	91 90       	ld	r9, Z+
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	7e 01       	movw	r14, r28
    3428:	e2 0e       	add	r14, r18
    342a:	f3 1e       	adc	r15, r19
    342c:	d7 01       	movw	r26, r14
    342e:	7c 91       	ld	r23, X
    3430:	97 12       	cpse	r9, r23
    3432:	24 c0       	rjmp	.+72     	; 0x347c <_ZN8Standard20string_find_first_ofEPKciS1_+0xae>
            index2 = 0;
            first_found_index = -1;
        }
        else if (chars[index] == symbols[index2])
        {
            if (first_found_index == -1)
    3434:	4f 3f       	cpi	r20, 0xFF	; 255
    3436:	bf ef       	ldi	r27, 0xFF	; 255
    3438:	5b 07       	cpc	r21, r27
    343a:	11 f4       	brne	.+4      	; 0x3440 <_ZN8Standard20string_find_first_ofEPKciS1_+0x72>
    343c:	46 2f       	mov	r20, r22
    343e:	58 2d       	mov	r21, r8
                first_found_index = index;
            ++index2;
    3440:	2f 5f       	subi	r18, 0xFF	; 255
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
int Standard::string_find_first_of(const char *chars, const int length, const char *symbols)
{
    int olength = string_length(symbols);
    int index2{0};
    int first_found_index = -1;
    for (int index = 0; index < length; ++index)
    3444:	80 17       	cp	r24, r16
    3446:	91 07       	cpc	r25, r17
    3448:	3c f3       	brlt	.-50     	; 0x3418 <_ZN8Standard20string_find_first_ofEPKciS1_+0x4a>
    344a:	09 c0       	rjmp	.+18     	; 0x345e <_ZN8Standard20string_find_first_ofEPKciS1_+0x90>
}
int Standard::string_find_first_of(const char *chars, const int length, const char *symbols)
{
    int olength = string_length(symbols);
    int index2{0};
    int first_found_index = -1;
    344c:	4f ef       	ldi	r20, 0xFF	; 255
    344e:	5f ef       	ldi	r21, 0xFF	; 255
    return -1;
}
int Standard::string_find_first_of(const char *chars, const int length, const char *symbols)
{
    int olength = string_length(symbols);
    int index2{0};
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	04 c0       	rjmp	.+8      	; 0x345e <_ZN8Standard20string_find_first_ofEPKciS1_+0x90>
            return first_found_index;
        }
        else if (chars[index] != symbols[index2])
        {
            index2 = 0;
            first_found_index = -1;
    3456:	4f ef       	ldi	r20, 0xFF	; 255
    3458:	5f ef       	ldi	r21, 0xFF	; 255
        {
            return first_found_index;
        }
        else if (chars[index] != symbols[index2])
        {
            index2 = 0;
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
            if (first_found_index == -1)
                first_found_index = index;
            ++index2;
        }
    }
    if (index2 < olength )
    345e:	2c 15       	cp	r18, r12
    3460:	3d 05       	cpc	r19, r13
    3462:	4c f0       	brlt	.+18     	; 0x3476 <_ZN8Standard20string_find_first_ofEPKciS1_+0xa8>
    3464:	84 2f       	mov	r24, r20
    3466:	95 2f       	mov	r25, r21
    3468:	11 c0       	rjmp	.+34     	; 0x348c <_ZN8Standard20string_find_first_ofEPKciS1_+0xbe>
}
int Standard::string_find_first_of(const char *chars, const int length, const char *symbols)
{
    int olength = string_length(symbols);
    int index2{0};
    int first_found_index = -1;
    346a:	8f ef       	ldi	r24, 0xFF	; 255
    346c:	9f ef       	ldi	r25, 0xFF	; 255
    346e:	0e c0       	rjmp	.+28     	; 0x348c <_ZN8Standard20string_find_first_ofEPKciS1_+0xbe>
    3470:	84 2f       	mov	r24, r20
    3472:	95 2f       	mov	r25, r21
    3474:	0b c0       	rjmp	.+22     	; 0x348c <_ZN8Standard20string_find_first_ofEPKciS1_+0xbe>
            ++index2;
        }
    }
    if (index2 < olength )
    {
        return -1;
    3476:	8f ef       	ldi	r24, 0xFF	; 255
    3478:	9f ef       	ldi	r25, 0xFF	; 255
    347a:	08 c0       	rjmp	.+16     	; 0x348c <_ZN8Standard20string_find_first_ofEPKciS1_+0xbe>
int Standard::string_find_first_of(const char *chars, const int length, const char *symbols)
{
    int olength = string_length(symbols);
    int index2{0};
    int first_found_index = -1;
    for (int index = 0; index < length; ++index)
    347c:	80 17       	cp	r24, r16
    347e:	91 07       	cpc	r25, r17
    3480:	54 f7       	brge	.-44     	; 0x3456 <_ZN8Standard20string_find_first_ofEPKciS1_+0x88>
            return first_found_index;
        }
        else if (chars[index] != symbols[index2])
        {
            index2 = 0;
            first_found_index = -1;
    3482:	4a 2d       	mov	r20, r10
    3484:	5b 2d       	mov	r21, r11
        {
            return first_found_index;
        }
        else if (chars[index] != symbols[index2])
        {
            index2 = 0;
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	c9 cf       	rjmp	.-110    	; 0x341e <_ZN8Standard20string_find_first_ofEPKciS1_+0x50>
    }
    else
    {
        return first_found_index;
    }
}
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	1f 91       	pop	r17
    3492:	0f 91       	pop	r16
    3494:	ff 90       	pop	r15
    3496:	ef 90       	pop	r14
    3498:	df 90       	pop	r13
    349a:	cf 90       	pop	r12
    349c:	bf 90       	pop	r11
    349e:	af 90       	pop	r10
    34a0:	9f 90       	pop	r9
    34a2:	8f 90       	pop	r8
    34a4:	08 95       	ret

000034a6 <_ZN8Standard9hash_codeERKNS_6stringE>:
		~string()
		{
			delete[] chars_;
		}
		int size() const { return length_; }
		char &operator[](const int index) const { return chars_[index]; }
    34a6:	dc 01       	movw	r26, r24
    34a8:	14 96       	adiw	r26, 0x04	; 4
    34aa:	ed 91       	ld	r30, X+
    34ac:	fc 91       	ld	r31, X
    34ae:	15 97       	sbiw	r26, 0x05	; 5
int Standard::hash_code(const string &i)
{
    int code{0};
    int loop_counter{0};
    while (i[loop_counter])
    34b0:	90 81       	ld	r25, Z
    34b2:	99 23       	and	r25, r25
    34b4:	81 f0       	breq	.+32     	; 0x34d6 <_ZN8Standard9hash_codeERKNS_6stringE+0x30>
    34b6:	31 96       	adiw	r30, 0x01	; 1
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	50 e0       	ldi	r21, 0x00	; 0
    {
        code += i[loop_counter] + (loop_counter * 1000);
    34c0:	b9 01       	movw	r22, r18
    34c2:	69 0f       	add	r22, r25
    34c4:	71 1d       	adc	r23, r1
    34c6:	46 0f       	add	r20, r22
    34c8:	57 1f       	adc	r21, r23
}
int Standard::hash_code(const string &i)
{
    int code{0};
    int loop_counter{0};
    while (i[loop_counter])
    34ca:	91 91       	ld	r25, Z+
    34cc:	28 51       	subi	r18, 0x18	; 24
    34ce:	3c 4f       	sbci	r19, 0xFC	; 252
    34d0:	91 11       	cpse	r25, r1
    34d2:	f6 cf       	rjmp	.-20     	; 0x34c0 <_ZN8Standard9hash_codeERKNS_6stringE+0x1a>
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <_ZN8Standard9hash_codeERKNS_6stringE+0x34>
        return first_found_index;
    }
}
int Standard::hash_code(const string &i)
{
    int code{0};
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	50 e0       	ldi	r21, 0x00	; 0
    {
        code += i[loop_counter] + (loop_counter * 1000);
        ++loop_counter;
    }
    return code;
}
    34da:	ca 01       	movw	r24, r20
    34dc:	08 95       	ret

000034de <__divmodhi4>:
    34de:	97 fb       	bst	r25, 7
    34e0:	07 2e       	mov	r0, r23
    34e2:	16 f4       	brtc	.+4      	; 0x34e8 <__divmodhi4+0xa>
    34e4:	00 94       	com	r0
    34e6:	06 d0       	rcall	.+12     	; 0x34f4 <__divmodhi4_neg1>
    34e8:	77 fd       	sbrc	r23, 7
    34ea:	08 d0       	rcall	.+16     	; 0x34fc <__divmodhi4_neg2>
    34ec:	13 d0       	rcall	.+38     	; 0x3514 <__udivmodhi4>
    34ee:	07 fc       	sbrc	r0, 7
    34f0:	05 d0       	rcall	.+10     	; 0x34fc <__divmodhi4_neg2>
    34f2:	3e f4       	brtc	.+14     	; 0x3502 <__divmodhi4_exit>

000034f4 <__divmodhi4_neg1>:
    34f4:	90 95       	com	r25
    34f6:	81 95       	neg	r24
    34f8:	9f 4f       	sbci	r25, 0xFF	; 255
    34fa:	08 95       	ret

000034fc <__divmodhi4_neg2>:
    34fc:	70 95       	com	r23
    34fe:	61 95       	neg	r22
    3500:	7f 4f       	sbci	r23, 0xFF	; 255

00003502 <__divmodhi4_exit>:
    3502:	08 95       	ret

00003504 <__tablejump2__>:
    3504:	ee 0f       	add	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	88 1f       	adc	r24, r24
    350a:	8b bf       	out	0x3b, r24	; 59
    350c:	07 90       	elpm	r0, Z+
    350e:	f6 91       	elpm	r31, Z
    3510:	e0 2d       	mov	r30, r0
    3512:	19 94       	eijmp

00003514 <__udivmodhi4>:
    3514:	aa 1b       	sub	r26, r26
    3516:	bb 1b       	sub	r27, r27
    3518:	51 e1       	ldi	r21, 0x11	; 17
    351a:	07 c0       	rjmp	.+14     	; 0x352a <__udivmodhi4_ep>

0000351c <__udivmodhi4_loop>:
    351c:	aa 1f       	adc	r26, r26
    351e:	bb 1f       	adc	r27, r27
    3520:	a6 17       	cp	r26, r22
    3522:	b7 07       	cpc	r27, r23
    3524:	10 f0       	brcs	.+4      	; 0x352a <__udivmodhi4_ep>
    3526:	a6 1b       	sub	r26, r22
    3528:	b7 0b       	sbc	r27, r23

0000352a <__udivmodhi4_ep>:
    352a:	88 1f       	adc	r24, r24
    352c:	99 1f       	adc	r25, r25
    352e:	5a 95       	dec	r21
    3530:	a9 f7       	brne	.-22     	; 0x351c <__udivmodhi4_loop>
    3532:	80 95       	com	r24
    3534:	90 95       	com	r25
    3536:	bc 01       	movw	r22, r24
    3538:	cd 01       	movw	r24, r26
    353a:	08 95       	ret

0000353c <malloc>:
    353c:	0f 93       	push	r16
    353e:	1f 93       	push	r17
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	82 30       	cpi	r24, 0x02	; 2
    3546:	91 05       	cpc	r25, r1
    3548:	10 f4       	brcc	.+4      	; 0x354e <malloc+0x12>
    354a:	82 e0       	ldi	r24, 0x02	; 2
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	e0 91 a4 03 	lds	r30, 0x03A4	; 0x8003a4 <__flp>
    3552:	f0 91 a5 03 	lds	r31, 0x03A5	; 0x8003a5 <__flp+0x1>
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	a0 e0       	ldi	r26, 0x00	; 0
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	30 97       	sbiw	r30, 0x00	; 0
    3560:	19 f1       	breq	.+70     	; 0x35a8 <malloc+0x6c>
    3562:	40 81       	ld	r20, Z
    3564:	51 81       	ldd	r21, Z+1	; 0x01
    3566:	02 81       	ldd	r16, Z+2	; 0x02
    3568:	13 81       	ldd	r17, Z+3	; 0x03
    356a:	48 17       	cp	r20, r24
    356c:	59 07       	cpc	r21, r25
    356e:	c8 f0       	brcs	.+50     	; 0x35a2 <malloc+0x66>
    3570:	84 17       	cp	r24, r20
    3572:	95 07       	cpc	r25, r21
    3574:	69 f4       	brne	.+26     	; 0x3590 <malloc+0x54>
    3576:	10 97       	sbiw	r26, 0x00	; 0
    3578:	31 f0       	breq	.+12     	; 0x3586 <malloc+0x4a>
    357a:	12 96       	adiw	r26, 0x02	; 2
    357c:	0c 93       	st	X, r16
    357e:	12 97       	sbiw	r26, 0x02	; 2
    3580:	13 96       	adiw	r26, 0x03	; 3
    3582:	1c 93       	st	X, r17
    3584:	27 c0       	rjmp	.+78     	; 0x35d4 <malloc+0x98>
    3586:	00 93 a4 03 	sts	0x03A4, r16	; 0x8003a4 <__flp>
    358a:	10 93 a5 03 	sts	0x03A5, r17	; 0x8003a5 <__flp+0x1>
    358e:	22 c0       	rjmp	.+68     	; 0x35d4 <malloc+0x98>
    3590:	21 15       	cp	r18, r1
    3592:	31 05       	cpc	r19, r1
    3594:	19 f0       	breq	.+6      	; 0x359c <malloc+0x60>
    3596:	42 17       	cp	r20, r18
    3598:	53 07       	cpc	r21, r19
    359a:	18 f4       	brcc	.+6      	; 0x35a2 <malloc+0x66>
    359c:	9a 01       	movw	r18, r20
    359e:	bd 01       	movw	r22, r26
    35a0:	ef 01       	movw	r28, r30
    35a2:	df 01       	movw	r26, r30
    35a4:	f8 01       	movw	r30, r16
    35a6:	db cf       	rjmp	.-74     	; 0x355e <malloc+0x22>
    35a8:	21 15       	cp	r18, r1
    35aa:	31 05       	cpc	r19, r1
    35ac:	f9 f0       	breq	.+62     	; 0x35ec <malloc+0xb0>
    35ae:	28 1b       	sub	r18, r24
    35b0:	39 0b       	sbc	r19, r25
    35b2:	24 30       	cpi	r18, 0x04	; 4
    35b4:	31 05       	cpc	r19, r1
    35b6:	80 f4       	brcc	.+32     	; 0x35d8 <malloc+0x9c>
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	9b 81       	ldd	r25, Y+3	; 0x03
    35bc:	61 15       	cp	r22, r1
    35be:	71 05       	cpc	r23, r1
    35c0:	21 f0       	breq	.+8      	; 0x35ca <malloc+0x8e>
    35c2:	fb 01       	movw	r30, r22
    35c4:	93 83       	std	Z+3, r25	; 0x03
    35c6:	82 83       	std	Z+2, r24	; 0x02
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <malloc+0x96>
    35ca:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <__flp+0x1>
    35ce:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <__flp>
    35d2:	fe 01       	movw	r30, r28
    35d4:	32 96       	adiw	r30, 0x02	; 2
    35d6:	44 c0       	rjmp	.+136    	; 0x3660 <malloc+0x124>
    35d8:	fe 01       	movw	r30, r28
    35da:	e2 0f       	add	r30, r18
    35dc:	f3 1f       	adc	r31, r19
    35de:	81 93       	st	Z+, r24
    35e0:	91 93       	st	Z+, r25
    35e2:	22 50       	subi	r18, 0x02	; 2
    35e4:	31 09       	sbc	r19, r1
    35e6:	39 83       	std	Y+1, r19	; 0x01
    35e8:	28 83       	st	Y, r18
    35ea:	3a c0       	rjmp	.+116    	; 0x3660 <malloc+0x124>
    35ec:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <__brkval>
    35f0:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <__brkval+0x1>
    35f4:	23 2b       	or	r18, r19
    35f6:	41 f4       	brne	.+16     	; 0x3608 <malloc+0xcc>
    35f8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    35fc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3600:	30 93 a3 03 	sts	0x03A3, r19	; 0x8003a3 <__brkval+0x1>
    3604:	20 93 a2 03 	sts	0x03A2, r18	; 0x8003a2 <__brkval>
    3608:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    360c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    3610:	21 15       	cp	r18, r1
    3612:	31 05       	cpc	r19, r1
    3614:	41 f4       	brne	.+16     	; 0x3626 <malloc+0xea>
    3616:	2d b7       	in	r18, 0x3d	; 61
    3618:	3e b7       	in	r19, 0x3e	; 62
    361a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    361e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3622:	24 1b       	sub	r18, r20
    3624:	35 0b       	sbc	r19, r21
    3626:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <__brkval>
    362a:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <__brkval+0x1>
    362e:	e2 17       	cp	r30, r18
    3630:	f3 07       	cpc	r31, r19
    3632:	a0 f4       	brcc	.+40     	; 0x365c <malloc+0x120>
    3634:	2e 1b       	sub	r18, r30
    3636:	3f 0b       	sbc	r19, r31
    3638:	28 17       	cp	r18, r24
    363a:	39 07       	cpc	r19, r25
    363c:	78 f0       	brcs	.+30     	; 0x365c <malloc+0x120>
    363e:	ac 01       	movw	r20, r24
    3640:	4e 5f       	subi	r20, 0xFE	; 254
    3642:	5f 4f       	sbci	r21, 0xFF	; 255
    3644:	24 17       	cp	r18, r20
    3646:	35 07       	cpc	r19, r21
    3648:	48 f0       	brcs	.+18     	; 0x365c <malloc+0x120>
    364a:	4e 0f       	add	r20, r30
    364c:	5f 1f       	adc	r21, r31
    364e:	50 93 a3 03 	sts	0x03A3, r21	; 0x8003a3 <__brkval+0x1>
    3652:	40 93 a2 03 	sts	0x03A2, r20	; 0x8003a2 <__brkval>
    3656:	81 93       	st	Z+, r24
    3658:	91 93       	st	Z+, r25
    365a:	02 c0       	rjmp	.+4      	; 0x3660 <malloc+0x124>
    365c:	e0 e0       	ldi	r30, 0x00	; 0
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	cf 01       	movw	r24, r30
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	08 95       	ret

0000366c <free>:
    366c:	cf 93       	push	r28
    366e:	df 93       	push	r29
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	09 f4       	brne	.+2      	; 0x3676 <free+0xa>
    3674:	81 c0       	rjmp	.+258    	; 0x3778 <free+0x10c>
    3676:	fc 01       	movw	r30, r24
    3678:	32 97       	sbiw	r30, 0x02	; 2
    367a:	13 82       	std	Z+3, r1	; 0x03
    367c:	12 82       	std	Z+2, r1	; 0x02
    367e:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <__flp>
    3682:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <__flp+0x1>
    3686:	10 97       	sbiw	r26, 0x00	; 0
    3688:	81 f4       	brne	.+32     	; 0x36aa <free+0x3e>
    368a:	20 81       	ld	r18, Z
    368c:	31 81       	ldd	r19, Z+1	; 0x01
    368e:	82 0f       	add	r24, r18
    3690:	93 1f       	adc	r25, r19
    3692:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <__brkval>
    3696:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <__brkval+0x1>
    369a:	28 17       	cp	r18, r24
    369c:	39 07       	cpc	r19, r25
    369e:	51 f5       	brne	.+84     	; 0x36f4 <free+0x88>
    36a0:	f0 93 a3 03 	sts	0x03A3, r31	; 0x8003a3 <__brkval+0x1>
    36a4:	e0 93 a2 03 	sts	0x03A2, r30	; 0x8003a2 <__brkval>
    36a8:	67 c0       	rjmp	.+206    	; 0x3778 <free+0x10c>
    36aa:	ed 01       	movw	r28, r26
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	ce 17       	cp	r28, r30
    36b2:	df 07       	cpc	r29, r31
    36b4:	40 f4       	brcc	.+16     	; 0x36c6 <free+0x5a>
    36b6:	4a 81       	ldd	r20, Y+2	; 0x02
    36b8:	5b 81       	ldd	r21, Y+3	; 0x03
    36ba:	9e 01       	movw	r18, r28
    36bc:	41 15       	cp	r20, r1
    36be:	51 05       	cpc	r21, r1
    36c0:	f1 f0       	breq	.+60     	; 0x36fe <free+0x92>
    36c2:	ea 01       	movw	r28, r20
    36c4:	f5 cf       	rjmp	.-22     	; 0x36b0 <free+0x44>
    36c6:	d3 83       	std	Z+3, r29	; 0x03
    36c8:	c2 83       	std	Z+2, r28	; 0x02
    36ca:	40 81       	ld	r20, Z
    36cc:	51 81       	ldd	r21, Z+1	; 0x01
    36ce:	84 0f       	add	r24, r20
    36d0:	95 1f       	adc	r25, r21
    36d2:	c8 17       	cp	r28, r24
    36d4:	d9 07       	cpc	r29, r25
    36d6:	59 f4       	brne	.+22     	; 0x36ee <free+0x82>
    36d8:	88 81       	ld	r24, Y
    36da:	99 81       	ldd	r25, Y+1	; 0x01
    36dc:	84 0f       	add	r24, r20
    36de:	95 1f       	adc	r25, r21
    36e0:	02 96       	adiw	r24, 0x02	; 2
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	80 83       	st	Z, r24
    36e6:	8a 81       	ldd	r24, Y+2	; 0x02
    36e8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ea:	93 83       	std	Z+3, r25	; 0x03
    36ec:	82 83       	std	Z+2, r24	; 0x02
    36ee:	21 15       	cp	r18, r1
    36f0:	31 05       	cpc	r19, r1
    36f2:	29 f4       	brne	.+10     	; 0x36fe <free+0x92>
    36f4:	f0 93 a5 03 	sts	0x03A5, r31	; 0x8003a5 <__flp+0x1>
    36f8:	e0 93 a4 03 	sts	0x03A4, r30	; 0x8003a4 <__flp>
    36fc:	3d c0       	rjmp	.+122    	; 0x3778 <free+0x10c>
    36fe:	e9 01       	movw	r28, r18
    3700:	fb 83       	std	Y+3, r31	; 0x03
    3702:	ea 83       	std	Y+2, r30	; 0x02
    3704:	49 91       	ld	r20, Y+
    3706:	59 91       	ld	r21, Y+
    3708:	c4 0f       	add	r28, r20
    370a:	d5 1f       	adc	r29, r21
    370c:	ec 17       	cp	r30, r28
    370e:	fd 07       	cpc	r31, r29
    3710:	61 f4       	brne	.+24     	; 0x372a <free+0xbe>
    3712:	80 81       	ld	r24, Z
    3714:	91 81       	ldd	r25, Z+1	; 0x01
    3716:	84 0f       	add	r24, r20
    3718:	95 1f       	adc	r25, r21
    371a:	02 96       	adiw	r24, 0x02	; 2
    371c:	e9 01       	movw	r28, r18
    371e:	99 83       	std	Y+1, r25	; 0x01
    3720:	88 83       	st	Y, r24
    3722:	82 81       	ldd	r24, Z+2	; 0x02
    3724:	93 81       	ldd	r25, Z+3	; 0x03
    3726:	9b 83       	std	Y+3, r25	; 0x03
    3728:	8a 83       	std	Y+2, r24	; 0x02
    372a:	e0 e0       	ldi	r30, 0x00	; 0
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	12 96       	adiw	r26, 0x02	; 2
    3730:	8d 91       	ld	r24, X+
    3732:	9c 91       	ld	r25, X
    3734:	13 97       	sbiw	r26, 0x03	; 3
    3736:	00 97       	sbiw	r24, 0x00	; 0
    3738:	19 f0       	breq	.+6      	; 0x3740 <free+0xd4>
    373a:	fd 01       	movw	r30, r26
    373c:	dc 01       	movw	r26, r24
    373e:	f7 cf       	rjmp	.-18     	; 0x372e <free+0xc2>
    3740:	8d 91       	ld	r24, X+
    3742:	9c 91       	ld	r25, X
    3744:	11 97       	sbiw	r26, 0x01	; 1
    3746:	9d 01       	movw	r18, r26
    3748:	2e 5f       	subi	r18, 0xFE	; 254
    374a:	3f 4f       	sbci	r19, 0xFF	; 255
    374c:	82 0f       	add	r24, r18
    374e:	93 1f       	adc	r25, r19
    3750:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <__brkval>
    3754:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <__brkval+0x1>
    3758:	28 17       	cp	r18, r24
    375a:	39 07       	cpc	r19, r25
    375c:	69 f4       	brne	.+26     	; 0x3778 <free+0x10c>
    375e:	30 97       	sbiw	r30, 0x00	; 0
    3760:	29 f4       	brne	.+10     	; 0x376c <free+0x100>
    3762:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <__flp+0x1>
    3766:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <__flp>
    376a:	02 c0       	rjmp	.+4      	; 0x3770 <free+0x104>
    376c:	13 82       	std	Z+3, r1	; 0x03
    376e:	12 82       	std	Z+2, r1	; 0x02
    3770:	b0 93 a3 03 	sts	0x03A3, r27	; 0x8003a3 <__brkval+0x1>
    3774:	a0 93 a2 03 	sts	0x03A2, r26	; 0x8003a2 <__brkval>
    3778:	df 91       	pop	r29
    377a:	cf 91       	pop	r28
    377c:	08 95       	ret

0000377e <__do_global_dtors>:
    377e:	10 e0       	ldi	r17, 0x00	; 0
    3780:	ce e7       	ldi	r28, 0x7E	; 126
    3782:	d0 e0       	ldi	r29, 0x00	; 0
    3784:	00 e0       	ldi	r16, 0x00	; 0
    3786:	05 c0       	rjmp	.+10     	; 0x3792 <__do_global_dtors+0x14>
    3788:	80 2f       	mov	r24, r16
    378a:	fe 01       	movw	r30, r28
    378c:	bb de       	rcall	.-650    	; 0x3504 <__tablejump2__>
    378e:	21 96       	adiw	r28, 0x01	; 1
    3790:	01 1d       	adc	r16, r1
    3792:	c0 38       	cpi	r28, 0x80	; 128
    3794:	d1 07       	cpc	r29, r17
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	08 07       	cpc	r16, r24
    379a:	b1 f7       	brne	.-20     	; 0x3788 <__do_global_dtors+0xa>
    379c:	f8 94       	cli

0000379e <__stop_program>:
    379e:	ff cf       	rjmp	.-2      	; 0x379e <__stop_program>
